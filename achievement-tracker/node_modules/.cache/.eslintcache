[{"/home/abdullah/SteamStatsTracker/achievement-tracker/src/index.js":"1","/home/abdullah/SteamStatsTracker/achievement-tracker/src/reportWebVitals.js":"2","/home/abdullah/SteamStatsTracker/achievement-tracker/src/App.js":"3","/home/abdullah/SteamStatsTracker/achievement-tracker/src/actions/reactAuth.js":"4","/home/abdullah/SteamStatsTracker/achievement-tracker/src/config.js":"5","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/Login/index.js":"6","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/ReviewForum/index.js":"7","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/InfoPage/index.js":"8","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/Dashboard/index.js":"9","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/Signup/index.js":"10","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/Admin/index.js":"11","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/Home/index.js":"12","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/GameAchievements/index.js":"13","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/AccountSettings/index.js":"14","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/Analytics/index.js":"15","/home/abdullah/SteamStatsTracker/achievement-tracker/src/actions/voteRecord.js":"16","/home/abdullah/SteamStatsTracker/achievement-tracker/src/actions/review.js":"17","/home/abdullah/SteamStatsTracker/achievement-tracker/src/actions/reputation.js":"18","/home/abdullah/SteamStatsTracker/achievement-tracker/src/actions/profilePic.js":"19","/home/abdullah/SteamStatsTracker/achievement-tracker/src/actions/steamHelpers.js":"20","/home/abdullah/SteamStatsTracker/achievement-tracker/src/actions/friend.js":"21","/home/abdullah/SteamStatsTracker/achievement-tracker/src/actions/user.js":"22","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/ForumSearchBar/index.js":"23","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/HeaderComponent/index.js":"24","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/Review/index.js":"25","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/ReviewSubmit/index.js":"26","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/ChatBox/index.js":"27","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/PersonalBanner/index.js":"28","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/Achievement/ProgressBar/index.js":"29","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/Achievement/index.js":"30","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/HomeBody/index.js":"31","/home/abdullah/SteamStatsTracker/achievement-tracker/src/Containers/index.js":"32","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/UserBar/index.js":"33","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/ReviewBar/index.js":"34","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/AdminSearchBar/index.js":"35","/home/abdullah/SteamStatsTracker/achievement-tracker/src/actions/chat.js":"36","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/HeaderComponent/CurrentHeaderButton/index.js":"37","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/HeaderComponent/HeaderImage/index.js":"38","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/HeaderComponent/HeaderButton/index.js":"39","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/HeaderComponent/HeaderContainer/index.js":"40","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/HeaderComponent/HeaderNavBar/index.js":"41","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/PersonalBanner/BannerContainer/index.js":"42","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/PersonalBanner/BannerLink/index.js":"43","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/PersonalBanner/FriendList/index.js":"44","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/PersonalBanner/PersonalPic/index.js":"45","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/Achievement/Game/index.js":"46","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/PersonalBanner/Friend/index.js":"47","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/Achievement/AchievementContainer/index.js":"48","/home/abdullah/SteamStatsTracker/achievement-tracker/src/Containers/Header/index.js":"49","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/UserKeys.js":"50"},{"size":500,"mtime":1678067705000,"results":"51","hashOfConfig":"52"},{"size":362,"mtime":1678067705000,"results":"53","hashOfConfig":"52"},{"size":3762,"mtime":1678067705000,"results":"54","hashOfConfig":"52"},{"size":2930,"mtime":1678067705000,"results":"55","hashOfConfig":"52"},{"size":550,"mtime":1678067705000,"results":"56","hashOfConfig":"52"},{"size":3347,"mtime":1678067705000,"results":"57","hashOfConfig":"52"},{"size":15568,"mtime":1678067705000,"results":"58","hashOfConfig":"52"},{"size":13966,"mtime":1678067705000,"results":"59","hashOfConfig":"52"},{"size":14875,"mtime":1678067705000,"results":"60","hashOfConfig":"52"},{"size":7345,"mtime":1678067705000,"results":"61","hashOfConfig":"52"},{"size":5278,"mtime":1678067705000,"results":"62","hashOfConfig":"52"},{"size":468,"mtime":1678067705000,"results":"63","hashOfConfig":"52"},{"size":5953,"mtime":1678067705000,"results":"64","hashOfConfig":"52"},{"size":5969,"mtime":1678067705000,"results":"65","hashOfConfig":"52"},{"size":18828,"mtime":1678067705000,"results":"66","hashOfConfig":"52"},{"size":3132,"mtime":1678067705000,"results":"67","hashOfConfig":"52"},{"size":4564,"mtime":1678067705000,"results":"68","hashOfConfig":"52"},{"size":1388,"mtime":1678067705000,"results":"69","hashOfConfig":"52"},{"size":1254,"mtime":1678067705000,"results":"70","hashOfConfig":"52"},{"size":1437,"mtime":1678067705000,"results":"71","hashOfConfig":"52"},{"size":5371,"mtime":1678067705000,"results":"72","hashOfConfig":"52"},{"size":1259,"mtime":1678067705000,"results":"73","hashOfConfig":"52"},{"size":885,"mtime":1678067705000,"results":"74","hashOfConfig":"52"},{"size":300,"mtime":1678067705000,"results":"75","hashOfConfig":"52"},{"size":1906,"mtime":1678067705000,"results":"76","hashOfConfig":"52"},{"size":1089,"mtime":1678067705000,"results":"77","hashOfConfig":"52"},{"size":5813,"mtime":1678067705000,"results":"78","hashOfConfig":"52"},{"size":268,"mtime":1678067705000,"results":"79","hashOfConfig":"52"},{"size":356,"mtime":1678067705000,"results":"80","hashOfConfig":"52"},{"size":114,"mtime":1678067705000,"results":"81","hashOfConfig":"52"},{"size":236,"mtime":1678067705000,"results":"82","hashOfConfig":"52"},{"size":51,"mtime":1678067705000,"results":"83","hashOfConfig":"52"},{"size":649,"mtime":1678067705000,"results":"84","hashOfConfig":"52"},{"size":1033,"mtime":1678067705000,"results":"85","hashOfConfig":"52"},{"size":871,"mtime":1678067705000,"results":"86","hashOfConfig":"52"},{"size":602,"mtime":1678067705000,"results":"87","hashOfConfig":"52"},{"size":700,"mtime":1678067705000,"results":"88","hashOfConfig":"52"},{"size":355,"mtime":1678067705000,"results":"89","hashOfConfig":"52"},{"size":625,"mtime":1678067705000,"results":"90","hashOfConfig":"52"},{"size":269,"mtime":1678067705000,"results":"91","hashOfConfig":"52"},{"size":254,"mtime":1678067705000,"results":"92","hashOfConfig":"52"},{"size":302,"mtime":1678067705000,"results":"93","hashOfConfig":"52"},{"size":344,"mtime":1678067705000,"results":"94","hashOfConfig":"52"},{"size":247,"mtime":1678067705000,"results":"95","hashOfConfig":"52"},{"size":224,"mtime":1678067705000,"results":"96","hashOfConfig":"52"},{"size":573,"mtime":1678067705000,"results":"97","hashOfConfig":"52"},{"size":1092,"mtime":1678067705000,"results":"98","hashOfConfig":"52"},{"size":286,"mtime":1678067705000,"results":"99","hashOfConfig":"52"},{"size":888,"mtime":1678067705000,"results":"100","hashOfConfig":"52"},{"size":517,"mtime":1678067705000,"results":"101","hashOfConfig":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"4qvj5t",{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/abdullah/SteamStatsTracker/achievement-tracker/src/index.js",[],"/home/abdullah/SteamStatsTracker/achievement-tracker/src/reportWebVitals.js",[],"/home/abdullah/SteamStatsTracker/achievement-tracker/src/App.js",[],"/home/abdullah/SteamStatsTracker/achievement-tracker/src/actions/reactAuth.js",[],"/home/abdullah/SteamStatsTracker/achievement-tracker/src/config.js",[],"/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/Login/index.js",["219"],"import React from 'react'\nimport ReCAPTCHA from \"react-google-recaptcha\"\nimport Button from 'react-bootstrap/Button'\n\nimport { Redirect } from 'react-router-dom'\n\nimport { CurrentHeaderButton, HeaderButton, HeadContainer, HeaderNavBar, HeaderImage } from '../HeaderComponent'\nimport logo from './../../steamIcon2.png'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './Login.css';\n\nimport { login } from '../../actions/reactAuth'\n\n\nconst log = console.log\n\nclass Login extends React.Component {\n\n  state = {\n    userName: '',\n    passWord: '',\n    captcha_solved: false\n  }\n\n  componentDidMount() {\n    // enter key tries to sign in\n    window.onkeydown = e => { if (this.state.captcha_solved && e.code === 'Enter') { this.handleLogin() } }\n  }\n\n  handleInputChange = (event) => {\n    const target = event.target\n    const value = target.value\n    const name = target.name\n\n    this.setState({\n      [name]: value\n    })\n  }\n\n  handleLogin = () => {\n    const loginDetails = {\n      username: this.state.userName,\n      password: this.state.passWord\n    }\n    const { app } = this.props\n    login(loginDetails, app)\n  }\n\n  handleSignup = () => {\n    this.setState({\n      redirect: '/Signup'\n    })\n  }\n\n  gameAchievements = () => {\n    this.setState({\n      redirect: '/gameAchievements'\n    })\n  }\n\n  handleCaptchaSolve = () => {\n    this.setState({\n      captcha_solved: true\n    })\n  }\n\n  render() {\n    if (this.state.redirect) {\n      return <Redirect to={this.state.redirect} />\n    }\n    return (\n      <div id='LoginPage'>\n        <HeadContainer bgId={\"dashboard\"}>\n          <HeaderNavBar>\n            <HeaderImage to='/' src={logo} />\n            <div className='group'>\n              <HeaderButton path='/reviewforum'>Forum</HeaderButton>\n              <CurrentHeaderButton>Login</CurrentHeaderButton>\n              <span className=\"slash\">/</span>\n              <HeaderButton path=\"/Signup\">Sign Up</HeaderButton>\n            </div>\n          </HeaderNavBar>\n        </HeadContainer>\n        <div id=\"LoginContainer\">\n          <div id=\"LoginCredentials\">\n            <p className='loginText'>Please enter your credentials:</p>\n\n            <input className=\"LoginField\"\n              value={this.state.userName}\n              onChange={this.handleInputChange}\n              type='text'\n              name='userName'\n              placeholder='Username'\n              autoFocus></input>\n\n            <input className=\"LoginField\"\n              value={this.state.passWord}\n              onChange={this.handleInputChange}\n              type='password'\n              name='passWord'\n              placeholder='Password'></input>\n\n            <Button className=\"LoginButton\"\n              variant=\"primary\"\n              disabled={!this.state.captcha_solved}\n              onClick={this.handleLogin}>Log In</Button>\n          </div>\n\n          <div id=\"SignupRedirect\">\n            <p className='loginText'>Don't have an account?</p>\n\n            <Button className=\"LoginButton\"\n              variant=\"secondary\"\n              onClick={this.handleSignup}>Sign Up</Button>\n\n            <ReCAPTCHA\n              className='loginCaptcha'\n              sitekey=\"6LckfXMaAAAAAFQXopzO5R-TmD-4VQlwcRIx7YWy\"\n              onChange={this.handleCaptchaSolve} />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Login;\n","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/ReviewForum/index.js",[],"/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/InfoPage/index.js",["220","221","222","223","224","225","226","227","228","229","230","231"],"import React from \"react\";\nimport { CurrentHeaderButton, HeaderButton, HeaderNavBar, HeaderImage, HeadContainer } from '../HeaderComponent'\nimport './InfoPage.css'\nimport logo from './../../steamIcon2.png'\nimport method1_1 from './imgs/method1_1.png'\nimport method1_2 from './imgs/method1_2.png'\nimport method1_3 from './imgs/method1_3.png'\nimport method2_1 from './imgs/method2_1.png'\nimport method2_2 from './imgs/method2_2.png'\nimport method2_3 from './imgs/method2_3.png'\nimport addendum_1 from './imgs/addendum_1.png'\nimport addendum_2 from './imgs/addendum_2.png'\nimport notes1 from './imgs/notes1.png'\nimport notes2 from './imgs/notes2.png'\n\n\nclass SteamInfo extends React.Component {\n    render() {\n        return (\n            <div id=\"SteamInfo\">\n                <HeadContainer bgId={\"dashboard\"}>\n                    <HeaderNavBar>\n                        <HeaderImage to=\"/dashboard\" src={logo}></HeaderImage>\n                        <div className='group'>\n                            <CurrentHeaderButton path='/SteamInfo'>Info</CurrentHeaderButton>\n                            <HeaderButton path='/'>Home</HeaderButton>\n                        </div>\n                    </HeaderNavBar>\n                </HeadContainer>\n                <div id=\"InfoPage\">\n                    <div id=\"InfoTitle\">\n                        <h1> How do I find my Steam ID? </h1>\n                    </div>\n\n                    <div id=\"InfoBody\">\n                        <div id=\"Introduction\">\n                            <p> Not sure what your Steam ID is, or where to find it? Not to worry! This simple guide explains it all. </p>\n                            <p> Your Steam ID is a 64-bit integer unique to your profile. We require it from all users so that we can reliably\n                                identify and locate your Steam profile to show you up-to-date and accurate statistics about your gaming history. </p>\n                            <p> You can locate your ID on your Steam profile by following the steps below: </p>\n                        </div>\n                        <div id=\"Method1\">\n                            <h2> Method 1: New or Limited Steam Accounts </h2>\n                            <div className=\"methodDescription\">\n                                <p> If your Steam account is relatively new (created in 2018 or later)\n                                or is a limited account (you have spent less than the equivalent of 10 USD on the Steam Store),\n                                    you will probably be able to find your Steam ID on your profile's URL.</p>\n                            </div>\n                            <div className=\"methodSteps\">\n                                <ol>\n                                    <li> Log in to your Steam account, either on your browser or through the Steam desktop client. </li>\n                                    <li> Navigate to your personal profile page. You can do this using the drop down menu on the PROFILE tab\n                                    in the center of the header of the client window, next to the COMMUNITY tab.\n                                    The name of the Profile tab would be replaced by your personal display name, as shown (marked\n                                        in red) in the example image below: </li>\n                                    <div className=\"methodImage\">\n                                        <img src={method1_1} />\n                                    </div>\n                                    <li> Locate the URL of the Profile page that you are currently on. If using a browser, you should\n                                    see the URL in the location bar of your browser window. If using the Steam desktop client,\n                                        the URL of the page should appear below the client window's header in green text by default \n                                        <a href=\"#Notes\"> <sup> [ * ] </sup> </a> (indicated in the example image below): </li>\n                                    <div className=\"methodImage\">\n                                        <img src={method1_2} />\n                                    </div>\n                                    <li> Your unique Steam ID is the 17-digit number at the end of the URL. For most users, this ID will\n                                    typically start with the 4 digits '7656'.\n                                        <div className=\"methodImage\">\n                                            <img src={method1_3} />\n                                        </div>\n                                        If you don't find such a number in the URL at this point,\n                                        you may have overwritten that part of your profile through customization. Don't worry, try the\n                                        steps in <a href=\"#Method2\"> Method 2 </a> below.\n                                    </li>\n                                    <li> IMPORTANT: Before creating your account, please make sure your Steam details are set to Public, so that we can\n                                        use your data to populate your profile properly. You can visit the <a href=\"#Addendum\"> Addendum </a> below,\n                                        for more information on how to do this. </li>\n                                    <li> Once you have located your Steam ID, copy the entire number and return to the AchievementTracker's\n                                        Sign Up page to resume your account creation process. </li>\n                                    <li> Enter your ID in the relevant input field, with the description \"Enter Steam ID\". Fill out the other\n                                    input fields as required too, and Sign Up for an account.\n                                    </li>\n                                    <li> Congratulations! You have officially signed up for an AchievementTracker account! We hope you enjoy\n                                    the services we have to offer.\n                                    </li>\n                                </ol>\n                            </div>\n                        </div>\n                        <div id=\"Method2\">\n                            <h2> Method 2: Legacy or Veteran Accounts </h2>\n                            <div className=\"methodDescription\">\n                                <p> If you have significantly customized your Steam account over its lifetime, perhaps by adding a Vanity URL\n                                    or frequently changing your display name, your Steam ID may not appear in the URL of your profile page. </p>\n                                <p> If this is the case, this is no problem at all. You can still find your Steam ID through your profile.\n                                Just follow the steps below, and once you have successfully created an AchievementTracker account, you\n                                    can continue customizing your Steam profile however you like! </p>\n                            </div>\n                            <div className=\"methodSteps\">\n                                <ol>\n                                    <li> Log in to your Steam account, either through your browser or the desktop client. </li>\n                                    <li> Navigate to your personal Profile page. Review Step 2 of Method 1 above, if necessary. </li>\n                                    <div className=\"methodImage\">\n                                        <img src={method1_1} />\n                                    </div>\n                                    <li> Click the \"Edit Profile\" button on the right side of your Profile banner (indicated in the example below): </li>\n                                    <div className=\"methodImage\">\n                                        <img src={method2_1} />\n                                    </div>\n                                    <li> This should take you to a customization screen that allows you to personalize multiple aspects\n                                    of your profile. Hopefully you are familiar with this page. Click the \"General\" tab on the left side\n                                        of the page and scroll down to the \"Custom URL\" field. </li>\n                                    <div className=\"methodImage\">\n                                        <img src={method2_2} />\n                                    </div>\n                                    <li> Clear the Custom URL field to reveal your unique Steam ID. (Don't worry! You can reapply your Custom URL\n                                    once you have successfully signed up for an AchievementTracker account. If you wish, you can save your\n                                        Custom URL in a different location to easily reapply it later.) </li>\n                                    <li> Now that you have cleared the Custom URL, your Steam ID should be revealed in the note below the input field.\n                                        It is a 17-digit number, which for most users starts with the 4 digits \"7656\" (indicated in the example below): </li>\n                                    <div className=\"methodImage\">\n                                        <img src={method2_3} />\n                                    </div>\n                                    <li> IMPORTANT: Before creating your account, please make sure your Steam details are set to Public, so that we can\n                                        use your data to populate your profile properly. You can visit the <a href=\"#Addendum\"> Addendum </a> below,\n                                        for more information on how to do this. </li>\n                                    <li> Now that you have set your profile data to Public and have successfully located your Steam ID, copy the entire\n                                        number and return to the AchievementTracker's Sign Up page to resume your account creation process. </li>\n                                    <li> Enter your ID in the relevant input field, and fill out the other input fields as required to Sign Up. </li>\n                                    <li> Congratulations! You have officially signed up for an AchievementTracker account! We hope you enjoy\n                                        the services we have to offer. </li>\n                                </ol>\n                            </div>\n                        </div>\n                        <div id=\"Addendum\">\n                            <h2> Addendum: Setting your Profile Details to Public </h2>\n                            <div className=\"methodDescription\">\n                                <p> This section describes how to set your game details to Public, so that we can access your data and present the\n                                    relevant visualizations for you. </p>\n                            </div>\n                            <div className=\"methodSteps\">\n                                <ol>\n                                    <li> Navigate to your personal Profile page. </li>\n                                    <li> Click the \"Edit Profile\" button on the right side of your Profile banner (indicated in the example below): </li>\n                                    <div className=\"methodImage\">\n                                        <img src={method2_1} />\n                                    </div>\n                                    <li> Click on the \"Privacy Settings\" tab on the left side of the page. This should present you with a list of your\n                                        account details, each of which you can customize the privacy level of (indicated in the example below): </li>\n                                    <div className=\"methodImage\">\n                                        <img src={addendum_1} />\n                                    </div>\n                                    <li> Make sure the \"My Basic Details\", \"My Profile\", \"Game Details\", and \"Friends List\" elements are all set to \"Public\", \n                                        and uncheck the \"Always keep my total playtime private\" option as well, if applicable (all shown in below example): </li>\n                                    <div className=\"methodImage\">\n                                        <img src={addendum_2} />\n                                    </div>\n                                    <li> Once you have completed all the above steps, you can continue your account creation process through AchievementTracker's \n                                        Sign Up page. </li>\n                                </ol>\n                            </div>\n                        </div>\n                        <div id=\"Notes\">\n                            <p> <a href=\"#Notes\"> * </a> : If you are using the desktop client and the URL is not visible in the aforementioned location,\n                                    you may need to check your Steam client settings. Navigate to the Settings page by clicking the \"Steam\" tab at the\n                                    top-left of the window and click on \"Settings\" in the resulting drop-down menu. In the \"Interface\" tab of the resulting\n                                    pop-up window, make sure the \"Display web address bars when available\" option is checked and save your settings.\n                                    After doing that, continue the process outlined above. </p>\n                            <div id=\"NotesImage1\">\n                                <img src={notes1} />\n                            </div>\n                            <div id=\"NotesImage2\">\n                                <img src={notes2} />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default SteamInfo;","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/Dashboard/index.js",["232","233","234","235","236","237","238","239","240"],"import React from \"react\";\nimport { CurrentHeaderButton, HeaderButton, HeaderImage, HeadContainer, HeaderNavBar } from '../HeaderComponent'\nimport logo from './../../steamIcon2.png'\nimport profilePic from \"../AccountSettings/imgs/sampleProfilePic.jpg\"\nimport settingLogo from \"./../Dashboard/Static/settingLogo.png\"\nimport loadingIcon from \"./../Dashboard/Static/loadingSign.png\"\nimport { PersonalPic, BannerContainer, BannerLink, Friend, FriendList } from '../PersonalBanner'\nimport { AchievementContainer, Game } from '../Achievement'\nimport ChatBox from '../ChatBox';\nimport ProgressBar from '../Achievement/ProgressBar'\nimport { withRouter } from 'react-router-dom'\nimport { logout } from '../../actions/reactAuth'\nimport { getFriend, addFriends, deleteFriend, acceptFriend, declineFriend } from '../../actions/friend'\nimport { getImage } from '../../actions/profilePic'\nimport './style.css'\nimport { getReputation } from \"../../actions/reputation\";\nimport { getGameStats, getAchievementStats } from '../../actions/steamHelpers'\n\n\n\nclass DashBoard extends React.Component {\n    constructor(props) {\n        super(props)\n        const friendList = []\n        const game = [\n            { gameImage: settingLogo, gameName: \"Loading Game Data...\", progress: \"NaN\", gameId: \"\" },\n        ]\n        const addFriendName = \"\"\n        const searchGameName = \"\"\n\n        // const isAdmin = UserKeys.getCurrUserAdminStatus() == 'false' ? false : true\n        const userName = this.props.app.state.currentUser\n\n        this.state = {\n            friendList: friendList,\n            game: game,\n            image: \"\",\n            showChat: false,\n            chatName: \"\",\n            addFriendName: addFriendName,\n            searchGameName: searchGameName,\n            // isAdmin: isAdmin,\n            userName: userName,\n            reputation: 0,\n            showLoading: true\n        }\n        this.showChatBox = this.showChatBox.bind(this)\n        this.unShowChatBox = this.unShowChatBox.bind(this)\n        this.onChangeFriendUID = this.onChangeFriendUID.bind(this)\n        this.onSubmitFriendRequest = this.onSubmitFriendRequest.bind(this)\n        this.onChangeGameSearch = this.onChangeGameSearch.bind(this)\n        this.onSubmitGameSearch = this.onSubmitGameSearch.bind(this)\n        this.onClickGameRedirectAchivement = this.onClickGameRedirectAchivement.bind(this)\n        this.deleteFromFriend = this.deleteFromFriend.bind(this)\n        this.acceptFriendHandler = this.acceptFriendHandler.bind(this)\n        this.declineFriendHandler = this.declineFriendHandler.bind(this)\n    }\n\n    extractStats(data) {\n        let completion = -1\n        if (data.achievements === undefined) {\n            return completion\n        }\n        const max = data.achievements.length\n        let achieved = 0\n        for (let i = 0; i < max; i++) {\n            const element = data.achievements[i];\n            if (element.achieved === 1) {\n                achieved++\n            }\n        }\n        completion = Math.floor((achieved / max) * 100)\n        return completion\n    }\n\n    async updatePercentages() {\n        let gameList = this.state.game\n        for (let i = 0; i < gameList.length; i++) {\n            const game = gameList[i];\n            let completion = -1\n            await getAchievementStats(game.gameId)\n                .then(res => { completion = this.extractStats(res) })\n            if (completion < 0) {\n                gameList.splice(i, 1)\n                i--\n            } else {\n                game.progress = completion\n            }\n            this.setState({ game: gameList })\n        }\n        this.setState({ game: gameList })\n        this.setState({ showLoading: false })\n    }\n\n    // updates games for current user\n    updateGames(data) {\n        let gameList = []\n        const baseimgURL = 'http://media.steampowered.com/steamcommunity/public/images/apps/'\n        const games = data.games\n        for (let i = 0; i < games.length; i++) {\n            let gameEntry = {}\n            const game = games[i]\n            gameEntry['gameName'] = game.name\n            gameEntry['progress'] = 'Calculating...'\n            gameEntry['gameImage'] = `${baseimgURL}${game.appid}/${game.img_icon_url}.jpg`\n            gameEntry['gameId'] = game.appid\n            gameList.push(gameEntry)\n            this.setState({ game: gameList })\n        }\n        this.setState({ game: gameList })\n        this.updatePercentages()\n    }\n\n    componentDidMount() {\n        getFriend(this)\n        getReputation(this)\n        getImage(this.state.userName, this)\n        getGameStats()\n            .then(res => {\n                this.updateGames(res)\n            })\n    }\n\n    showChatBox(e) {\n        e.preventDefault();\n        let friendName = \"\";\n        let target = e.target;\n        if (target.tagName === \"path\") {\n            target = target.parentNode\n        }\n        if (target.tagName === \"svg\") {\n            if (target.className.baseVal === \"deleteFriend\") {\n                return;\n            } else if (target.className.baseVal === \"friendPendingAccept\") {\n                return;\n            } else if (target.className.baseVal === \"friendPendingDecline\") {\n                return;\n            }\n        }\n        let parent = e.target\n        while (parent.className !== \"friendContainer\") {\n            parent = parent.parentNode\n        }\n        friendName = parent.children[0].children[1].innerHTML\n        //check if this friend is still on pending status\n        if (this.state.friendList.filter(i => { return i.name == friendName })[0].onPending) {\n            alert(\"Accept your friend to chat\")\n            return;\n        }\n        this.setState({ chatName: friendName })\n        this.setState({ showChat: true })\n    }\n\n    unShowChatBox() {\n        this.setState({ showChat: false })\n    }\n\n    deleteFromFriend(e) {\n        let parent = e.target\n        if (parent.tagName === \"path\") {\n            parent = parent.parentNode\n        }\n        if (parent.tagName === \"svg\") {\n            parent = parent.parentNode\n        }\n        const friendName = parent.children[0].children[1].innerHTML\n        deleteFriend(this, friendName)\n    }\n\n    acceptFriendHandler(e) {\n        let parent = e.target\n        if (parent.tagName === \"path\") {\n            parent = parent.parentNode\n        }\n        if (parent.tagName === \"svg\") {\n            parent = parent.parentNode\n        }\n        const friendName = parent.parentNode.children[0].children[1].innerHTML\n        acceptFriend(this, friendName)\n    }\n\n    declineFriendHandler(e) {\n        let parent = e.target\n        if (parent.tagName === \"path\") {\n            parent = parent.parentNode\n        }\n        if (parent.tagName === \"svg\") {\n            parent = parent.parentNode\n        }\n        const friendName = parent.parentNode.children[0].children[1].innerHTML\n        declineFriend(this, friendName)\n    }\n\n    onChangeFriendUID(e) {\n        this.setState({ addFriendName: e.target.value })\n    }\n\n    async onSubmitFriendRequest(e) {\n        e.preventDefault()\n        //check if its user it self\n        if (this.state.addFriendName === this.state.userName) {\n            alert(\"Cannot add yourself!\")\n            this.setState({ addFriendName: \"\" })\n            return;\n        }\n        //check if friend already exist\n        for (let i = 0; i < this.state.friendList.length; i++) {\n            if (this.state.friendList[i].name == this.state.addFriendName) {\n                alert(\"Friend already exist in your friend list\")\n                this.setState({ addFriendName: \"\" })\n                return;\n            }\n        }\n        try {\n            await addFriends(this)\n            this.setState({ addFriendName: \"\" })\n        } catch (error) {\n            console.log(error)\n        }\n\n    }\n\n    onChangeGameSearch(e) {\n        this.setState({ searchGameName: e.target.value })\n    }\n\n    onSubmitGameSearch(e) {\n        e.preventDefault()\n        this.setState({ searchGameName: \"\" })\n    }\n\n    onClickGameRedirectAchivement(e) {\n        const target = e.target\n        let gameName;\n        if (target.className == \"gameContainer\") {\n            gameName = target.lastChild.lastChild.innerHTML;\n        } else if (target.className == \"gameBody\" || target.className == \"gameImage\" || target.className == \"vertical-row\") {\n            gameName = target.parentNode.lastChild.lastChild.innerHTML;\n        } else if (target.className == \"filledProgress\") {\n            gameName = target.parentNode.nextSibling.innerHTML;\n        } else {\n            gameName = target.parentNode.lastChild.innerHTML;\n        }\n        const gameId = this.state.game.filter((i) => { return i.gameName === gameName })[0].gameId\n        this.props.history.push({\n            pathname: '/GameAchievements',\n            state: {\n                gameName: gameName,\n                userName: this.state.userName,\n                reputation: this.state.reputation,\n                gameId: gameId\n            }\n        })\n    }\n\n    render() {\n        return (\n            <>\n                <HeadContainer bgId={\"dashboard\"}>\n                    <HeaderNavBar>\n                        <HeaderImage to='/dashboard' src={logo} />\n                        <div className='group'>\n                            {/* {this.state.isAdmin && (<HeaderButton path='/admin'>Admin</HeaderButton>)} */}\n                            <CurrentHeaderButton path=\"/Dashboard\"> Dashboard </CurrentHeaderButton>\n                            <HeaderButton path='/reviewForum'>Forum</HeaderButton>\n                            <HeaderButton path='/Analytics'>Analytics</HeaderButton>\n                            <HeaderButton path='/AccountSettings'>Settings</HeaderButton>\n                            <HeaderButton path='/' logoutFunc={() => { logout(this.props.app) }}>Log Out</HeaderButton>\n                        </div>\n                    </HeaderNavBar>\n                </HeadContainer>\n                <div className='dashboard'>\n                    <div className='left'>\n                        <BannerContainer>\n                            <div className=\"bannerUserInfo\">\n                                <div id=\"bannerUserName\">User Name: {this.state.userName}</div>\n                            </div>\n                            {this.state.image === \"\" ?\n                                <PersonalPic src={profilePic} /> :\n                                <PersonalPic src={\"data:image/png;base64,\" + this.state.image} />\n                            }\n                            <span className=\"bannerReputation\">Reputation: {this.state.reputation}</span>\n                            <div className=\"bannerLeftLinkGroup\">\n                                <BannerLink path=\"https://discord.com\">Discord</BannerLink>\n                                <BannerLink path='https://twitter.com'>Twitter</BannerLink>\n                                <BannerLink path='https://www.facebook.com'>Facebook</BannerLink>\n                                <BannerLink path='https://store.steampowered.com'>Steam</BannerLink>\n                            </div>\n                        </BannerContainer>\n                    </div>\n                    <div className='middle'>\n                        <form className=\"searchGame\" onSubmit={e => this.onSubmitGameSearch(e)}>\n                            <input\n                                className=\"searchGameInput\"\n                                placeholder=\"Search for a Game...\"\n                                value={this.state.searchGameName}\n                                onChange={e => this.onChangeGameSearch(e)}\n                            />\n                        </form>\n                        <AchievementContainer bodyId={'shrink'}>\n                            {this.state.game.map((item, i) => {\n                                if (item.gameName.toLowerCase().startsWith(this.state.searchGameName.toLowerCase())) {\n                                    return (\n                                        <Game key={i} image={item.gameImage} redirect={this.onClickGameRedirectAchivement}>\n                                            <span className=\"achivementProgress\">{item.progress + '%'}</span>\n                                            <ProgressBar completed={item.progress} />\n                                            <div className=\"gameInfo\">{item.gameName}</div>\n                                        </Game>\n                                    )\n                                }\n                            })}\n                        </AchievementContainer>\n                        {!(this.state.showLoading) || <div id=\"loadingIcon\">\n                            <img src={loadingIcon} />\n                        </div>}\n                    </div>\n                    <div className='right'>\n                        <BannerContainer>\n                            <div className=\"rightBannerTitle\">\n                                <p className=\"rightBannerTitleName\">Chat</p>\n                                <form className=\"addFriendForm\" onSubmit={e => this.onSubmitFriendRequest(e)}>\n                                    <input\n                                        className=\"addFriendInput\"\n                                        placeholder=\"Enter Friend Name\"\n                                        value={this.state.addFriendName}\n                                        onChange={e => this.onChangeFriendUID(e)}\n                                    />\n                                    <button className=\"addFriendButton\">Add</button>\n                                </form>\n                            </div>\n                            <FriendList>\n                                {this.state.friendList.map((item, i) => {\n                                    return <Friend\n                                        key={i}\n                                        chat={this.showChatBox}\n                                        deleteFriend={this.deleteFromFriend}\n                                        pendingStatus={item.onPending}\n                                        accept={this.acceptFriendHandler}\n                                        decline={this.declineFriendHandler}\n                                    >\n                                        {item.name}\n                                    </Friend>\n                                })}\n                            </FriendList>\n                        </BannerContainer>\n                    </div>\n                    {this.state.showChat &&\n                        (<ChatBox\n                            userName={this.state.userName}\n                            friendName={this.state.chatName}\n                            showChatOption={this.unShowChatBox} />)}\n                </div>\n            </>\n        )\n    }\n}\n\nexport default withRouter(DashBoard);","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/Signup/index.js",["241","242","243","244","245","246","247","248","249"],"import React from 'react'\nimport Button from 'react-bootstrap/Button'\n\nimport { Redirect } from 'react-router-dom'\n\nimport { CurrentHeaderButton, HeaderButton, HeadContainer, HeaderNavBar, HeaderImage } from '../HeaderComponent'\n\nimport logo from './../../steamIcon2.png'\nimport checkmark from './imgs/checkmark.jpg'\nimport cross from './imgs/cross.jpg'\nimport help from './imgs/help.png'\n\nimport ENV from '../../config'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './Signup.css';\n\nconst log = console.log\n\nclass Signup extends React.Component {\n\n  state = {\n    userName: '',\n    passWord: '',\n    passWord2: '',\n    steamName: '',\n    valid_username: false,\n    valid_steamID: false,\n    valid_pw1: false,\n    valid_pw2: false,\n    showHelp: false\n  }\n\n  handleInputChange = (event) => {\n    const target = event.target\n    const value = target.value\n    const name = target.name\n\n    this.setState({ [name]: value })\n\n    // if the username changed, check if the new one is already in use\n    // and disable the signup button if it is\n    if (name === 'userName') {\n      fetch(`/usernames/${value}`)\n        .then(res => {\n          if (res.status === 404 && value.length > 0) {\n            this.setState({ valid_username: true })\n            if (value.toLowerCase().startsWith('admin')) {\n              this.setState({ valid_username: false })\n            }\n          } else if (res.status === 200 || value.length < 1) {\n            this.setState({ valid_username: false })\n          }\n        })\n    }\n\n    // check that a valid steam ID has been entered\n    if (name === 'steamName') {\n      fetch(`/steamapi/userinfo/?key=${ENV.steam_key}&steamids=${value}`)\n        .then(res => { return res.json() })\n        .then(json => {\n          if (json.response.players.length > 0 && json.response.players[0].communityvisibilitystate === 3) {\n            this.setState({ valid_steamID: true })\n          } else {\n            this.setState({ valid_steamID: false })\n          }\n        })\n    }\n\n    // set states for passwords\n    if (name === 'passWord') {\n      if (value.length >= 4) {\n        this.setState({ valid_pw1: true })\n      } else {\n        this.setState({ valid_pw1: false })\n      }\n      if (value === this.state.passWord2) {\n        this.setState({ valid_pw2: true })\n      } else {\n        this.setState({ valid_pw2: false })\n      }\n    }\n    if (name === 'passWord2') {\n      if (value === this.state.passWord) {\n        this.setState({ valid_pw2: true })\n      } else {\n        this.setState({ valid_pw2: false })\n      }\n    }\n  }\n\n  // some checks for signup and handling of the signup action\n  handleSignup = () => {\n    if (this.state.userName == '' ||\n      this.state.passWord == '' ||\n      this.state.steamName == '') {\n      alert('some input fields are empty')\n      return\n    }\n    if (this.state.passWord !== this.state.passWord2) {\n      alert('Passwords do not match')\n      return\n    }\n    if (this.state.passWord.length < 4) {\n      alert('password must be at least 4 characters')\n      return\n    }\n    const requestOptions = {\n      method: 'POST',\n      redirect: 'follow',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        username: this.state.userName,\n        password: this.state.passWord,\n        steamName: this.state.steamName\n      })\n    };\n    // post the request to the backend to create an account\n    fetch('/users', requestOptions)\n      .then(res => {\n        if (res.status === 400) {\n          alert('server error: account not created')\n        } else if (res.status === 200) {\n          alert('Account creation successful! Please proceed to log in.')\n          this.setState({ redirect: '/Login' })\n        }\n      })\n  }\n\n  render() {\n    if (this.state.redirect) {\n      return <Redirect to={this.state.redirect} />\n    }\n    return (\n      <div id='LoginPage'>\n        <HeadContainer bgId={\"dashboard\"}>\n          <HeaderNavBar>\n            <HeaderImage to='/' src={logo} />\n            <div className='group'>\n              <HeaderButton path='/reviewForum'>Forum</HeaderButton>\n              <HeaderButton path='/login'>Login</HeaderButton>\n              <span className=\"slash\">/</span>\n              <CurrentHeaderButton path=\"/Signup\">Sign Up</CurrentHeaderButton>\n            </div>\n          </HeaderNavBar>\n        </HeadContainer>\n        <div id=\"SignupContainer\">\n          <p className='loginText'>Please enter your details:</p>\n\n          <div>\n            <div className=\"FieldContainer\">\n              <input className=\"SignupField\"\n                value={this.state.userName}\n                onChange={this.handleInputChange}\n                type='text'\n                name='userName'\n                placeholder='Create a username'\n                autoFocus></input>\n            </div>\n            <div className=\"imgValidityCheck\">\n              <img src={this.state.valid_username ? checkmark : cross} />\n            </div>\n          </div>\n\n          <div>\n            <div className=\"FieldContainer\">\n              <input className=\"SignupField\"\n                value={this.state.passWord}\n                onChange={this.handleInputChange}\n                type='password'\n                name='passWord'\n                placeholder='Create a password'></input>\n            </div>\n            <div className=\"imgValidityCheck\">\n              <img src={this.state.valid_pw1 ? checkmark : cross} />\n            </div>\n          </div>\n\n          <div>\n            <div className=\"FieldContainer\">\n              <input className=\"SignupField\"\n                value={this.state.passWord2}\n                onChange={this.handleInputChange}\n                type='password'\n                name='passWord2'\n                placeholder='Confirm password'></input>\n            </div>\n            <div className=\"imgValidityCheck\">\n              <img src={this.state.valid_pw1 && this.state.valid_pw2 ? checkmark : cross} />\n            </div>\n          </div>\n\n          <div id=\"inputField4\">\n            <div className=\"helpIcon\">\n              <img src={help}\n                onMouseEnter={() => { this.setState({ showHelp: true }) }}\n                onMouseOut={() => { this.setState({ showHelp: false }) }}\n                onClick={() => { window.open(\"/SteamInfo\") }}\n                name=\"helpIcon\" />\n            </div>\n            <div className=\"FieldContainer\">\n              <input className=\"SignupField\"\n                value={this.state.steamName}\n                onChange={this.handleInputChange}\n                type='text'\n                name='steamName'\n                placeholder='Enter Steam ID'></input>\n            </div>\n            <div className=\"imgValidityCheck\">\n              <img src={this.state.valid_steamID ? checkmark : cross} />\n            </div>\n          </div>\n\n          {!(this.state.showHelp) || <div>\n            <span id=\"helpText\">Don't know your Steam ID? Click here to find out how to get it!</span>\n          </div>}\n\n          <Button className=\"SignUpButton\"\n            variant=\"primary\"\n            disabled={!(this.state.valid_username && this.state.valid_steamID &&\n              this.state.valid_pw1 && this.state.valid_pw2)}\n            onClick={this.handleSignup}>Sign Up\n          </Button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Signup;\n","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/Admin/index.js",["250"],"import React from \"react\";\nimport { uid } from \"react-uid\";\n\nimport AdminSearchBar from \"./../AdminSearchBar\";\nimport UserBar from \"./../UserBar\";\nimport ReviewBar from \"./../ReviewBar\";\nimport { HeaderButton, HeaderImage, HeadContainer, HeaderNavBar } from '../HeaderComponent'\nimport { getReviewsOnAdmin, updateReview, deleteReviewOnAdmin, updateUsernameReputation } from '../../actions/review'\nimport { deleteUserOnAdmin, getUsersOnAdmin } from \"../../actions/user\"\nimport { logout } from '../../actions/reactAuth'\nimport logo from './../../steamIcon2.png'\nimport \"./styles.css\"\nimport { deleteVoteRecordByReview, deleteVoteRecordByUser } from \"../../actions/voteRecord\";\n\n\nconst log = console.log\n\nclass Admin extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      userSearch: \"\",\n      reviewSearch: \"\",\n      users: [],\n      usersOnPage: [],\n      reviews: [],\n      reviewsOnPage: []\n    }\n\n    this.deleteUser = this.deleteUser.bind(this)\n    this.deleteReview = this.deleteReview.bind(this)\n    this.refreshUsers = this.refreshUsers.bind(this)\n    this.refreshReviews = this.refreshReviews.bind(this)\n  }\n\n  componentDidMount() {\n    getUsersOnAdmin(this)\n    getReviewsOnAdmin(this)\n  }\n\n  handleUserSearchChange = event => {\n    const target = event.target;\n    this.setState({\n      userSearch: target.value\n    })\n  }\n\n  searchUser = () => {\n    const userList = this.state.users.filter(user => {\n      return user.username.includes(this.state.userSearch)\n    })\n\n    this.setState({\n      usersOnPage: userList\n    })\n  }\n\n  handleReviewSearchChange = event => {\n    const target = event.target;\n    this.setState({\n      reviewSearch: target.value\n    })\n  }\n\n  searchReview = () => {\n    const reviewList = this.state.reviews.filter(review => {\n      return review.title.includes(this.state.reviewSearch)\n    })\n\n    this.setState({\n      reviewsOnPage: reviewList\n    })\n  }\n\n  deleteUser = username => {\n    const userList = this.state.users.filter(user => user.username !== username)\n    this.setState({\n      users: userList,\n      usersOnPage: userList\n    })\n\n    // Delete this user in database\n    const user = this.state.users.filter(user => user.username === username)[0]\n    updateUsernameReputation(username, user.reputation, true)\n    deleteUserOnAdmin(user)\n    deleteVoteRecordByUser(username)\n\n  }\n\n  deleteReview = reviewId => {\n    const reviewList = this.state.reviews.filter(review => review.id !== reviewId)\n    this.setState({\n      reviews: reviewList,\n      reviewsOnPage: reviewList\n    })\n\n    // Delete this review in database\n    const review = this.state.reviews.filter(review => review.id === reviewId)[0]\n    deleteReviewOnAdmin(review)\n    deleteVoteRecordByReview(review.author, reviewId)\n  }\n\n  cancelReport = reviewId => {\n    const reviewList = this.state.reviews.map(review => {\n      if (review.id === reviewId) {\n        review.reported = false\n      }\n      return review\n    })\n    this.setState({\n      reviews: reviewList,\n      reviewsOnPage: reviewList\n    })\n\n    // Update review in database\n    updateReview(this.state.reviews.filter(review => review.id === reviewId)[0])\n  }\n\n  refreshUsers = () => {\n    this.setState({\n      usersOnPage: this.state.users,\n      userSearch: \"\"\n    })\n  }\n\n  refreshReviews = () => {\n    this.setState({\n      reviewsOnPage: this.state.reviews,\n      reviewSearch: \"\"\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <HeadContainer bgId={\"dashboard\"}>\n          <HeaderNavBar>\n            <HeaderImage to='/' src={logo} />\n            <div className='group'>\n              <HeaderButton path='/' logoutFunc={() => { logout(this.props.app) }}>Log Out</HeaderButton>\n            </div>\n          </HeaderNavBar>\n        </HeadContainer>\n\n        <div className=\"admin-dashboard\">\n          <div className=\"admin-dashboard-component\">\n            <AdminSearchBar\n              searchContent={this.state.userSearch}\n              handleChange={this.handleUserSearchChange}\n              enterButton={this.searchUser}\n              refreshButton={this.refreshUsers}\n            />\n\n            {this.state.usersOnPage.map(user => (\n              <UserBar\n                key={uid(user)}\n                username={user.username}\n                reputation={user.reputation}\n                deleteUser={this.deleteUser}\n              />\n            ))}\n          </div>\n\n          <div className=\"admin-dashboard-component\">\n            <AdminSearchBar\n              searchContent={this.state.reviewSearch}\n              handleChange={this.handleReviewSearchChange}\n              enterButton={this.searchReview}\n              refreshButton={this.refreshReviews}\n            />\n\n            {this.state.reviewsOnPage.map(review => (\n              <ReviewBar\n                key={uid(review)}\n                id={review.id}\n                title={review.title}\n                content={review.content}\n                author={review.author}\n                reputation={review.reputation}\n                reported={review.reported}\n                deleteReview={this.deleteReview}\n                cancelReport={this.cancelReport}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Admin;","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/Home/index.js",[],"/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/GameAchievements/index.js",["251","252"],"import React from 'react';\n\nimport { CurrentHeaderButton, HeaderButton, HeaderImage, HeadContainer, HeaderNavBar } from '../HeaderComponent'\nimport logo from './../../steamIcon2.png'\nimport profilePic from \"../AccountSettings/imgs/sampleProfilePic.jpg\"\nimport { logout } from '../../actions/reactAuth'\nimport { PersonalPic, BannerContainer, BannerLink } from '../PersonalBanner'\nimport { AchievementContainer, Game } from '../Achievement'\nimport './style.css';\nimport { getImage } from '../../actions/profilePic'\nimport { getAchievementStats, getGameSchema } from '../../actions/steamHelpers'\nconst dateFormat = require('dateformat');\n\nclass GameAchievements extends React.Component {\n  constructor(props) {\n    super(props)\n\n    let gameName = \"\"\n    let userName = \"\"\n    let reputation = 0\n    let gameId = \"\"\n\n\n\n    if (this.props.location.state === undefined) {\n      this.props.history.push('/dashboard')\n    } else {\n      gameName = this.props.location.state.gameName\n      userName = this.props.location.state.userName\n      reputation = this.props.location.state.reputation\n      gameId = this.props.location.state.gameId\n    }\n\n\n    const achievementsList = []\n    const searchAchievementName = \"\"\n\n    this.state = {\n      searchAchievementName: searchAchievementName,\n      gameName: gameName,\n      userName: userName,\n      reputation: reputation,\n      gameId: gameId,\n      achievementsList: achievementsList,\n      image: \"\"\n    }\n    this.onChangeGameSearch = this.onChangeGameSearch.bind(this)\n    this.onSubmitGameSearch = this.onSubmitGameSearch.bind(this)\n    this.getStats = this.getStats.bind(this)\n  }\n\n  componentDidMount() {\n    if (this.props.location.state !== undefined) {\n      this.getStats(this.state.gameId)\n    }\n    getImage(this.state.userName, this)\n  }\n\n  async getStats(id) {\n    const achievementsList = []\n    const data = await getAchievementStats(id)\n    const apiAchievement = await getGameSchema(id)\n    const achievements = data.achievements\n    for (let i = 0; i < achievements.length; i++) {\n      const obj = {}\n      const key = achievements[i].apiname\n      obj.image = apiAchievement[key].icon\n      obj.name = apiAchievement[key].displayName\n      obj.achieved = achievements[i].achieved\n      if (achievements[i].unlocktime === 0) {\n        obj.achievedTime = \"N/A\"\n      } else {\n        const date = new Date(achievements[i].unlocktime * 1000)\n        obj.achievedTime = dateFormat(date, \"dd/mm/yyyy hh:MM:ss tt\")\n      }\n      achievementsList.push(obj)\n    }\n    this.setState({ achievementsList: achievementsList })\n  }\n\n  onChangeGameSearch(e) {\n    this.setState({ searchAchievementName: e.target.value })\n  }\n\n  onSubmitGameSearch(e) {\n    e.preventDefault()\n    this.setState({ searchAchievementName: \"\" })\n  }\n\n  render() {\n    return (\n      <>\n        <HeadContainer bgId={\"dashboard\"}>\n          <HeaderNavBar>\n            <HeaderImage to='/dashboard' src={logo} />\n            <div className='group'>\n              {/* {this.state.isAdmin && (<HeaderButton path='/admin'>Admin</HeaderButton>)} */}\n              <CurrentHeaderButton path='/Dashboard'>Dashboard</CurrentHeaderButton>\n              <HeaderButton path='/reviewForum'>Forum</HeaderButton>\n              <HeaderButton path='/Analytics'>Analytics</HeaderButton>\n              <HeaderButton path='/AccountSettings'>Settings</HeaderButton>\n              <HeaderButton path='/' logoutFunc={() => { logout(this.props.app) }}>Log Out</HeaderButton>\n            </div>\n          </HeaderNavBar>\n        </HeadContainer>\n        <div className='gameAchivementBody'>\n          <div className='gameAchivementBodyLeft'>\n            <BannerContainer>\n              <div className=\"bannerUserInfo\">\n                <div id=\"bannerUserName\">User Name: {this.state.userName}</div>\n              </div>\n              {this.state.image === \"\" ?\n                <PersonalPic src={profilePic} /> :\n                <PersonalPic src={\"data:image/png;base64,\" + this.state.image} />\n              }\n              <span className=\"bannerReputation\">Reputation: {this.state.reputation}</span>\n              <div className=\"bannerLeftLinkGroup\">\n                <BannerLink path=\"https://discord.com\">Discord</BannerLink>\n                <BannerLink path='https://twitter.com'>Twitter</BannerLink>\n                <BannerLink path='https://www.facebook.com'>Facebook</BannerLink>\n                <BannerLink path='https://store.steampowered.com'>Steam</BannerLink>\n              </div>\n            </BannerContainer>\n          </div>\n          <div className='gameAchivementBodyMiddle'>\n            <p style={{ color: \"white\" }}>{this.state.gameName}</p>\n            <form className=\"searchGame\" onSubmit={e => this.onSubmitGameSearch(e)}>\n              <input\n                className=\"searchGameInput\"\n                placeholder=\"Search for an Achievement...\"\n                value={this.state.searchGameName}\n                onChange={e => this.onChangeGameSearch(e)}\n              />\n            </form>\n            <AchievementContainer bodyId={\"fullLength\"}>\n              {this.state.achievementsList.map((item, i) => {\n                if (item.name.toLowerCase().startsWith(this.state.searchAchievementName.toLowerCase())) {\n                  let isAchievedBg = \"#525252\";\n                  let opac;\n                  if (item.achieved == 0) {\n                    opac = \"0.4\"\n                  } else {\n                    opac = \"1\"\n                  }\n                  return (\n                    <Game key={i} image={item.image} isAchievedBg={isAchievedBg} opac={opac}>\n                      <div className=\"AchievementName\">{item.name}</div>\n                      <div className=\"AchievedTime\">{item.achievedTime}</div>\n                    </Game>\n                  )\n                }\n              })}\n            </AchievementContainer>\n          </div>\n        </div>\n      </>\n    )\n  }\n}\n\nexport default GameAchievements;\n","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/AccountSettings/index.js",["253","254"],"import React from \"react\"\nimport { CurrentHeaderButton, HeaderButton, HeadContainer, HeaderNavBar, HeaderImage } from '../HeaderComponent'\n\nimport sampleProfilePic from \"./imgs/sampleProfilePic.jpg\"\nimport logo from './../../steamIcon2.png'\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { storeImage, getImage } from '../../actions/profilePic'\n\nimport { logout, changePassword } from '../../actions/reactAuth'\n\nimport \"./style.css\"\n\nclass AccountSettings extends React.Component {\n    constructor(props) {\n        super(props)\n\n        const userName = this.props.app.state.currentUser\n\n        this.state = {\n            userName: userName,\n            passwordInput: \"\",\n            passwordHidden: true,\n            steamInput: \"PolarisTM\",\n            ubisoftInput: \"Polaris04\",\n            playstationInput: \"Dancin9D0nZ\",\n            xboxInput: \"N/A\",\n            image: \"\",\n            uploadImage: \"\"\n        }\n\n        this.handleSumbitImage = this.handleSumbitImage.bind(this)\n    }\n\n    async componentDidMount() {\n        await getImage(this.state.userName, this)\n    }\n\n    editAction = input => {\n        if (document.getElementById(input).className === \"hide\") {\n            document.getElementById(input).className = \"show\"\n            let button = document.getElementById(input).parentElement.lastChild\n            button.innerHTML = \"Save\"\n            button.style.backgroundColor = \"#007bff\"\n            button.style.borderColor = \"#007bff\"\n        } else {\n            document.getElementById(input).className = \"hide\"\n            this.setState({\n                [input]: document.getElementById(input).value\n            })\n            if (input === \"passwordInput\") {\n                const newPassword = document.getElementById(input).value\n                console.log(newPassword)\n                changePassword(newPassword)\n                this.setState({ passwordHidden: false })\n            }\n            let button = document.getElementById(input).parentElement.lastChild\n            button.innerHTML = \"Edit\"\n            button.style.backgroundColor = \"#6c757d\"\n            button.style.borderColor = \"#6c757d\"\n        }\n    }\n\n    _handleReaderLoaded = (readerEvent) => {\n        const binaryString = readerEvent.target.result\n        this.setState({\n            uploadImage: btoa(binaryString)\n        })\n    }\n\n    handleSumbitImage = (e) => {\n        e.preventDefault()\n        storeImage(this)\n    }\n\n    handleselectedFile = (e) => {\n        const file = e.target.files[0]\n        if (file) {\n            const reader = new FileReader()\n            reader.onload = this._handleReaderLoaded.bind(this)\n            reader.readAsBinaryString(file)\n        }\n    }\n\n    render() {\n        return (\n            <div id=\"AccountSettingsPage\">\n                <div id=\"HeaderSection\">\n                    <HeadContainer bgId={\"dashboard\"}>\n                        <HeaderNavBar>\n                            <HeaderImage to=\"/dashboard\" src={logo}></HeaderImage>\n                            <div className='group'>\n                                <HeaderButton path='/Dashboard'>Dashboard</HeaderButton>\n                                <HeaderButton path='/ReviewForum'>Forum</HeaderButton>\n                                <HeaderButton path='/Analytics'>Analytics</HeaderButton>\n                                <CurrentHeaderButton path='/AccountSettings'>Settings</CurrentHeaderButton>\n                                <HeaderButton path='/' logoutFunc={() => { logout(this.props.app) }}>Log Out</HeaderButton>\n                            </div>\n                        </HeaderNavBar>\n                    </HeadContainer>\n                </div>\n\n                <div id=\"TitleSection\">\n                    <h1> Account Settings for {this.state.userName} </h1>\n                </div>\n                <div id=\"ProfilePicBlock\">\n                    <h2> Profile Picture </h2>\n                    <div id=\"ProfilePicSection\">\n                        <div id=\"ProfilePicDisplay\">\n                            {this.state.image === \"\" ?\n                                <img id=\"CurrentProfilePic\" src={sampleProfilePic} /> :\n                                <img id=\"CurrentProfilePic\" src={\"data:image/png;base64,\" + this.state.image} />\n                            }\n                            <div id=\"ProfilePicCaption\">\n                                <span> Current Picture ▲ </span>\n                            </div>\n                        </div>\n                        {/* Saving the profile picture to your profile is currently non functional as we need the backend to store the image the user uploads */}\n                        <div id=\"UploadProfilePic\">\n                            <span> Upload a new image: </span>\n                            <form onChange={this.handleselectedFile} onSubmit={this.handleSumbitImage}>\n                                <input type=\"file\" name=\"image\" accept=\".jpeg, .png, .jpg\" />\n                                <input type=\"submit\" />\n                            </form>\n                        </div>\n                    </div>\n                </div>\n                <div id=\"UserDetailsSection\">\n                    <h2> User Details </h2>\n                    <div className=\"TextInputButton\">\n                        <p>Username: <span> {this.state.userName} </span></p>\n                    </div>\n                    <div className=\"TextInputButton\">\n                        <p> Password: <span> {this.state.passwordHidden ? \"*\".repeat(8) : this.state.passwordInput} </span></p>\n                        <input className=\"hide\" type=\"text\" id=\"passwordInput\"></input>\n                        <button type=\"button\" className=\"btn btn-secondary\" onClick={() => { this.editAction(\"passwordInput\") }}>\n                            Edit\n                        </button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default AccountSettings;","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/Analytics/index.js",["255","256","257","258"],"import React from \"react\"\nimport { uid } from \"react-uid\"\n\nimport sampleProfilePic from \"../AccountSettings/imgs/sampleProfilePic.jpg\"\nimport logo from './../../steamIcon2.png'\nimport loadingIcon from \"./../Dashboard/Static/loadingSign.png\"\n\nimport { HeaderButton, CurrentHeaderButton, HeadContainer, HeaderNavBar, HeaderImage } from '../HeaderComponent'\nimport { logout } from '../../actions/reactAuth'\nimport { getGameStats, getAchievementStats } from '../../actions/steamHelpers'\nimport { getUserReviews } from '../../actions/review'\nimport { getReputation, updateReputation } from '../../actions/reputation'\nimport { updateUsernameReputation } from '../../actions/review'\nimport { getImage } from '../../actions/profilePic'\n\nimport \"./Analytics.css\"\n\nconst prettyMilliseconds = require('pretty-ms');\n\n// All of the statistics listed on this page, both in the banner and in the below table, are hardcoded sample values.\n// In phase 2, we will use API calls to populate this part of the user's profile with the relevant statistics we pull.\n\nclass Analytics extends React.Component {\n    constructor(props) {\n        super(props)\n        const stats = [\n            { id: 0, title: \"Loading Game Info...\", unlocked: 0, total: 0, playtime: 0, completion: NaN }\n        ]\n        const userName = this.props.app.state.currentUser\n\n        this.state = {\n            userName: userName,\n            stats: stats,\n            statsShown: [],\n            userReviews: [],\n            numReviews: 0,\n            reviewScore: 0,\n            reputation: 1,\n            totalAchievements: 0,\n            averageCompletion: 0,\n            totalPlaytime: 0,\n            averagePlaytime: 0,\n            gamesOwned: 0,\n            totalGames: 0,\n            gamesAttempted: 0,\n            gamesProcessed: 0,\n            showLoading: true,\n            sortAscending: false,\n            joinDate: '',\n            image: \"\"\n        }\n    }\n\n    onSortDown(column) {\n        if (this.state.sortAscending) {\n            this.setState({ sortAscending: false })\n            this.onSortUp(column)\n            return\n        }\n        this.setState({ sortAscending: true })\n        let stats = this.state.statsShown\n        stats.sort((a, b) => {\n            if (typeof (a[column]) !== typeof (b[column])) {\n                return typeof (a[column]) == 'string' ? 1 : -1\n            }\n            if (typeof (a[column]) == \"string\") {\n                return (a[column].localeCompare(b[column]))\n            }\n            return (a[column] - b[column])\n        })\n        this.setState({\n            stats: stats\n        })\n    }\n\n    onSortUp(column) {\n        let stats = this.state.statsShown\n        stats.sort((a, b) => {\n            if (typeof (a[column]) !== typeof (b[column])) {\n                return typeof (a[column]) == 'string' ? 1 : -1\n            }\n            if (typeof (a[column]) == \"string\") {\n                return (b[column].localeCompare(a[column]))\n            }\n            return (b[column] - a[column])\n        })\n        this.setState({\n            stats: stats\n        })\n    }\n\n    calculateReputation() {\n        const completion = this.state.averageCompletion\n        const achievements = this.state.totalAchievements\n        const playtime = this.state.totalPlaytime\n        const reviewScore = this.state.reviewScore\n        const gamesOwned = this.state.totalGames\n        let completionComponent\n        let achievementMultiplier\n        let playtimeComponent\n        let reviewComponent\n        let gameComponent\n        if (completion > 90) {\n            completionComponent = 3\n        } else {\n            completionComponent = completion / 30\n        }\n\n        if (achievements > 2000) {\n            achievementMultiplier = 1\n        } else {\n            achievementMultiplier = achievements / 2000\n        }\n\n        if (playtime > 5000) {\n            playtimeComponent = 2\n        } else {\n            playtimeComponent = playtime / 2500\n        }\n\n        if (reviewScore > 100) {\n            reviewComponent = 3\n        } else {\n            reviewComponent = reviewScore / 30\n        }\n\n        if (gamesOwned > 100) {\n            gameComponent = 2\n        } else {\n            gameComponent = gamesOwned / 50\n        }\n        const rawReputation = achievementMultiplier * completionComponent\n            + playtimeComponent\n            + reviewComponent\n            + gameComponent\n        const reputation = Math.floor(rawReputation)\n        this.setState({ reputation: reputation })\n        updateReputation(this, reputation)\n        updateUsernameReputation(this.state.userName, reputation, false)\n        return reputation\n    }\n\n    extractStats(data) {\n        let completion = -1\n        if (data.achievements === undefined) {\n            return completion\n        }\n        const max = data.achievements.length\n        let achieved = 0\n        for (let i = 0; i < max; i++) {\n            const element = data.achievements[i];\n            if (element.achieved === 1) {\n                achieved++\n            }\n        }\n        completion = (achieved / max) * 100\n        return [achieved, max, completion]\n    }\n\n    updateBannerStats() {\n        const tableStats = this.state.stats\n        let totalAchievements = 0\n        let totalPlaytime = 0\n        let totalCompletion = 0\n        let numGames = 0\n        let gamesWithAchievement = 0\n        for (let i = 0; i < tableStats.length; i++) {\n            const game = tableStats[i];\n            if (game.completion > 0) {\n                totalAchievements += game.unlocked\n                totalCompletion += game.completion\n                numGames++\n            }\n            if (typeof (game.completion) !== 'string') {\n                gamesWithAchievement++\n            }\n            totalPlaytime += game.playtime\n        }\n        this.setState({ totalGames: gamesWithAchievement })\n        this.setState({ gamesAttempted: numGames })\n        this.setState({ totalAchievements: totalAchievements })\n        this.setState({ totalPlaytime: totalPlaytime })\n        this.setState({ averagePlaytime: (totalPlaytime / tableStats.filter(game => game.playtime > 0.1).length) })\n        if (numGames > 0) {\n            this.setState({ averageCompletion: (totalCompletion / numGames) })\n        }\n    }\n\n    async updateAsync(game) {\n        let gameStats = -1\n        await getAchievementStats(game.id)\n            .then(res => { gameStats = this.extractStats(res) })\n        if (gameStats === -1) {\n            game.unlocked = '-'\n            game.total = '-'\n            game.completion = '-'\n        } else {\n            game.unlocked = gameStats[0]\n            game.total = gameStats[1]\n            game.completion = gameStats[2]\n            this.setState({ totalGames: this.state.totalGames + 1 })\n            this.setState({ totalAchievements: this.state.totalAchievements + gameStats[0] })\n            if (gameStats[2] > 0) {\n                this.setState({ gamesAttempted: this.state.gamesAttempted + 1 })\n            }\n        }\n        this.setState({ gamesProcessed: this.state.gamesProcessed + 1 })\n    }\n\n    async updateAchievements() {\n        let gameList = this.state.stats\n        this.setState({ statsShown: gameList.slice() })\n        const step = 6\n        for (let i = 0; i < gameList.length; i += step) {\n            this.updateBannerStats()\n            await Promise.all(gameList.slice(i, i + step).map(game => this.updateAsync(game)))\n        }\n        this.updateBannerStats()\n        this.setState({ showLoading: false })\n        this.calculateReputation()\n    }\n\n    updateStats(data) {\n        let gameList = []\n        const games = data.games\n        for (let i = 0; i < games.length; i++) {\n            let gameEntry = {}\n            const game = games[i]\n            gameEntry['title'] = game.name\n            gameEntry['unlocked'] = 'Calculating...'\n            gameEntry['total'] = 'Calculating...'\n            gameEntry['completion'] = 'Calculating...'\n            gameEntry['playtime'] = game.playtime_forever / 60\n            gameEntry['id'] = game.appid\n            gameList.push(gameEntry)\n            this.setState({ stats: gameList })\n        }\n        this.setState({ gamesOwned: gameList.length })\n        this.setState({ stats: gameList })\n        this.updateAchievements()\n    }\n\n    getReviewStats(data) {\n        const reviews = data\n        let numReviews = reviews.length\n        let score = 0\n        for (let i = 0; i < reviews.length; i++) {\n            score += reviews[i].upvotes\n            score -= reviews[i].downvotes\n        }\n        this.setState({ userReviews: reviews })\n        this.setState({ numReviews: numReviews })\n        this.setState({ reviewScore: score })\n    }\n\n\n    // sets the user membership length to a human readable string\n    async setMemberAge() {\n        let joined\n        await fetch(`/users/joindate/${this.state.userName}`)\n            .then(res => { return res.json() })\n            .then(json => { joined = json.time })\n        const now = new Date()\n        const joinedDate = new Date(joined)\n        const age_ms = now.getTime() - joinedDate.getTime()\n        const ageString = prettyMilliseconds(age_ms) + '  '\n        const stopPoint = ageString.split(' ', 2).join(' ').length\n        this.setState({ joinDate: 'Member for ' + ageString.slice(0, stopPoint) })\n    }\n\n    async componentDidMount() {\n        this.setMemberAge()\n        getGameStats()\n            .then(res => { this.updateStats(res) })\n        await getUserReviews(this, this.state.userName)\n            .then(res => { this.getReviewStats(res) })\n        getReputation(this)\n        getImage(this.state.userName, this)\n    }\n\n    render() {\n        return (\n            <div id=\"AnalyticsPage\">\n\n                <div id=\"HeaderSection\">\n                    <HeadContainer bgId={\"dashboard\"}>\n                        <HeaderNavBar>\n                            <HeaderImage to=\"/dashboard\" src={logo}></HeaderImage>\n                            <div className='group'>\n                                <HeaderButton path='/Dashboard'>Dashboard</HeaderButton>\n                                <HeaderButton path='/ReviewForum'>Forum</HeaderButton>\n                                <CurrentHeaderButton path='/Analytics'>Analytics</CurrentHeaderButton>\n                                <HeaderButton path='/AccountSettings'>Settings</HeaderButton>\n                                <HeaderButton path='/' logoutFunc={() => { logout(this.props.app) }}>Log Out</HeaderButton>\n                            </div>\n                        </HeaderNavBar>\n                    </HeadContainer>\n                </div>\n\n                <div id=\"BodySection\">\n                    <div id=\"TitleSection\">\n                        <h1>Analytics</h1>\n                    </div>\n\n                    <div id=\"StatsSection\">\n                        <div id=\"StatsHeader\">\n                            <div id=\"StatsUser\">\n                                {this.state.image === \"\" ?\n                                    <img id=\"StatsProfilePic\" src={sampleProfilePic} /> :\n                                    <img id=\"StatsProfilePic\" src={\"data:image/png;base64,\" + this.state.image} />\n                                }\n                                <div id=\"StatsUserCaption\">\n                                    <p> {this.state.userName} </p>\n                                    <span> {this.state.joinDate} </span>\n                                </div>\n                            </div>\n                            <div id=\"StatsReputation\">\n                                <p>Reputation Level:</p>\n                                <div id=\"ReputationContainer\">\n                                    {!(this.state.showLoading) || <div id=\"loadingIcon1\">\n                                        <img src={loadingIcon} />\n                                    </div>}\n                                    <span> {this.state.reputation} </span>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div className=\"StatsRow\" id=\"StatsRow1\">\n                            <div className=\"StatBoxLeft\">\n                                <p>Total Achievements</p>\n                                <span> {this.state.totalAchievements} </span>\n                            </div>\n                            <div className=\"StatBoxCenter\">\n                                <p>Total Playtime</p>\n                                <span> {(Math.round(this.state.totalPlaytime * 100) / 100).toFixed(2)} hours </span>\n                            </div>\n                            <div className=\"StatBoxRight\">\n                                <p>Reviews Posted</p>\n                                <span> {this.state.numReviews} </span>\n                            </div>\n                        </div>\n\n                        <div className=\"StatsRow\" id=\"StatsRow2\">\n                            <div className=\"StatBoxLeft\">\n                                <p>Average Completion</p>\n                                <span> {(Math.round(this.state.averageCompletion * 100) / 100).toFixed(2)} % </span>\n                            </div>\n                            <div className=\"StatBoxCenter\">\n                                <p>Average Playtime</p>\n                                <span> {(Math.round(this.state.averagePlaytime * 100) / 100).toFixed(2)} hours </span>\n                            </div>\n                            <div className=\"StatBoxRight\">\n                                <p>Review Score</p>\n                                <span> {this.state.reviewScore} </span>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div id=\"TableSection\">\n                        <div id=\"StatsTitle\">\n                            <p>Lifetime Stats</p>\n                            {!(this.state.showLoading) || <div id=\"loadingIcon2\">\n                                <img src={loadingIcon} />\n                            </div>}\n                        </div>\n                        <div id=\"TotalStats\">\n                            <p> Total Games Attempted: {this.state.gamesAttempted} </p>\n                            <p> Total Games Supporting Achievements: {this.state.totalGames} (from a total of {this.state.gamesOwned} games owned) </p>\n                            {!(this.state.showLoading) || <p> Progress: processed {this.state.gamesProcessed} games out of {this.state.gamesOwned} </p>}\n                        </div>\n                        <table id=\"StatsTable\">\n                            <thead >\n                                <tr>\n                                    <th id=\"tableID\" className=\"tableHeader\">ID\n                                        <div className=\"sort\">\n                                            <button className=\"sortButton\" onClick={() => this.onSortDown(\"id\")}>\n                                                <span>{this.state.sortAscending ? '▲' : '▼'}</span></button>\n                                        </div>\n                                    </th>\n                                    <th id=\"tableTitle\" className=\"tableHeader\">Title\n                                        <div className=\"sort\">\n                                            <button className=\"sortButton\" onClick={() => this.onSortDown(\"title\")}>\n                                                <span>{this.state.sortAscending ? '▲' : '▼'}</span></button>\n                                        </div>\n                                    </th>\n                                    <th id=\"tableCompletion\" className=\"tableHeader\">Completion %\n                                        <div className=\"sort\">\n                                            <button className=\"sortButton\" onClick={() => this.onSortDown(\"completion\")}>\n                                                <span>{this.state.sortAscending ? '▲' : '▼'}</span></button>\n                                        </div>\n                                    </th>\n                                    <th id=\"tableUnlocked\" className=\"tableHeader\">Unlocked\n                                        <div className=\"sort\">\n                                            <button className=\"sortButton\" onClick={() => this.onSortDown(\"unlocked\")}>\n                                                <span>{this.state.sortAscending ? '▲' : '▼'}</span></button>\n                                        </div>\n                                    </th>\n                                    <th id=\"tableTotal\" className=\"tableHeader\">Total\n                                        <div className=\"sort\">\n                                            <button className=\"sortButton\" onClick={() => this.onSortDown(\"total\")}>\n                                                <span>{this.state.sortAscending ? '▲' : '▼'}</span></button>\n                                        </div>\n                                    </th>\n                                    <th id=\"tablePlaytime\" className=\"tableHeader\">Playtime\n                                        <div className=\"sort\">\n                                            <button className=\"sortButton\" onClick={() => this.onSortDown(\"playtime\")}>\n                                                <span>{this.state.sortAscending ? '▲' : '▼'}</span></button>\n                                        </div>\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {\n                                    this.state.statsShown.map(row => (\n                                        <tr key={uid(row)}>\n                                            <td className=\"tableCell\">{row.id}</td>\n                                            <td className=\"tableCell\">{row.title}</td>\n                                            <td className=\"tableCell\">{typeof row.completion == 'string' ? row.completion :\n                                                (Math.round(row.completion * 100) / 100).toFixed(2)} </td>\n                                            <td className=\"tableCell\">{row.unlocked}</td>\n                                            <td className=\"tableCell\">{row.total}</td>\n                                            <td className=\"tableCell\">{(row.playtime).toFixed(2)} h </td>\n                                        </tr>\n                                    ))\n                                }\n                            </tbody>\n                        </table>\n                    </div>\n\n                    <br></br>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Analytics;","/home/abdullah/SteamStatsTracker/achievement-tracker/src/actions/voteRecord.js",[],"/home/abdullah/SteamStatsTracker/achievement-tracker/src/actions/review.js",[],"/home/abdullah/SteamStatsTracker/achievement-tracker/src/actions/reputation.js",[],"/home/abdullah/SteamStatsTracker/achievement-tracker/src/actions/profilePic.js",[],"/home/abdullah/SteamStatsTracker/achievement-tracker/src/actions/steamHelpers.js",[],"/home/abdullah/SteamStatsTracker/achievement-tracker/src/actions/friend.js",[],"/home/abdullah/SteamStatsTracker/achievement-tracker/src/actions/user.js",[],"/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/ForumSearchBar/index.js",[],"/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/HeaderComponent/index.js",[],"/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/Review/index.js",["259"],"import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport \"./styles.css\"\n\nconst log = console.log\n\nclass Review extends React.Component {\n  state = {\n    isCollapsed: this.props.content.length < 1000 ? false : true\n  }\n\n  setIsCollapsed = () => {\n    this.setState({\n      isCollapsed: !this.state.isCollapsed\n    })\n  }\n\n  render() {\n    const {\n      id,\n      title,\n      content,\n      upvotes,\n      downvotes,\n      author,\n      reputation,\n      upvoteAction,\n      downvoteAction,\n      reportAction\n    } = this.props;\n\n    return (\n      <div className=\"review\">\n        <h2>{title}</h2>\n\n        <div\n          className={this.state.isCollapsed ? \"collapsed-content\" : \"expanded-content\"}\n        >\n          <p className=\"review-content\">{content}</p>\n        </div>\n        {\n          content.length < 1000 ?\n            <div></div> :\n            <button\n              className=\"collapse-button\"\n              onClick={this.setIsCollapsed}\n            >\n              <strong>\n                {this.state.isCollapsed ? \"SHOW\" : \"HIDE\"} CONTENT\n            </strong>\n            </button>\n        }\n\n        <div className=\"review-info-bar\">\n          <span>\n            <button type=\"button\"\n              className=\"btn btn-success\"\n              onClick={() => upvoteAction(id)}>\n              {upvotes}\n            </button>\n            <button type=\"button\"\n              className=\"btn btn-danger\"\n              onClick={() => downvoteAction(id)}>\n              {downvotes}\n            </button>\n          </span>\n          <span><strong>Author: </strong>{author}</span>\n          <span><strong>Reputation: </strong>{reputation}</span>\n          <button type=\"button\"\n            className=\"btn btn-secondary\"\n            onClick={() => reportAction(id)}>\n            Report\n            </button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Review;","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/ReviewSubmit/index.js",[],"/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/ChatBox/index.js",["260","261"],"import React, { useRef } from 'react'\nimport ENV from '../../config.js'\nimport io from 'socket.io-client'\nimport './style.css'\nimport { getMessages } from '../../actions/chat.js'\nconst API_HOST = ENV.api_host\n\nclass ChatBox extends React.Component {\n    constructor(props) {\n        super(props)\n        const text = \"\"\n        const messages = []\n        const chatRoomId = \"\"\n        const socket = io.connect(API_HOST)\n        this.state = {\n            text: text,\n            socket: socket,\n            messages: messages,\n            chatRoomId: chatRoomId\n        }\n\n\n        this.state.socket.on(\"chat\", (data) => {\n            const newMessages = this.state.messages\n            newMessages.push(data)\n            this.setState({ messages: newMessages })\n        })\n\n        this.myRef = React.createRef()\n        this.onChange = this.onChange.bind(this)\n        this.onSubmit = this.onSubmit.bind(this)\n        this.checkMessagePerson = this.checkMessagePerson.bind(this)\n        this.onEnterPress = this.onEnterPress.bind(this)\n    }\n    async componentDidMount() {\n        if (this.state.socket !== undefined) {\n            // console.log(\"connect to socket...\")\n        }\n        await getMessages(this, this.props.userName, this.props.friendName)\n        this.state.socket.emit(\"room\", { name: this.props.userName, chatRoomId: this.state.chatRoomId })\n        this.state.socket.on('joined', room => {\n            // console.log('i have joined', room)\n        })\n\n    }\n\n    async componentDidUpdate(prevProps) {\n        if (this.props.friendName !== prevProps.friendName) {\n            await getMessages(this, this.props.userName, this.props.friendName)\n            this.state.socket.emit(\"room\", { name: this.props.userName, chatRoomId: this.state.chatRoomId })\n            this.state.socket.on('joined', room => {\n                // console.log('I have joined', room)\n            })\n        }\n    }\n\n    componentWillUnmount() {\n        this.state.socket.emit(\"close\")\n        // console.log(\"disconnect from socket...\")\n    }\n\n    onChange(e) {\n        this.setState({ text: e.target.value })\n        const elem = e.target\n        elem.style.height = \"1px\"\n        const toBeAddHeight = (elem.scrollHeight) + \"px\";\n        elem.style.height = toBeAddHeight\n    }\n\n    onEnterPress = (e) => {\n        if (e.key === \"Enter\" && !e.shiftKey) {\n            e.preventDefault();\n            this.onSubmit(e)\n          }\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n        //check if its empty message\n        if (this.state.text === \"\") {\n            return;\n        }\n        let target = e.target\n        const data = {\n            name: this.props.userName,\n            content: this.state.text,\n            time: Date.now()\n        }\n        //change textarea height back to normal\n        if (e.target.className !== 'chatMessage'){\n            target = target.parentNode\n        }\n        target.children[0].style.height = \"70%\"\n        //update our own message\n        const newMessages = this.state.messages\n        newMessages.push(data)\n        this.setState({ messages: newMessages })\n        //auto scroll the chatbox to bottom\n        this.myRef.current.scrollTop = 0\n        //send message through socket\n        this.state.socket.emit('chat', { id: this.state.chatRoomId, data: data })\n\n        this.setState({ text: \"\" });\n    }\n\n    checkMessagePerson(message) {\n        //Me will be change to the current user\n        const myMessage = message.name == this.props.userName;\n        const className = myMessage ? \"my-message\" : \"other-message\"\n        return className\n    }\n\n\n    render() {\n        const { friendName, showChatOption } = this.props\n        return (\n            <div className='chatBox'>\n                <div className='chatTitle'>\n                    <div className='chatName'>{friendName}</div>\n                    <button className='closeChatButton' onClick={showChatOption}>X</button>\n                </div>\n                <div className='chatBody' ref={this.myRef}>\n                    <div>\n                        <ul className='messageList'>\n                            {this.state.messages.map((message, i) => {\n                                return (<li className={this.checkMessagePerson(message) + \"-wrapper\"} key={i}>\n                                    <div className={this.checkMessagePerson(message)}>\n                                        <div className='person-name'>\n                                            {message.name}\n                                        </div>\n                                        <div className='text'>\n                                            {message.content}\n                                        </div>\n                                    </div>\n                                    <div className={'chatMessageTime-' + this.checkMessagePerson(message)}>\n                                        {new Date(message.time).toLocaleString('en-US')}\n                                    </div>\n                                </li>)\n                            })}\n                        </ul>\n                    </div>\n                </div>\n                <form className='chatMessage' onSubmit={e => this.onSubmit(e)}>\n                    <textarea\n                        className='message'\n                        onChange={e => this.onChange(e)}\n                        placeholder=\"Enter message\"\n                        value={this.state.text}\n                        rows=\"1\"\n                        style={{ maxHeight: \"100px\" }}\n                        onKeyPress={this.onEnterPress}\n                    >\n                    </textarea>\n                    <button className='sendMessage'>Send</button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default ChatBox;","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/PersonalBanner/index.js",[],"/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/Achievement/ProgressBar/index.js",[],"/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/Achievement/index.js",[],"/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/HomeBody/index.js",[],"/home/abdullah/SteamStatsTracker/achievement-tracker/src/Containers/index.js",[],"/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/UserBar/index.js",[],"/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/ReviewBar/index.js",[],"/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/AdminSearchBar/index.js",[],"/home/abdullah/SteamStatsTracker/achievement-tracker/src/actions/chat.js",[],"/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/HeaderComponent/CurrentHeaderButton/index.js",["262"],"import React from 'react'\nimport './style.css'\nimport userKey from './../../UserKeys'\nimport { withRouter } from 'react-router-dom'\n\n\n\nclass CurrentHeaderButton extends React.Component {\n\n    redirectTO(){\n        if (this.props.children == \"Log Out\"){\n            userKey.logOut()\n            this.props.logoutFunc()\n            console.log(localStorage.getItem(\"user\"))\n        }\n        this.props.history.push(this.props.path)\n    }\n\n    render() {\n        //const {logoutFunc} = this.props\n        return (\n            <button className =\"currentHeaderButton\" onClick={this.redirectTO.bind(this)}>{this.props.children}</button>\n        )\n    }\n}\n\nexport default withRouter (CurrentHeaderButton);","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/HeaderComponent/HeaderImage/index.js",["263"],"import React from \"react\";\nimport {Link} from  \"react-router-dom\";\nimport './style.css'\n\nclass HeaderImage extends React.Component {\n    render() {\n        const {to, src} = this.props\n        return (\n            <Link  to={to}>\n                <img src = {src} className=\"headerImage\"/>\n            </Link>\n        )\n    }\n}\n\nexport default HeaderImage;","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/HeaderComponent/HeaderButton/index.js",["264"],"import React from 'react'\nimport './style.css'\nimport userKey from './../../UserKeys'\nimport { withRouter } from 'react-router-dom'\n\n\n\nclass HeaderButton extends React.Component {\n\n    redirectTO(){\n        if (this.props.children == \"Log Out\"){\n            userKey.logOut()\n            this.props.logoutFunc()\n        }\n        this.props.history.push(this.props.path)\n    }\n\n    render() {\n        //const {logoutFunc} = this.props\n        return (\n            <button className =\"headerButton\" onClick={this.redirectTO.bind(this)}>{this.props.children}</button>\n        )\n    }\n}\n\nexport default withRouter (HeaderButton);","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/HeaderComponent/HeaderContainer/index.js",[],"/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/HeaderComponent/HeaderNavBar/index.js",[],"/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/PersonalBanner/BannerContainer/index.js",["265"],"import React from 'react'\nimport {Link} from 'react-router-dom'\nimport './style.css'\n\nclass BannerContainer extends React.Component{\n    render(){\n        return(\n            <div {...this.props} className=\"bannerContainer\">{this.props.children}</div>\n        )\n    }\n}\n\nexport default BannerContainer;","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/PersonalBanner/BannerLink/index.js",[],"/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/PersonalBanner/FriendList/index.js",[],"/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/PersonalBanner/PersonalPic/index.js",["266"],"import React from 'react'\nimport \"./style.css\"\nclass PersonalPic extends React.Component{\n    render(){\n        return(\n            <img {...this.props} className=\"personalPic\"/>\n        )\n    }\n}\n\nexport default PersonalPic","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/Achievement/Game/index.js",["267"],"import React from 'react'\nimport './style.css'\n\nclass Game extends React.Component {\n    render() {\n        const { image, redirect, isAchievedBg, opac } = this.props\n        return (\n            <li className=\"gameContainer\" onClick={redirect} style={{ background: isAchievedBg, opacity: opac }}>\n                <img src={image} className='gameImage' />\n                <div className=\"vertical-row\"></div>\n                <div className=\"gameBody\">\n                    {this.props.children}\n                </div>\n            </li>\n        )\n    }\n}\n\nexport default Game","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/PersonalBanner/Friend/index.js",["268"],"import React from 'react'\nimport friendLogo from './static/logo192.png'\nimport './style.css'\nimport { BsTrash } from 'react-icons/bs'\nimport { IoLogoOctocat } from 'react-icons/io'\nimport { TiTick, TiDelete } from 'react-icons/ti'\n\nclass Friend extends React.Component{\n    render(){\n        const {chat, deleteFriend, pendingStatus, accept, decline} = this.props;\n\n        return(\n            <li className=\"friendContainer\" onClick={chat}>\n                <div className=\"friendLeft\">\n                    <IoLogoOctocat className='friendLogo'/>\n                    <div className=\"friendName\" >{this.props.children}</div>\n                </div>\n                {pendingStatus ? \n                    <div className =\"friendPendingButton\">\n                        <TiTick className=\"friendPendingAccept\" onClick={accept}/>\n                    <   TiDelete className=\"friendPendingDecline\" onClick={decline}/>\n                    </div> :\n                <BsTrash className=\"deleteFriend\" onClick={deleteFriend}/>\n                }   \n            </li>\n        )\n    }\n}\n\nexport default Friend","/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/Achievement/AchievementContainer/index.js",[],"/home/abdullah/SteamStatsTracker/achievement-tracker/src/Containers/Header/index.js",[],"/home/abdullah/SteamStatsTracker/achievement-tracker/src/react-components/UserKeys.js",[],{"ruleId":"269","severity":1,"message":"270","line":16,"column":7,"nodeType":"271","messageId":"272","endLine":16,"endColumn":10},{"ruleId":"273","severity":1,"message":"274","line":57,"column":41,"nodeType":"275","endLine":57,"endColumn":64},{"ruleId":"273","severity":1,"message":"274","line":64,"column":41,"nodeType":"275","endLine":64,"endColumn":64},{"ruleId":"273","severity":1,"message":"274","line":69,"column":45,"nodeType":"275","endLine":69,"endColumn":68},{"ruleId":"273","severity":1,"message":"274","line":103,"column":41,"nodeType":"275","endLine":103,"endColumn":64},{"ruleId":"273","severity":1,"message":"274","line":107,"column":41,"nodeType":"275","endLine":107,"endColumn":64},{"ruleId":"273","severity":1,"message":"274","line":113,"column":41,"nodeType":"275","endLine":113,"endColumn":64},{"ruleId":"273","severity":1,"message":"274","line":121,"column":41,"nodeType":"275","endLine":121,"endColumn":64},{"ruleId":"273","severity":1,"message":"274","line":145,"column":41,"nodeType":"275","endLine":145,"endColumn":64},{"ruleId":"273","severity":1,"message":"274","line":150,"column":41,"nodeType":"275","endLine":150,"endColumn":65},{"ruleId":"273","severity":1,"message":"274","line":155,"column":41,"nodeType":"275","endLine":155,"endColumn":65},{"ruleId":"273","severity":1,"message":"274","line":169,"column":33,"nodeType":"275","endLine":169,"endColumn":53},{"ruleId":"273","severity":1,"message":"274","line":172,"column":33,"nodeType":"275","endLine":172,"endColumn":53},{"ruleId":"276","severity":1,"message":"277","line":146,"column":63,"nodeType":"278","messageId":"279","endLine":146,"endColumn":65},{"ruleId":"276","severity":1,"message":"277","line":208,"column":47,"nodeType":"278","messageId":"279","endLine":208,"endColumn":49},{"ruleId":"276","severity":1,"message":"277","line":235,"column":30,"nodeType":"278","messageId":"279","endLine":235,"endColumn":32},{"ruleId":"276","severity":1,"message":"277","line":237,"column":37,"nodeType":"278","messageId":"279","endLine":237,"endColumn":39},{"ruleId":"276","severity":1,"message":"277","line":237,"column":71,"nodeType":"278","messageId":"279","endLine":237,"endColumn":73},{"ruleId":"276","severity":1,"message":"277","line":237,"column":106,"nodeType":"278","messageId":"279","endLine":237,"endColumn":108},{"ruleId":"276","severity":1,"message":"277","line":239,"column":37,"nodeType":"278","messageId":"279","endLine":239,"endColumn":39},{"ruleId":"280","severity":1,"message":"281","line":301,"column":60,"nodeType":"282","messageId":"283","endLine":301,"endColumn":62},{"ruleId":"273","severity":1,"message":"274","line":314,"column":29,"nodeType":"275","endLine":314,"endColumn":54},{"ruleId":"269","severity":1,"message":"270","line":18,"column":7,"nodeType":"271","messageId":"272","endLine":18,"endColumn":10},{"ruleId":"276","severity":1,"message":"277","line":94,"column":29,"nodeType":"278","messageId":"279","endLine":94,"endColumn":31},{"ruleId":"276","severity":1,"message":"277","line":95,"column":27,"nodeType":"278","messageId":"279","endLine":95,"endColumn":29},{"ruleId":"276","severity":1,"message":"277","line":96,"column":28,"nodeType":"278","messageId":"279","endLine":96,"endColumn":30},{"ruleId":"273","severity":1,"message":"274","line":161,"column":15,"nodeType":"275","endLine":161,"endColumn":74},{"ruleId":"273","severity":1,"message":"274","line":175,"column":15,"nodeType":"275","endLine":175,"endColumn":69},{"ruleId":"273","severity":1,"message":"274","line":189,"column":15,"nodeType":"275","endLine":189,"endColumn":93},{"ruleId":"273","severity":1,"message":"274","line":195,"column":15,"nodeType":"275","endLine":199,"endColumn":35},{"ruleId":"273","severity":1,"message":"274","line":210,"column":15,"nodeType":"275","endLine":210,"endColumn":73},{"ruleId":"269","severity":1,"message":"270","line":16,"column":7,"nodeType":"271","messageId":"272","endLine":16,"endColumn":10},{"ruleId":"280","severity":1,"message":"281","line":136,"column":58,"nodeType":"282","messageId":"283","endLine":136,"endColumn":60},{"ruleId":"276","severity":1,"message":"277","line":140,"column":37,"nodeType":"278","messageId":"279","endLine":140,"endColumn":39},{"ruleId":"273","severity":1,"message":"274","line":110,"column":33,"nodeType":"275","endLine":110,"endColumn":86},{"ruleId":"273","severity":1,"message":"274","line":111,"column":33,"nodeType":"275","endLine":111,"endColumn":113},{"ruleId":"273","severity":1,"message":"274","line":309,"column":37,"nodeType":"275","endLine":309,"endColumn":88},{"ruleId":"273","severity":1,"message":"274","line":310,"column":37,"nodeType":"275","endLine":310,"endColumn":115},{"ruleId":"273","severity":1,"message":"274","line":321,"column":41,"nodeType":"275","endLine":321,"endColumn":66},{"ruleId":"273","severity":1,"message":"274","line":363,"column":33,"nodeType":"275","endLine":363,"endColumn":58},{"ruleId":"269","severity":1,"message":"270","line":6,"column":7,"nodeType":"271","messageId":"272","endLine":6,"endColumn":10},{"ruleId":"269","severity":1,"message":"284","line":1,"column":17,"nodeType":"271","messageId":"272","endLine":1,"endColumn":23},{"ruleId":"276","severity":1,"message":"277","line":108,"column":40,"nodeType":"278","messageId":"279","endLine":108,"endColumn":42},{"ruleId":"276","severity":1,"message":"277","line":11,"column":33,"nodeType":"278","messageId":"279","endLine":11,"endColumn":35},{"ruleId":"273","severity":1,"message":"274","line":10,"column":17,"nodeType":"275","endLine":10,"endColumn":59},{"ruleId":"276","severity":1,"message":"277","line":11,"column":33,"nodeType":"278","messageId":"279","endLine":11,"endColumn":35},{"ruleId":"269","severity":1,"message":"285","line":2,"column":9,"nodeType":"271","messageId":"272","endLine":2,"endColumn":13},{"ruleId":"273","severity":1,"message":"274","line":6,"column":13,"nodeType":"275","endLine":6,"endColumn":59},{"ruleId":"273","severity":1,"message":"274","line":9,"column":17,"nodeType":"275","endLine":9,"endColumn":58},{"ruleId":"269","severity":1,"message":"286","line":2,"column":8,"nodeType":"271","messageId":"272","endLine":2,"endColumn":18},"no-unused-vars","'log' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'useRef' is defined but never used.","'Link' is defined but never used.","'friendLogo' is defined but never used."]