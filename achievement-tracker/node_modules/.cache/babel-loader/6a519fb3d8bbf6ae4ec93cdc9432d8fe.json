{"ast":null,"code":"var _jsxFileName = \"/home/abdullah/steam_achievement_tracker-main/achievement-tracker/src/react-components/ChatBox/index.js\";\nimport React, { useRef } from 'react';\nimport ENV from '../../config.js';\nimport io from 'socket.io-client';\nimport './style.css';\nimport { getMessages } from '../../actions/chat.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_HOST = ENV.api_host;\n\nclass ChatBox extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onEnterPress = e => {\n      if (e.key === \"Enter\" && !e.shiftKey) {\n        e.preventDefault();\n        this.onSubmit(e);\n      }\n    };\n\n    const text = \"\";\n    const messages = [];\n    const chatRoomId = \"\";\n    const socket = io.connect(API_HOST);\n    this.state = {\n      text: text,\n      socket: socket,\n      messages: messages,\n      chatRoomId: chatRoomId\n    };\n    this.state.socket.on(\"chat\", data => {\n      const newMessages = this.state.messages;\n      newMessages.push(data);\n      this.setState({\n        messages: newMessages\n      });\n    });\n    this.myRef = /*#__PURE__*/React.createRef();\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.checkMessagePerson = this.checkMessagePerson.bind(this);\n    this.onEnterPress = this.onEnterPress.bind(this);\n  }\n\n  async componentDidMount() {\n    if (this.state.socket !== undefined) {// console.log(\"connect to socket...\")\n    }\n\n    await getMessages(this, this.props.userName, this.props.friendName);\n    this.state.socket.emit(\"room\", {\n      name: this.props.userName,\n      chatRoomId: this.state.chatRoomId\n    });\n    this.state.socket.on('joined', room => {// console.log('i have joined', room)\n    });\n  }\n\n  async componentDidUpdate(prevProps) {\n    if (this.props.friendName !== prevProps.friendName) {\n      await getMessages(this, this.props.userName, this.props.friendName);\n      this.state.socket.emit(\"room\", {\n        name: this.props.userName,\n        chatRoomId: this.state.chatRoomId\n      });\n      this.state.socket.on('joined', room => {// console.log('I have joined', room)\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.state.socket.emit(\"close\"); // console.log(\"disconnect from socket...\")\n  }\n\n  onChange(e) {\n    this.setState({\n      text: e.target.value\n    });\n    const elem = e.target;\n    elem.style.height = \"1px\";\n    const toBeAddHeight = elem.scrollHeight + \"px\";\n    elem.style.height = toBeAddHeight;\n  }\n\n  onSubmit(e) {\n    e.preventDefault(); //check if its empty message\n\n    if (this.state.text === \"\") {\n      return;\n    }\n\n    let target = e.target;\n    const data = {\n      name: this.props.userName,\n      content: this.state.text,\n      time: Date.now()\n    }; //change textarea height back to normal\n\n    if (e.target.className !== 'chatMessage') {\n      target = target.parentNode;\n    }\n\n    target.children[0].style.height = \"70%\"; //update our own message\n\n    const newMessages = this.state.messages;\n    newMessages.push(data);\n    this.setState({\n      messages: newMessages\n    }); //auto scroll the chatbox to bottom\n\n    this.myRef.current.scrollTop = 0; //send message through socket\n\n    this.state.socket.emit('chat', {\n      id: this.state.chatRoomId,\n      data: data\n    });\n    this.setState({\n      text: \"\"\n    });\n  }\n\n  checkMessagePerson(message) {\n    //Me will be change to the current user\n    const myMessage = message.name == this.props.userName;\n    const className = myMessage ? \"my-message\" : \"other-message\";\n    return className;\n  }\n\n  render() {\n    const {\n      friendName,\n      showChatOption\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatBox\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatTitle\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatName\",\n          children: friendName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"closeChatButton\",\n          onClick: showChatOption,\n          children: \"X\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatBody\",\n        ref: this.myRef,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"messageList\",\n            children: this.state.messages.map((message, i) => {\n              return /*#__PURE__*/_jsxDEV(\"li\", {\n                className: this.checkMessagePerson(message) + \"-wrapper\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: this.checkMessagePerson(message),\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"person-name\",\n                    children: message.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 128,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"text\",\n                    children: message.content\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 131,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 127,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: 'chatMessageTime-' + this.checkMessagePerson(message),\n                  children: new Date(message.time).toLocaleString('en-US')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 135,\n                  columnNumber: 37\n                }, this)]\n              }, i, true, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 41\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"chatMessage\",\n        onSubmit: e => this.onSubmit(e),\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"message\",\n          onChange: e => this.onChange(e),\n          placeholder: \"Enter message\",\n          value: this.state.text,\n          rows: \"1\",\n          style: {\n            maxHeight: \"100px\"\n          },\n          onKeyPress: this.onEnterPress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"sendMessage\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default ChatBox;","map":{"version":3,"sources":["/home/abdullah/steam_achievement_tracker-main/achievement-tracker/src/react-components/ChatBox/index.js"],"names":["React","useRef","ENV","io","getMessages","API_HOST","api_host","ChatBox","Component","constructor","props","onEnterPress","e","key","shiftKey","preventDefault","onSubmit","text","messages","chatRoomId","socket","connect","state","on","data","newMessages","push","setState","myRef","createRef","onChange","bind","checkMessagePerson","componentDidMount","undefined","userName","friendName","emit","name","room","componentDidUpdate","prevProps","componentWillUnmount","target","value","elem","style","height","toBeAddHeight","scrollHeight","content","time","Date","now","className","parentNode","children","current","scrollTop","id","message","myMessage","render","showChatOption","map","i","toLocaleString","maxHeight"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,OAAOC,GAAP,MAAgB,iBAAhB;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAO,aAAP;AACA,SAASC,WAAT,QAA4B,uBAA5B;;AACA,MAAMC,QAAQ,GAAGH,GAAG,CAACI,QAArB;;AAEA,MAAMC,OAAN,SAAsBP,KAAK,CAACQ,SAA5B,CAAsC;AAClCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SA6DnBC,YA7DmB,GA6DHC,CAAD,IAAO;AAClB,UAAIA,CAAC,CAACC,GAAF,KAAU,OAAV,IAAqB,CAACD,CAAC,CAACE,QAA5B,EAAsC;AAClCF,QAAAA,CAAC,CAACG,cAAF;AACA,aAAKC,QAAL,CAAcJ,CAAd;AACD;AACN,KAlEkB;;AAEf,UAAMK,IAAI,GAAG,EAAb;AACA,UAAMC,QAAQ,GAAG,EAAjB;AACA,UAAMC,UAAU,GAAG,EAAnB;AACA,UAAMC,MAAM,GAAGjB,EAAE,CAACkB,OAAH,CAAWhB,QAAX,CAAf;AACA,SAAKiB,KAAL,GAAa;AACTL,MAAAA,IAAI,EAAEA,IADG;AAETG,MAAAA,MAAM,EAAEA,MAFC;AAGTF,MAAAA,QAAQ,EAAEA,QAHD;AAITC,MAAAA,UAAU,EAAEA;AAJH,KAAb;AAQA,SAAKG,KAAL,CAAWF,MAAX,CAAkBG,EAAlB,CAAqB,MAArB,EAA8BC,IAAD,IAAU;AACnC,YAAMC,WAAW,GAAG,KAAKH,KAAL,CAAWJ,QAA/B;AACAO,MAAAA,WAAW,CAACC,IAAZ,CAAiBF,IAAjB;AACA,WAAKG,QAAL,CAAc;AAAET,QAAAA,QAAQ,EAAEO;AAAZ,OAAd;AACH,KAJD;AAMA,SAAKG,KAAL,gBAAa5B,KAAK,CAAC6B,SAAN,EAAb;AACA,SAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKf,QAAL,GAAgB,KAAKA,QAAL,CAAce,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKC,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBD,IAAxB,CAA6B,IAA7B,CAA1B;AACA,SAAKpB,YAAL,GAAoB,KAAKA,YAAL,CAAkBoB,IAAlB,CAAuB,IAAvB,CAApB;AACH;;AACsB,QAAjBE,iBAAiB,GAAG;AACtB,QAAI,KAAKX,KAAL,CAAWF,MAAX,KAAsBc,SAA1B,EAAqC,CACjC;AACH;;AACD,UAAM9B,WAAW,CAAC,IAAD,EAAO,KAAKM,KAAL,CAAWyB,QAAlB,EAA4B,KAAKzB,KAAL,CAAW0B,UAAvC,CAAjB;AACA,SAAKd,KAAL,CAAWF,MAAX,CAAkBiB,IAAlB,CAAuB,MAAvB,EAA+B;AAAEC,MAAAA,IAAI,EAAE,KAAK5B,KAAL,CAAWyB,QAAnB;AAA6BhB,MAAAA,UAAU,EAAE,KAAKG,KAAL,CAAWH;AAApD,KAA/B;AACA,SAAKG,KAAL,CAAWF,MAAX,CAAkBG,EAAlB,CAAqB,QAArB,EAA+BgB,IAAI,IAAI,CACnC;AACH,KAFD;AAIH;;AAEuB,QAAlBC,kBAAkB,CAACC,SAAD,EAAY;AAChC,QAAI,KAAK/B,KAAL,CAAW0B,UAAX,KAA0BK,SAAS,CAACL,UAAxC,EAAoD;AAChD,YAAMhC,WAAW,CAAC,IAAD,EAAO,KAAKM,KAAL,CAAWyB,QAAlB,EAA4B,KAAKzB,KAAL,CAAW0B,UAAvC,CAAjB;AACA,WAAKd,KAAL,CAAWF,MAAX,CAAkBiB,IAAlB,CAAuB,MAAvB,EAA+B;AAAEC,QAAAA,IAAI,EAAE,KAAK5B,KAAL,CAAWyB,QAAnB;AAA6BhB,QAAAA,UAAU,EAAE,KAAKG,KAAL,CAAWH;AAApD,OAA/B;AACA,WAAKG,KAAL,CAAWF,MAAX,CAAkBG,EAAlB,CAAqB,QAArB,EAA+BgB,IAAI,IAAI,CACnC;AACH,OAFD;AAGH;AACJ;;AAEDG,EAAAA,oBAAoB,GAAG;AACnB,SAAKpB,KAAL,CAAWF,MAAX,CAAkBiB,IAAlB,CAAuB,OAAvB,EADmB,CAEnB;AACH;;AAEDP,EAAAA,QAAQ,CAAClB,CAAD,EAAI;AACR,SAAKe,QAAL,CAAc;AAAEV,MAAAA,IAAI,EAAEL,CAAC,CAAC+B,MAAF,CAASC;AAAjB,KAAd;AACA,UAAMC,IAAI,GAAGjC,CAAC,CAAC+B,MAAf;AACAE,IAAAA,IAAI,CAACC,KAAL,CAAWC,MAAX,GAAoB,KAApB;AACA,UAAMC,aAAa,GAAIH,IAAI,CAACI,YAAN,GAAsB,IAA5C;AACAJ,IAAAA,IAAI,CAACC,KAAL,CAAWC,MAAX,GAAoBC,aAApB;AACH;;AASDhC,EAAAA,QAAQ,CAACJ,CAAD,EAAI;AACRA,IAAAA,CAAC,CAACG,cAAF,GADQ,CAER;;AACA,QAAI,KAAKO,KAAL,CAAWL,IAAX,KAAoB,EAAxB,EAA4B;AACxB;AACH;;AACD,QAAI0B,MAAM,GAAG/B,CAAC,CAAC+B,MAAf;AACA,UAAMnB,IAAI,GAAG;AACTc,MAAAA,IAAI,EAAE,KAAK5B,KAAL,CAAWyB,QADR;AAETe,MAAAA,OAAO,EAAE,KAAK5B,KAAL,CAAWL,IAFX;AAGTkC,MAAAA,IAAI,EAAEC,IAAI,CAACC,GAAL;AAHG,KAAb,CAPQ,CAYR;;AACA,QAAIzC,CAAC,CAAC+B,MAAF,CAASW,SAAT,KAAuB,aAA3B,EAAyC;AACrCX,MAAAA,MAAM,GAAGA,MAAM,CAACY,UAAhB;AACH;;AACDZ,IAAAA,MAAM,CAACa,QAAP,CAAgB,CAAhB,EAAmBV,KAAnB,CAAyBC,MAAzB,GAAkC,KAAlC,CAhBQ,CAiBR;;AACA,UAAMtB,WAAW,GAAG,KAAKH,KAAL,CAAWJ,QAA/B;AACAO,IAAAA,WAAW,CAACC,IAAZ,CAAiBF,IAAjB;AACA,SAAKG,QAAL,CAAc;AAAET,MAAAA,QAAQ,EAAEO;AAAZ,KAAd,EApBQ,CAqBR;;AACA,SAAKG,KAAL,CAAW6B,OAAX,CAAmBC,SAAnB,GAA+B,CAA/B,CAtBQ,CAuBR;;AACA,SAAKpC,KAAL,CAAWF,MAAX,CAAkBiB,IAAlB,CAAuB,MAAvB,EAA+B;AAAEsB,MAAAA,EAAE,EAAE,KAAKrC,KAAL,CAAWH,UAAjB;AAA6BK,MAAAA,IAAI,EAAEA;AAAnC,KAA/B;AAEA,SAAKG,QAAL,CAAc;AAAEV,MAAAA,IAAI,EAAE;AAAR,KAAd;AACH;;AAEDe,EAAAA,kBAAkB,CAAC4B,OAAD,EAAU;AACxB;AACA,UAAMC,SAAS,GAAGD,OAAO,CAACtB,IAAR,IAAgB,KAAK5B,KAAL,CAAWyB,QAA7C;AACA,UAAMmB,SAAS,GAAGO,SAAS,GAAG,YAAH,GAAkB,eAA7C;AACA,WAAOP,SAAP;AACH;;AAGDQ,EAAAA,MAAM,GAAG;AACL,UAAM;AAAE1B,MAAAA,UAAF;AAAc2B,MAAAA;AAAd,QAAiC,KAAKrD,KAA5C;AACA,wBACI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,gCACI;AAAK,UAAA,SAAS,EAAC,UAAf;AAAA,oBAA2B0B;AAA3B;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAQ,UAAA,SAAS,EAAC,iBAAlB;AAAoC,UAAA,OAAO,EAAE2B,cAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAKI;AAAK,QAAA,SAAS,EAAC,UAAf;AAA0B,QAAA,GAAG,EAAE,KAAKnC,KAApC;AAAA,+BACI;AAAA,iCACI;AAAI,YAAA,SAAS,EAAC,aAAd;AAAA,sBACK,KAAKN,KAAL,CAAWJ,QAAX,CAAoB8C,GAApB,CAAwB,CAACJ,OAAD,EAAUK,CAAV,KAAgB;AACrC,kCAAQ;AAAI,gBAAA,SAAS,EAAE,KAAKjC,kBAAL,CAAwB4B,OAAxB,IAAmC,UAAlD;AAAA,wCACJ;AAAK,kBAAA,SAAS,EAAE,KAAK5B,kBAAL,CAAwB4B,OAAxB,CAAhB;AAAA,0CACI;AAAK,oBAAA,SAAS,EAAC,aAAf;AAAA,8BACKA,OAAO,CAACtB;AADb;AAAA;AAAA;AAAA;AAAA,0BADJ,eAII;AAAK,oBAAA,SAAS,EAAC,MAAf;AAAA,8BACKsB,OAAO,CAACV;AADb;AAAA;AAAA;AAAA;AAAA,0BAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,wBADI,eASJ;AAAK,kBAAA,SAAS,EAAE,qBAAqB,KAAKlB,kBAAL,CAAwB4B,OAAxB,CAArC;AAAA,4BACK,IAAIR,IAAJ,CAASQ,OAAO,CAACT,IAAjB,EAAuBe,cAAvB,CAAsC,OAAtC;AADL;AAAA;AAAA;AAAA;AAAA,wBATI;AAAA,iBAAmED,CAAnE;AAAA;AAAA;AAAA;AAAA,sBAAR;AAaH,aAdA;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cALJ,eA0BI;AAAM,QAAA,SAAS,EAAC,aAAhB;AAA8B,QAAA,QAAQ,EAAErD,CAAC,IAAI,KAAKI,QAAL,CAAcJ,CAAd,CAA7C;AAAA,gCACI;AACI,UAAA,SAAS,EAAC,SADd;AAEI,UAAA,QAAQ,EAAEA,CAAC,IAAI,KAAKkB,QAAL,CAAclB,CAAd,CAFnB;AAGI,UAAA,WAAW,EAAC,eAHhB;AAII,UAAA,KAAK,EAAE,KAAKU,KAAL,CAAWL,IAJtB;AAKI,UAAA,IAAI,EAAC,GALT;AAMI,UAAA,KAAK,EAAE;AAAEkD,YAAAA,SAAS,EAAE;AAAb,WANX;AAOI,UAAA,UAAU,EAAE,KAAKxD;AAPrB;AAAA;AAAA;AAAA;AAAA,gBADJ,eAWI;AAAQ,UAAA,SAAS,EAAC,aAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,cA1BJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AA0CH;;AAtJiC;;AAyJtC,eAAeJ,OAAf","sourcesContent":["import React, { useRef } from 'react'\nimport ENV from '../../config.js'\nimport io from 'socket.io-client'\nimport './style.css'\nimport { getMessages } from '../../actions/chat.js'\nconst API_HOST = ENV.api_host\n\nclass ChatBox extends React.Component {\n    constructor(props) {\n        super(props)\n        const text = \"\"\n        const messages = []\n        const chatRoomId = \"\"\n        const socket = io.connect(API_HOST)\n        this.state = {\n            text: text,\n            socket: socket,\n            messages: messages,\n            chatRoomId: chatRoomId\n        }\n\n\n        this.state.socket.on(\"chat\", (data) => {\n            const newMessages = this.state.messages\n            newMessages.push(data)\n            this.setState({ messages: newMessages })\n        })\n\n        this.myRef = React.createRef()\n        this.onChange = this.onChange.bind(this)\n        this.onSubmit = this.onSubmit.bind(this)\n        this.checkMessagePerson = this.checkMessagePerson.bind(this)\n        this.onEnterPress = this.onEnterPress.bind(this)\n    }\n    async componentDidMount() {\n        if (this.state.socket !== undefined) {\n            // console.log(\"connect to socket...\")\n        }\n        await getMessages(this, this.props.userName, this.props.friendName)\n        this.state.socket.emit(\"room\", { name: this.props.userName, chatRoomId: this.state.chatRoomId })\n        this.state.socket.on('joined', room => {\n            // console.log('i have joined', room)\n        })\n\n    }\n\n    async componentDidUpdate(prevProps) {\n        if (this.props.friendName !== prevProps.friendName) {\n            await getMessages(this, this.props.userName, this.props.friendName)\n            this.state.socket.emit(\"room\", { name: this.props.userName, chatRoomId: this.state.chatRoomId })\n            this.state.socket.on('joined', room => {\n                // console.log('I have joined', room)\n            })\n        }\n    }\n\n    componentWillUnmount() {\n        this.state.socket.emit(\"close\")\n        // console.log(\"disconnect from socket...\")\n    }\n\n    onChange(e) {\n        this.setState({ text: e.target.value })\n        const elem = e.target\n        elem.style.height = \"1px\"\n        const toBeAddHeight = (elem.scrollHeight) + \"px\";\n        elem.style.height = toBeAddHeight\n    }\n\n    onEnterPress = (e) => {\n        if (e.key === \"Enter\" && !e.shiftKey) {\n            e.preventDefault();\n            this.onSubmit(e)\n          }\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n        //check if its empty message\n        if (this.state.text === \"\") {\n            return;\n        }\n        let target = e.target\n        const data = {\n            name: this.props.userName,\n            content: this.state.text,\n            time: Date.now()\n        }\n        //change textarea height back to normal\n        if (e.target.className !== 'chatMessage'){\n            target = target.parentNode\n        }\n        target.children[0].style.height = \"70%\"\n        //update our own message\n        const newMessages = this.state.messages\n        newMessages.push(data)\n        this.setState({ messages: newMessages })\n        //auto scroll the chatbox to bottom\n        this.myRef.current.scrollTop = 0\n        //send message through socket\n        this.state.socket.emit('chat', { id: this.state.chatRoomId, data: data })\n\n        this.setState({ text: \"\" });\n    }\n\n    checkMessagePerson(message) {\n        //Me will be change to the current user\n        const myMessage = message.name == this.props.userName;\n        const className = myMessage ? \"my-message\" : \"other-message\"\n        return className\n    }\n\n\n    render() {\n        const { friendName, showChatOption } = this.props\n        return (\n            <div className='chatBox'>\n                <div className='chatTitle'>\n                    <div className='chatName'>{friendName}</div>\n                    <button className='closeChatButton' onClick={showChatOption}>X</button>\n                </div>\n                <div className='chatBody' ref={this.myRef}>\n                    <div>\n                        <ul className='messageList'>\n                            {this.state.messages.map((message, i) => {\n                                return (<li className={this.checkMessagePerson(message) + \"-wrapper\"} key={i}>\n                                    <div className={this.checkMessagePerson(message)}>\n                                        <div className='person-name'>\n                                            {message.name}\n                                        </div>\n                                        <div className='text'>\n                                            {message.content}\n                                        </div>\n                                    </div>\n                                    <div className={'chatMessageTime-' + this.checkMessagePerson(message)}>\n                                        {new Date(message.time).toLocaleString('en-US')}\n                                    </div>\n                                </li>)\n                            })}\n                        </ul>\n                    </div>\n                </div>\n                <form className='chatMessage' onSubmit={e => this.onSubmit(e)}>\n                    <textarea\n                        className='message'\n                        onChange={e => this.onChange(e)}\n                        placeholder=\"Enter message\"\n                        value={this.state.text}\n                        rows=\"1\"\n                        style={{ maxHeight: \"100px\" }}\n                        onKeyPress={this.onEnterPress}\n                    >\n                    </textarea>\n                    <button className='sendMessage'>Send</button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default ChatBox;"]},"metadata":{},"sourceType":"module"}