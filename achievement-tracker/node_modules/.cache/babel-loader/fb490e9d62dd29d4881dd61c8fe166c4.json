{"ast":null,"code":"// Functions to help with user authentication\n// environment configurations\nimport ENV from '../config.js';\nconst API_HOST = ENV.api_host; // Send a request to check if a user is logged in through the session cookie\n\nexport const checkSession = app => {\n  const url = `${API_HOST}/users/current`;\n  fetch(url).then(res => {\n    if (res.status === 200) {\n      return res.json();\n    }\n  }).then(json => {\n    if (json && json.currentUser) {\n      app.setState({\n        currentUser: json.currentUser\n      });\n    }\n  }).catch(error => {\n    console.log(error);\n  });\n}; // A function to send a POST request with the user to be logged in\n\nexport const login = (loginParams, app) => {\n  // Create our request constructor with all the parameters we need\n  const request = new Request(`${API_HOST}/users/login`, {\n    method: \"post\",\n    body: JSON.stringify(loginParams),\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-Type\": \"application/json\"\n    }\n  }); // Send the request with fetch()\n\n  fetch(request).then(res => {\n    if (res.status === 200) {\n      return res.json();\n    } else if (res.status === 404) {\n      alert('username or password incorrect');\n    }\n  }).then(json => {\n    if (json && json.currentUser !== undefined) {\n      app.setState({\n        currentUser: json.currentUser\n      });\n      localStorage.setItem('currentUser', json.currentUser);\n    }\n  }).catch(error => {\n    console.log(error);\n  });\n}; // Changes the current user's password\n\nexport const changePassword = newPassword => {\n  // Create our request constructor with all the parameters we need\n  const request = new Request(`${API_HOST}/users/changepassword`, {\n    method: \"post\",\n    body: JSON.stringify({\n      \"newPassword\": newPassword\n    }),\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-Type\": \"application/json\"\n    }\n  }); // Send the request with fetch()\n\n  fetch(request).then(res => {\n    if (res.status === 201) {\n      alert(\"password changed successfully\");\n    } else {\n      alert('password change failed');\n    }\n  }).catch(error => {\n    console.log(error);\n  });\n}; // A function to send a GET request to logout the current user\n\nexport const logout = app => {\n  const url = `${API_HOST}/users/logout`;\n  fetch(url).then(res => {\n    app.setState({\n      currentUser: null,\n      message: {\n        type: \"\",\n        body: \"\"\n      }\n    });\n    localStorage.clear();\n  }).catch(error => {\n    console.log(error);\n  });\n};","map":{"version":3,"sources":["/home/abdullah/steam_achievement_tracker-main/achievement-tracker/src/actions/reactAuth.js"],"names":["ENV","API_HOST","api_host","checkSession","app","url","fetch","then","res","status","json","currentUser","setState","catch","error","console","log","login","loginParams","request","Request","method","body","JSON","stringify","headers","Accept","alert","undefined","localStorage","setItem","changePassword","newPassword","logout","message","type","clear"],"mappings":"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","sourcesContent":["// Functions to help with user authentication\n\n// environment configurations\nimport ENV from '../config.js'\nconst API_HOST = ENV.api_host\n\n// Send a request to check if a user is logged in through the session cookie\nexport const checkSession = (app) => {\n    const url = `${API_HOST}/users/current`;\n    fetch(url)\n        .then(res => {\n            if (res.status === 200) {\n                return res.json();\n            }\n        })\n        .then(json => {\n            if (json && json.currentUser) {\n                app.setState({ currentUser: json.currentUser });\n            }\n        })\n        .catch(error => {\n            console.log(error);\n        });\n};\n\n// A function to send a POST request with the user to be logged in\nexport const login = (loginParams, app) => {\n    // Create our request constructor with all the parameters we need\n    const request = new Request(`${API_HOST}/users/login`, {\n        method: \"post\",\n        body: JSON.stringify(loginParams),\n        headers: {\n            Accept: \"application/json, text/plain, */*\",\n            \"Content-Type\": \"application/json\"\n        }\n    });\n    // Send the request with fetch()\n    fetch(request)\n        .then(res => {\n            if (res.status === 200) {\n                return res.json();\n            } else if (res.status === 404) {\n                alert('username or password incorrect')\n            }\n        })\n        .then(json => {\n            if (json && json.currentUser !== undefined) {\n                app.setState({ currentUser: json.currentUser });\n                localStorage.setItem('currentUser', json.currentUser)\n            }\n        })\n        .catch(error => {\n            console.log(error);\n        });\n};\n\n// Changes the current user's password\nexport const changePassword = (newPassword) => {\n    // Create our request constructor with all the parameters we need\n    const request = new Request(`${API_HOST}/users/changepassword`, {\n        method: \"post\",\n        body: JSON.stringify({ \"newPassword\": newPassword }),\n        headers: {\n            Accept: \"application/json, text/plain, */*\",\n            \"Content-Type\": \"application/json\"\n        }\n    });\n    // Send the request with fetch()\n    fetch(request)\n        .then(res => {\n            if (res.status === 201) {\n                alert(\"password changed successfully\")\n            } else {\n                alert('password change failed')\n            }\n        })\n        .catch(error => {\n            console.log(error);\n        });\n};\n\n// A function to send a GET request to logout the current user\nexport const logout = (app) => {\n    const url = `${API_HOST}/users/logout`;\n\n    fetch(url)\n        .then(res => {\n            app.setState({\n                currentUser: null,\n                message: { type: \"\", body: \"\" }\n            });\n            localStorage.clear()\n        })\n        .catch(error => {\n            console.log(error);\n        });\n};\n"]},"metadata":{},"sourceType":"module"}