{"ast":null,"code":"var log=console.log;export var addReviewOnForum=function addReviewOnForum(review){var url='/api/reviews';var request=new Request(url,{method:'post',body:JSON.stringify(review),headers:{'Accept':'application/json, text/plain, */*','Content-Type':'application/json'}});fetch(request).then(function(res){if(res.status===200){log(\"New review saved\");}else{log(\"Error: Cannot add review\");}log(res);}).catch(function(error){log(error);});};export var getReviewsOnForum=function getReviewsOnForum(forum,reviewNumLimit){var url='/api/reviews';fetch(url).then(function(res){if(res.status===200){return res.json();}else{log('Error: Cannot get reviews');}}).then(function(json){forum.setState({reviews:json.reviews,reviewsInSection:json.reviews,reviewsOnPage:json.reviews.slice(0,reviewNumLimit)});}).catch(function(error){log(error);});};export var getReviewsOnAdmin=function getReviewsOnAdmin(adminPage){var url='/api/reviews';fetch(url).then(function(res){if(res.status===200){return res.json();}else{log('Error: Cannot get reviews');}}).then(function(json){var reviews=json.reviews.sort(function(r1,r2){return r1.reported?-1:1;});adminPage.setState({reviews:reviews,reviewsOnPage:reviews});}).catch(function(error){log(error);});};export var getUserReviews=function getUserReviews(page,username){var url='/api/reviews';return fetch(url).then(function(res){if(res.status===200){return res.json();}else{log('Error: Cannot get reviews');}}).then(function(json){// page.setState({\n//   userReviews: json.reviews.filter((review) => {\n//     return review.author === username\n//   })\n// })\nreturn json.reviews.filter(function(review){return review.author===username;});}).catch(function(error){log(error);});};export var updateReview=function updateReview(review){var url=\"/api/reviews/\".concat(review.id);var request=new Request(url,{method:'PATCH',body:JSON.stringify(review),headers:{'Accept':'application/json, text/plain, */*','Content-Type':'application/json'}});fetch(request).then(function(res){if(res.status===200){log(\"New review saved\");}else{log(\"Error: Cannot update review\");}}).catch(function(error){log(error);});};export var deleteReviewOnAdmin=function deleteReviewOnAdmin(review){var url=\"/api/reviews/\".concat(review.id);var request=new Request(url,{method:'delete',body:JSON.stringify(review),headers:{'Accept':'application/json, text/plain, */*','Content-Type':'application/json'}});fetch(request).then(function(res){if(res.status===200){log(\"Review deleted\");}else{log(\"Error: Cannot delete review\");}}).catch(function(error){log(error);});};export var updateUsernameReputation=function updateUsernameReputation(username,reputation,deleted){var url=\"/api/reviews/\".concat(username,\"/\").concat(reputation);var request=new Request(url,{method:'PATCH',body:JSON.stringify({deleted:deleted}),headers:{'Accept':'application/json, text/plain, */*','Content-Type':'application/json'}});fetch(request).then(function(res){if(res.status===200){log(\"Reputation on reviews updated\");}else{log(\"Error: Cannot update reputation\");}}).catch(function(error){log(error);});};","map":{"version":3,"sources":["/home/abdullah/steam_achievement_tracker-main/achievement-tracker/src/actions/review.js"],"names":["log","console","addReviewOnForum","review","url","request","Request","method","body","JSON","stringify","headers","fetch","then","res","status","catch","error","getReviewsOnForum","forum","reviewNumLimit","json","setState","reviews","reviewsInSection","reviewsOnPage","slice","getReviewsOnAdmin","adminPage","sort","r1","r2","reported","getUserReviews","page","username","filter","author","updateReview","id","deleteReviewOnAdmin","updateUsernameReputation","reputation","deleted"],"mappings":"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","sourcesContent":["const log = console.log\n\nexport const addReviewOnForum = (review) => {\n    const url = '/api/reviews'\n    const request = new Request(url, {\n        method: 'post',\n        body: JSON.stringify(review),\n        headers: {\n            'Accept': 'application/json, text/plain, */*',\n            'Content-Type': 'application/json'\n        }\n    })\n\n    fetch(request)\n        .then(function (res) {\n            if (res.status === 200) {\n                log(\"New review saved\")\n            } else {\n                log(\"Error: Cannot add review\")\n            }\n            log(res)\n        }).catch((error) => {\n            log(error)\n        })\n}\n\nexport const getReviewsOnForum = (forum, reviewNumLimit) => {\n    const url = '/api/reviews'\n\n    fetch(url)\n        .then((res) => {\n            if (res.status === 200) {\n                return res.json()\n            } else {\n                log('Error: Cannot get reviews')\n            }\n        })\n        .then((json) => {\n            forum.setState({\n                reviews: json.reviews,\n                reviewsInSection: json.reviews,\n                reviewsOnPage: json.reviews.slice(\n                    0,\n                    reviewNumLimit\n                )\n            })\n        })\n        .catch((error) => {\n            log(error)\n        })\n}\n\nexport const getReviewsOnAdmin = (adminPage) => {\n    const url = '/api/reviews'\n\n    fetch(url)\n        .then((res) => {\n            if (res.status === 200) {\n                return res.json()\n            } else {\n                log('Error: Cannot get reviews')\n            }\n        })\n        .then((json) => {\n            const reviews = json.reviews.sort((r1, r2) => {\n                return r1.reported ? -1 : 1\n            })\n\n            adminPage.setState({\n                reviews: reviews,\n                reviewsOnPage: reviews\n            })\n        })\n        .catch((error) => {\n            log(error)\n        })\n}\n\nexport const getUserReviews = (page, username) => {\n    const url = '/api/reviews'\n\n    return fetch(url)\n        .then((res) => {\n            if (res.status === 200) {\n                return res.json()\n            } else {\n                log('Error: Cannot get reviews')\n            }\n        })\n        .then((json) => {\n            // page.setState({\n            //   userReviews: json.reviews.filter((review) => {\n            //     return review.author === username\n            //   })\n            // })\n            return json.reviews.filter((review) => {\n                return review.author === username\n            })\n        })\n        .catch((error) => {\n            log(error)\n        })\n}\n\nexport const updateReview = (review) => {\n    const url = `/api/reviews/${review.id}`\n\n    const request = new Request(url, {\n        method: 'PATCH',\n        body: JSON.stringify(review),\n        headers: {\n            'Accept': 'application/json, text/plain, */*',\n            'Content-Type': 'application/json'\n        }\n    })\n\n    fetch(request)\n        .then(function (res) {\n            if (res.status === 200) {\n                log(\"New review saved\")\n            } else {\n                log(\"Error: Cannot update review\")\n            }\n        }).catch((error) => {\n            log(error)\n        })\n}\n\nexport const deleteReviewOnAdmin = (review) => {\n    const url = `/api/reviews/${review.id}`\n\n    const request = new Request(url, {\n        method: 'delete',\n        body: JSON.stringify(review),\n        headers: {\n            'Accept': 'application/json, text/plain, */*',\n            'Content-Type': 'application/json'\n        }\n    })\n\n    fetch(request)\n        .then(function (res) {\n            if (res.status === 200) {\n                log(\"Review deleted\")\n            } else {\n                log(\"Error: Cannot delete review\")\n            }\n        }).catch((error) => {\n            log(error)\n        })\n}\n\nexport const updateUsernameReputation = (username, reputation, deleted) => {\n    const url = `/api/reviews/${username}/${reputation}`\n\n    const request = new Request(url, {\n        method: 'PATCH',\n        body: JSON.stringify({ deleted: deleted }),\n        headers: {\n            'Accept': 'application/json, text/plain, */*',\n            'Content-Type': 'application/json'\n        }\n    })\n\n    fetch(request)\n        .then(function (res) {\n            if (res.status === 200) {\n                log(\"Reputation on reviews updated\")\n            } else {\n                log(\"Error: Cannot update reputation\")\n            }\n        }).catch((error) => {\n            log(error)\n        })\n}"]},"metadata":{},"sourceType":"module"}