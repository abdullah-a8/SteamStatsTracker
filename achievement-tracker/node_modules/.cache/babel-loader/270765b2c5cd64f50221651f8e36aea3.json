{"ast":null,"code":"var _jsxFileName = \"/home/abdullah/steam_achievement_tracker-main/achievement-tracker/src/react-components/ReviewForum/index.js\";\nimport React from \"react\";\nimport { uid } from \"react-uid\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { CurrentHeaderButton, HeaderButton, HeaderImage, HeadContainer, HeaderNavBar } from '../HeaderComponent';\nimport logo from './../../steamIcon2.png';\nimport ForumSearchBar from \"../ForumSearchBar\";\nimport Review from \"../Review\";\nimport ReviewSubmit from \"../ReviewSubmit\";\nimport \"./styles.css\";\nimport { addReviewOnForum, getReviewsOnForum, updateReview } from '../../actions/review';\nimport { addVoteRecord, getVoteRecords, updateVoteRecord } from '../../actions/voteRecord';\nimport { getReputation } from '../../actions/reputation';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst log = console.log;\nconst reviewNumLimit = 5;\n\nclass ReviewForum extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.upvoteAction = reviewId => {\n      const user = this.state.userName;\n\n      if (user === null) {\n        alert(\"You have to login before you vote.\");\n        return;\n      }\n\n      const voteRecordSearch = this.state.voteRecords.filter(record => {\n        return record.username === user && record.reviewId === reviewId;\n      });\n      let voteRecord = {};\n\n      if (voteRecordSearch.length === 0) {\n        voteRecord = {\n          username: user,\n          reviewId: reviewId,\n          vote: \"none\"\n        };\n        addVoteRecord(voteRecord);\n        const newVoteRecords = this.state.voteRecords;\n        newVoteRecords.push(voteRecord);\n        this.setState({\n          voteRecords: newVoteRecords\n        });\n      } else {\n        voteRecord = voteRecordSearch[0];\n      }\n\n      if (voteRecord.vote !== \"upvote\") {\n        const reviewList = this.state.reviews.map(review => {\n          if (review.id === reviewId) {\n            review.upvotes = review.upvotes + 1;\n\n            if (voteRecord.vote === \"downvote\") {\n              review.downvotes = review.downvotes - 1;\n            }\n          }\n\n          return review;\n        });\n        voteRecord.vote = \"upvote\";\n        this.setState({\n          reviews: reviewList\n        });\n      } else {\n        const reviewList = this.state.reviews.map(review => {\n          if (review.id === reviewId) {\n            review.upvotes = review.upvotes - 1;\n          }\n\n          return review;\n        });\n        voteRecord.vote = \"none\";\n        this.setState({\n          reviews: reviewList\n        });\n      } // Update review in database\n\n\n      updateReview(this.state.reviews.filter(review => review.id === reviewId)[0]); // Update user's vote record in database\n\n      updateVoteRecord(voteRecord);\n    };\n\n    this.downvoteAction = reviewId => {\n      const user = this.state.userName;\n\n      if (user === null) {\n        alert(\"You have to login before you vote.\");\n        return;\n      }\n\n      const voteRecordSearch = this.state.voteRecords.filter(record => {\n        return record.username === user && record.reviewId === reviewId;\n      });\n      let voteRecord = {};\n\n      if (voteRecordSearch.length === 0) {\n        voteRecord = {\n          username: user,\n          reviewId: reviewId,\n          vote: \"none\"\n        };\n        addVoteRecord(voteRecord);\n        const newVoteRecords = this.state.voteRecords;\n        newVoteRecords.push(voteRecord);\n        this.setState({\n          voteRecords: newVoteRecords\n        });\n      } else {\n        voteRecord = voteRecordSearch[0];\n      }\n\n      if (voteRecord.vote !== \"downvote\") {\n        const reviewList = this.state.reviews.map(review => {\n          if (review.id === reviewId) {\n            review.downvotes = review.downvotes + 1;\n\n            if (voteRecord.vote === \"upvote\") {\n              review.upvotes = review.upvotes - 1;\n            }\n          }\n\n          return review;\n        });\n        voteRecord.vote = \"downvote\";\n        this.setState({\n          reviews: reviewList\n        });\n      } else {\n        const reviewList = this.state.reviews.map(review => {\n          if (review.id === reviewId) {\n            review.downvotes = review.downvotes - 1;\n          }\n\n          return review;\n        });\n        voteRecord.vote = \"none\";\n        this.setState({\n          reviews: reviewList\n        });\n      } // Update review in database\n\n\n      updateReview(this.state.reviews.filter(review => review.id === reviewId)[0]); // Update user's vote record in database\n\n      updateVoteRecord(voteRecord);\n    };\n\n    this.reportAction = reviewId => {\n      log(reviewId);\n      log(this.state.reviews);\n      const reviewList = this.state.reviews.map(review => {\n        if (review.id === reviewId) {\n          review.reported = true;\n        }\n\n        return review;\n      });\n      this.setState({\n        reviews: reviewList\n      });\n      updateReview(this.state.reviews.filter(review => review.id === reviewId)[0]);\n      alert(\"Review reported.\");\n    };\n\n    this.handleSearchContentChange = event => {\n      const target = event.target;\n      this.setState({\n        searchContent: target.value\n      });\n    };\n\n    this.searchReview = () => {\n      const currentSectionReviews = this.state.reviews.filter(review => {\n        return review.title.includes(this.state.searchContent);\n      });\n      const currentPageReviews = currentSectionReviews.slice(0, reviewNumLimit);\n      this.setState({\n        reviewsInSection: currentSectionReviews,\n        reviewsOnPage: currentPageReviews,\n        currentPage: 1\n      });\n    };\n\n    this.prevPage = () => {\n      if (this.state.currentPage > 1) {\n        const currentPage = this.state.currentPage - 1;\n        const currentPageReviews = this.state.reviewsInSection.slice((currentPage - 1) * reviewNumLimit, (currentPage - 1) * reviewNumLimit + reviewNumLimit);\n        this.setState({\n          reviewsOnPage: currentPageReviews,\n          currentPage: currentPage\n        });\n      }\n    };\n\n    this.nextPage = () => {\n      if (this.state.currentPage < this.state.reviewsInSection.length / reviewNumLimit) {\n        const currentPage = this.state.currentPage + 1;\n        const currentPageReviews = this.state.reviewsInSection.slice((currentPage - 1) * reviewNumLimit, (currentPage - 1) * reviewNumLimit + reviewNumLimit);\n        this.setState({\n          reviewsOnPage: currentPageReviews,\n          currentPage: currentPage\n        });\n      }\n    };\n\n    this.firstPage = () => {\n      const currentPageReviews = this.state.reviewsInSection.slice(0, reviewNumLimit);\n      this.setState({\n        reviewsOnPage: currentPageReviews,\n        currentPage: 1\n      });\n    };\n\n    this.lastPage = () => {\n      const currentPage = Math.ceil(this.state.reviewsInSection.length / reviewNumLimit);\n      const currentPageReviews = this.state.reviewsInSection.slice((currentPage - 1) * reviewNumLimit, (currentPage - 1) * reviewNumLimit + reviewNumLimit);\n      this.setState({\n        reviewsOnPage: currentPageReviews,\n        currentPage: currentPage\n      });\n    };\n\n    this.handleSubmitTitleChange = event => {\n      const target = event.target;\n      this.setState({\n        reviewSubmitTitle: target.value\n      });\n    };\n\n    this.handleSubmitContentChange = event => {\n      const target = event.target;\n      this.setState({\n        reviewSubmitContent: target.value\n      });\n    };\n\n    this.getAvailableId = () => {\n      if (this.state.reviews.length === 0) {\n        return 0;\n      }\n\n      const idList = this.state.reviews.map(review => {\n        return review.id;\n      });\n      const maxId = Math.max(...idList);\n\n      for (let i = 0; i < maxId + 100; i++) {\n        if (!idList.includes(i)) {\n          return i;\n        }\n      }\n\n      log(\"Error: Cannot find available id\");\n      return -1;\n    };\n\n    this.addReview = () => {\n      const user = this.state.userName;\n      const id = this.getAvailableId();\n\n      if (!user) {\n        alert(\"You have to login before you submit your review.\");\n        return;\n      } else if (this.state.reviewSubmitTitle === \"\") {\n        alert(\"Review title cannot be empty\");\n        return;\n      } else if (this.state.reviewSubmitContent === \"\") {\n        alert(\"Review content cannot be empty\");\n        return;\n      } else if (id === -1) {\n        alert(\"Error: No available review id\");\n      }\n\n      const reviewList = this.state.reviews;\n      const newReview = {\n        id: id,\n        title: this.state.reviewSubmitTitle,\n        content: this.state.reviewSubmitContent,\n        upvotes: 0,\n        downvotes: 0,\n        author: this.state.userName,\n        reputation: this.state.reputation,\n        reported: false\n      };\n      reviewList.push(newReview);\n      this.setState({\n        reviewSubmitTitle: \"\",\n        reviewSubmitContent: \"\",\n        reviews: reviewList,\n        reviewsInSection: reviewList,\n        reviewsOnPage: reviewList.slice((this.state.currentPage - 1) * reviewNumLimit, (this.state.currentPage - 1) * reviewNumLimit + reviewNumLimit)\n      }); // Update database\n\n      addReviewOnForum(newReview);\n    };\n\n    this.refreshForum = () => {\n      const reviewList = this.state.reviews;\n      this.setState({\n        reviewsInSection: reviewList,\n        reviewsOnPage: reviewList.slice(0, reviewNumLimit),\n        searchContent: \"\"\n      });\n    };\n\n    this.state = {\n      userName: localStorage.getItem('currentUser'),\n      searchContent: \"\",\n      reviews: [],\n      reviewsInSection: [],\n      reviewsOnPage: [],\n      currentPage: 1,\n      reviewSubmitTitle: \"\",\n      reviewSubmitContent: \"\",\n      voteRecords: [],\n      reputation: 1\n    };\n    this.upvoteAction = this.upvoteAction.bind(this);\n    this.downvoteAction = this.downvoteAction.bind(this);\n    this.reportAction = this.reportAction.bind(this);\n  }\n\n  componentDidMount() {\n    getReviewsOnForum(this, reviewNumLimit);\n    getVoteRecords(this);\n    getReputation(this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(HeadContainer, {\n        bgId: \"dashboard\",\n        children: /*#__PURE__*/_jsxDEV(HeaderNavBar, {\n          children: [this.state.userName !== null ? /*#__PURE__*/_jsxDEV(HeaderImage, {\n            to: \"/dashboard\",\n            src: logo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 33\n          }, this) : /*#__PURE__*/_jsxDEV(HeaderImage, {\n            to: \"/\",\n            src: logo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"group\",\n            children: [/*#__PURE__*/_jsxDEV(CurrentHeaderButton, {\n              path: \"/reviewForum\",\n              children: \"Forum\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 362,\n              columnNumber: 29\n            }, this), this.state.userName !== null ? /*#__PURE__*/_jsxDEV(HeaderButton, {\n              path: \"/Dashboard\",\n              children: \"Dashboard\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 365,\n              columnNumber: 33\n            }, this) : /*#__PURE__*/_jsxDEV(HeaderButton, {\n              path: \"/Login\",\n              children: \"Log In\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 366,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ForumSearchBar, {\n        searchContent: this.state.searchContent,\n        handleChange: this.handleSearchContentChange,\n        enterButton: this.searchReview,\n        refreshButton: this.refreshForum\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"review-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Review Section\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"page-button-bar\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"btn-group\",\n            role: \"group\",\n            \"aria-label\": \"Basic example\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn btn-dark\",\n              onClick: this.firstPage,\n              children: \"First\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 384,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn btn-secondary\",\n              onClick: this.prevPage,\n              children: \"Prev\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 389,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn btn-secondary\",\n              onClick: this.nextPage,\n              children: \"Next\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 394,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn btn-dark\",\n              onClick: this.lastPage,\n              children: \"Last\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 399,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 383,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 21\n        }, this), this.state.reviewsOnPage.map(review => /*#__PURE__*/_jsxDEV(Review, {\n          id: review.id,\n          title: review.title,\n          content: review.content,\n          upvotes: review.upvotes,\n          downvotes: review.downvotes,\n          author: review.author,\n          reputation: review.reputation,\n          upvoteAction: this.upvoteAction,\n          downvoteAction: this.downvoteAction,\n          reportAction: this.reportAction\n        }, uid(review), false, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 25\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"page-button-bar\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"btn-group\",\n            role: \"group\",\n            \"aria-label\": \"Basic example\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn btn-dark\",\n              onClick: this.firstPage,\n              children: \"First\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 425,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn btn-secondary\",\n              onClick: this.prevPage,\n              children: \"Prev\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn btn-secondary\",\n              onClick: this.nextPage,\n              children: \"Next\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 435,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn btn-dark\",\n              onClick: this.lastPage,\n              children: \"Last\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 440,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 424,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ReviewSubmit, {\n        reviewSubmitTitle: this.state.reviewSubmitTitle,\n        reviewSubmitContent: this.state.reviewSubmitContent,\n        handleTitleChange: this.handleSubmitTitleChange,\n        handleContentChange: this.handleSubmitContentChange,\n        addReview: () => this.addReview()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default ReviewForum;","map":{"version":3,"sources":["/home/abdullah/steam_achievement_tracker-main/achievement-tracker/src/react-components/ReviewForum/index.js"],"names":["React","uid","CurrentHeaderButton","HeaderButton","HeaderImage","HeadContainer","HeaderNavBar","logo","ForumSearchBar","Review","ReviewSubmit","addReviewOnForum","getReviewsOnForum","updateReview","addVoteRecord","getVoteRecords","updateVoteRecord","getReputation","log","console","reviewNumLimit","ReviewForum","Component","constructor","props","upvoteAction","reviewId","user","state","userName","alert","voteRecordSearch","voteRecords","filter","record","username","voteRecord","length","vote","newVoteRecords","push","setState","reviewList","reviews","map","review","id","upvotes","downvotes","downvoteAction","reportAction","reported","handleSearchContentChange","event","target","searchContent","value","searchReview","currentSectionReviews","title","includes","currentPageReviews","slice","reviewsInSection","reviewsOnPage","currentPage","prevPage","nextPage","firstPage","lastPage","Math","ceil","handleSubmitTitleChange","reviewSubmitTitle","handleSubmitContentChange","reviewSubmitContent","getAvailableId","idList","maxId","max","i","addReview","newReview","content","author","reputation","refreshForum","localStorage","getItem","bind","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { uid } from \"react-uid\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport { CurrentHeaderButton, HeaderButton, HeaderImage, HeadContainer, HeaderNavBar } from '../HeaderComponent'\nimport logo from './../../steamIcon2.png'\nimport ForumSearchBar from \"../ForumSearchBar\"\nimport Review from \"../Review\"\nimport ReviewSubmit from \"../ReviewSubmit\"\nimport \"./styles.css\"\n\nimport { addReviewOnForum, getReviewsOnForum, updateReview } from '../../actions/review'\nimport { addVoteRecord, getVoteRecords, updateVoteRecord } from '../../actions/voteRecord'\nimport { getReputation } from '../../actions/reputation'\n\nconst log = console.log\nconst reviewNumLimit = 5;\n\nclass ReviewForum extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            userName: localStorage.getItem('currentUser'),\n            searchContent: \"\",\n            reviews: [],\n            reviewsInSection: [],\n            reviewsOnPage: [],\n            currentPage: 1,\n            reviewSubmitTitle: \"\",\n            reviewSubmitContent: \"\",\n            voteRecords: [],\n            reputation: 1\n        }\n\n        this.upvoteAction = this.upvoteAction.bind(this)\n        this.downvoteAction = this.downvoteAction.bind(this)\n        this.reportAction = this.reportAction.bind(this)\n    }\n\n    componentDidMount() {\n        getReviewsOnForum(this, reviewNumLimit)\n        getVoteRecords(this)\n        getReputation(this)\n    }\n\n    upvoteAction = reviewId => {\n        const user = this.state.userName\n        if (user === null) {\n            alert(\"You have to login before you vote.\")\n            return\n        }\n\n        const voteRecordSearch = this.state.voteRecords.filter(record => {\n            return record.username === user && record.reviewId === reviewId\n        })\n        let voteRecord = {}\n        if (voteRecordSearch.length === 0) {\n            voteRecord = {\n                username: user,\n                reviewId: reviewId,\n                vote: \"none\"\n            }\n            addVoteRecord(voteRecord)\n            const newVoteRecords = this.state.voteRecords\n            newVoteRecords.push(voteRecord)\n            this.setState({\n                voteRecords: newVoteRecords\n            })\n        } else {\n            voteRecord = voteRecordSearch[0]\n        }\n\n        if (voteRecord.vote !== \"upvote\") {\n            const reviewList = this.state.reviews.map(review => {\n                if (review.id === reviewId) {\n                    review.upvotes = review.upvotes + 1\n                    if (voteRecord.vote === \"downvote\") {\n                        review.downvotes = review.downvotes - 1\n                    }\n                }\n                return review\n            })\n            voteRecord.vote = \"upvote\"\n\n            this.setState({\n                reviews: reviewList,\n            })\n        } else {\n            const reviewList = this.state.reviews.map(review => {\n                if (review.id === reviewId) {\n                    review.upvotes = review.upvotes - 1\n                }\n                return review\n            })\n            voteRecord.vote = \"none\"\n\n            this.setState({\n                reviews: reviewList,\n            })\n        }\n\n        // Update review in database\n        updateReview(this.state.reviews.filter(review => review.id === reviewId)[0])\n        // Update user's vote record in database\n        updateVoteRecord(voteRecord)\n    }\n\n    downvoteAction = reviewId => {\n        const user = this.state.userName\n        if (user === null) {\n            alert(\"You have to login before you vote.\")\n            return\n        }\n\n        const voteRecordSearch = this.state.voteRecords.filter(record => {\n            return record.username === user && record.reviewId === reviewId\n        })\n        let voteRecord = {}\n        if (voteRecordSearch.length === 0) {\n            voteRecord = {\n                username: user,\n                reviewId: reviewId,\n                vote: \"none\"\n            }\n            addVoteRecord(voteRecord)\n            const newVoteRecords = this.state.voteRecords\n            newVoteRecords.push(voteRecord)\n            this.setState({\n                voteRecords: newVoteRecords\n            })\n        } else {\n            voteRecord = voteRecordSearch[0]\n        }\n\n        if (voteRecord.vote !== \"downvote\") {\n            const reviewList = this.state.reviews.map(review => {\n                if (review.id === reviewId) {\n                    review.downvotes = review.downvotes + 1\n                    if (voteRecord.vote === \"upvote\") {\n                        review.upvotes = review.upvotes - 1\n                    }\n                }\n                return review\n            })\n            voteRecord.vote = \"downvote\"\n\n            this.setState({\n                reviews: reviewList\n            })\n        } else {\n            const reviewList = this.state.reviews.map(review => {\n                if (review.id === reviewId) {\n                    review.downvotes = review.downvotes - 1\n                }\n                return review\n            })\n            voteRecord.vote = \"none\"\n\n            this.setState({\n                reviews: reviewList\n            })\n        }\n\n        // Update review in database\n        updateReview(this.state.reviews.filter(review => review.id === reviewId)[0])\n        // Update user's vote record in database\n        updateVoteRecord(voteRecord)\n    }\n\n    reportAction = reviewId => {\n        log(reviewId)\n        log(this.state.reviews)\n        const reviewList = this.state.reviews.map(review => {\n            if (review.id === reviewId) {\n                review.reported = true\n            }\n            return review\n        })\n\n        this.setState({\n            reviews: reviewList\n        })\n\n        updateReview(this.state.reviews.filter(review => review.id === reviewId)[0])\n\n        alert(\"Review reported.\")\n    }\n\n    handleSearchContentChange = event => {\n        const target = event.target;\n        this.setState({\n            searchContent: target.value\n        })\n    }\n\n    searchReview = () => {\n        const currentSectionReviews = this.state.reviews.filter(review => {\n            return review.title.includes(this.state.searchContent)\n        })\n        const currentPageReviews = currentSectionReviews.slice(\n            0,\n            reviewNumLimit\n        )\n\n        this.setState({\n            reviewsInSection: currentSectionReviews,\n            reviewsOnPage: currentPageReviews,\n            currentPage: 1\n        })\n    }\n\n    prevPage = () => {\n        if (this.state.currentPage > 1) {\n            const currentPage = this.state.currentPage - 1\n            const currentPageReviews = this.state.reviewsInSection.slice(\n                (currentPage - 1) * reviewNumLimit,\n                (currentPage - 1) * reviewNumLimit + reviewNumLimit\n            )\n            this.setState({\n                reviewsOnPage: currentPageReviews,\n                currentPage: currentPage\n            })\n        }\n    }\n\n    nextPage = () => {\n        if (this.state.currentPage < this.state.reviewsInSection.length / reviewNumLimit) {\n            const currentPage = this.state.currentPage + 1\n            const currentPageReviews = this.state.reviewsInSection.slice(\n                (currentPage - 1) * reviewNumLimit,\n                (currentPage - 1) * reviewNumLimit + reviewNumLimit\n            )\n            this.setState({\n                reviewsOnPage: currentPageReviews,\n                currentPage: currentPage\n            })\n        }\n    }\n\n    firstPage = () => {\n        const currentPageReviews = this.state.reviewsInSection.slice(\n            0,\n            reviewNumLimit\n        )\n        this.setState({\n            reviewsOnPage: currentPageReviews,\n            currentPage: 1\n        })\n    }\n\n    lastPage = () => {\n        const currentPage = Math.ceil(this.state.reviewsInSection.length / reviewNumLimit)\n        const currentPageReviews = this.state.reviewsInSection.slice(\n            (currentPage - 1) * reviewNumLimit,\n            (currentPage - 1) * reviewNumLimit + reviewNumLimit\n        )\n        this.setState({\n            reviewsOnPage: currentPageReviews,\n            currentPage: currentPage\n        })\n    }\n\n    handleSubmitTitleChange = event => {\n        const target = event.target;\n        this.setState({\n            reviewSubmitTitle: target.value\n        })\n    }\n\n    handleSubmitContentChange = event => {\n        const target = event.target;\n        this.setState({\n            reviewSubmitContent: target.value\n        })\n    }\n\n    getAvailableId = () => {\n        if (this.state.reviews.length === 0) {\n            return 0\n        }\n\n        const idList = this.state.reviews.map(review => {\n            return review.id\n        })\n        const maxId = Math.max(...idList)\n        for (let i = 0; i < maxId + 100; i++) {\n            if (!(idList.includes(i))) {\n                return i\n            }\n        }\n        log(\"Error: Cannot find available id\")\n        return -1\n    }\n\n    addReview = () => {\n        const user = this.state.userName\n        const id = this.getAvailableId()\n        if (!user) {\n            alert(\"You have to login before you submit your review.\")\n            return\n        } else if (this.state.reviewSubmitTitle === \"\") {\n            alert(\"Review title cannot be empty\")\n            return\n        } else if (this.state.reviewSubmitContent === \"\") {\n            alert(\"Review content cannot be empty\")\n            return\n        } else if (id === -1) {\n            alert(\"Error: No available review id\")\n        }\n\n        const reviewList = this.state.reviews\n        const newReview = {\n            id: id,\n            title: this.state.reviewSubmitTitle,\n            content: this.state.reviewSubmitContent,\n            upvotes: 0,\n            downvotes: 0,\n            author: this.state.userName,\n            reputation: this.state.reputation,\n            reported: false\n        }\n        reviewList.push(newReview)\n        this.setState({\n            reviewSubmitTitle: \"\",\n            reviewSubmitContent: \"\",\n            reviews: reviewList,\n            reviewsInSection: reviewList,\n            reviewsOnPage: reviewList.slice(\n                (this.state.currentPage - 1) * reviewNumLimit,\n                (this.state.currentPage - 1) * reviewNumLimit + reviewNumLimit\n            )\n        })\n\n        // Update database\n        addReviewOnForum(newReview)\n    }\n\n    refreshForum = () => {\n        const reviewList = this.state.reviews\n        this.setState({\n            reviewsInSection: reviewList,\n            reviewsOnPage: reviewList.slice(\n                0,\n                reviewNumLimit\n            ),\n            searchContent: \"\"\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <HeadContainer bgId={\"dashboard\"}>\n                    <HeaderNavBar>\n                        {\n                            this.state.userName !== null ?\n                                <HeaderImage to='/dashboard' src={logo} /> :\n                                <HeaderImage to='/' src={logo} />\n                        }\n                        <div className='group'>\n                            <CurrentHeaderButton path='/reviewForum'>Forum</CurrentHeaderButton>\n                            {\n                                this.state.userName !== null ?\n                                <HeaderButton path='/Dashboard'>Dashboard</HeaderButton> :\n                                <HeaderButton path='/Login'>Log In</HeaderButton>\n                            }\n                        </div>\n                    </HeaderNavBar>\n                </HeadContainer>\n\n                <ForumSearchBar\n                    searchContent={this.state.searchContent}\n                    handleChange={this.handleSearchContentChange}\n                    enterButton={this.searchReview}\n                    refreshButton={this.refreshForum}\n                />\n\n                <div className=\"review-section\">\n                    <h1>Review Section</h1>\n\n                    <div className=\"page-button-bar\">\n                        <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\n                            <button type=\"button\"\n                                className=\"btn btn-dark\"\n                                onClick={this.firstPage}>\n                                First\n              </button>\n                            <button type=\"button\"\n                                className=\"btn btn-secondary\"\n                                onClick={this.prevPage}>\n                                Prev\n              </button>\n                            <button type=\"button\"\n                                className=\"btn btn-secondary\"\n                                onClick={this.nextPage}>\n                                Next\n              </button>\n                            <button type=\"button\"\n                                className=\"btn btn-dark\"\n                                onClick={this.lastPage}>\n                                Last\n              </button>\n                        </div>\n                    </div>\n\n                    {this.state.reviewsOnPage.map(review => (\n                        <Review\n                            key={uid(review)}\n                            id={review.id}\n                            title={review.title}\n                            content={review.content}\n                            upvotes={review.upvotes}\n                            downvotes={review.downvotes}\n                            author={review.author}\n                            reputation={review.reputation}\n                            upvoteAction={this.upvoteAction}\n                            downvoteAction={this.downvoteAction}\n                            reportAction={this.reportAction}\n                        />\n                    ))}\n\n                    <div className=\"page-button-bar\">\n                        <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\n                            <button type=\"button\"\n                                className=\"btn btn-dark\"\n                                onClick={this.firstPage}>\n                                First\n              </button>\n                            <button type=\"button\"\n                                className=\"btn btn-secondary\"\n                                onClick={this.prevPage}>\n                                Prev\n              </button>\n                            <button type=\"button\"\n                                className=\"btn btn-secondary\"\n                                onClick={this.nextPage}>\n                                Next\n              </button>\n                            <button type=\"button\"\n                                className=\"btn btn-dark\"\n                                onClick={this.lastPage}>\n                                Last\n              </button>\n                        </div>\n                    </div>\n\n                </div>\n\n                <ReviewSubmit\n                    reviewSubmitTitle={this.state.reviewSubmitTitle}\n                    reviewSubmitContent={this.state.reviewSubmitContent}\n                    handleTitleChange={this.handleSubmitTitleChange}\n                    handleContentChange={this.handleSubmitContentChange}\n                    addReview={() => this.addReview()}\n                />\n            </div>\n        )\n    }\n}\n\nexport default ReviewForum;"]},"metadata":{},"sourceType":"module"}