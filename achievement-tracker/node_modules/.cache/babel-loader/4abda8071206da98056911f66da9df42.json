{"ast":null,"code":"import _regeneratorRuntime from\"/home/abdullah/steam_achievement_tracker-main/achievement-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/abdullah/steam_achievement_tracker-main/achievement-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/home/abdullah/steam_achievement_tracker-main/achievement-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/abdullah/steam_achievement_tracker-main/achievement-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"/home/abdullah/steam_achievement_tracker-main/achievement-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/home/abdullah/steam_achievement_tracker-main/achievement-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/abdullah/steam_achievement_tracker-main/achievement-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{useRef}from'react';import ENV from'../../config.js';import io from'socket.io-client';import'./style.css';import{getMessages}from'../../actions/chat.js';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var API_HOST=ENV.api_host;var ChatBox=/*#__PURE__*/function(_React$Component){_inherits(ChatBox,_React$Component);var _super=_createSuper(ChatBox);function ChatBox(props){var _this;_classCallCheck(this,ChatBox);_this=_super.call(this,props);_this.onEnterPress=function(e){if(e.key===\"Enter\"&&!e.shiftKey){e.preventDefault();_this.onSubmit(e);}};var text=\"\";var messages=[];var chatRoomId=\"\";var socket=io.connect(API_HOST);_this.state={text:text,socket:socket,messages:messages,chatRoomId:chatRoomId};_this.state.socket.on(\"chat\",function(data){var newMessages=_this.state.messages;newMessages.push(data);_this.setState({messages:newMessages});});_this.myRef=/*#__PURE__*/React.createRef();_this.onChange=_this.onChange.bind(_assertThisInitialized(_this));_this.onSubmit=_this.onSubmit.bind(_assertThisInitialized(_this));_this.checkMessagePerson=_this.checkMessagePerson.bind(_assertThisInitialized(_this));_this.onEnterPress=_this.onEnterPress.bind(_assertThisInitialized(_this));return _this;}_createClass(ChatBox,[{key:\"componentDidMount\",value:function(){var _componentDidMount=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(this.state.socket!==undefined){// console.log(\"connect to socket...\")\n}_context.next=3;return getMessages(this,this.props.userName,this.props.friendName);case 3:this.state.socket.emit(\"room\",{name:this.props.userName,chatRoomId:this.state.chatRoomId});this.state.socket.on('joined',function(room){// console.log('i have joined', room)\n});case 5:case\"end\":return _context.stop();}}},_callee,this);}));function componentDidMount(){return _componentDidMount.apply(this,arguments);}return componentDidMount;}()},{key:\"componentDidUpdate\",value:function(){var _componentDidUpdate=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(prevProps){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!(this.props.friendName!==prevProps.friendName)){_context2.next=5;break;}_context2.next=3;return getMessages(this,this.props.userName,this.props.friendName);case 3:this.state.socket.emit(\"room\",{name:this.props.userName,chatRoomId:this.state.chatRoomId});this.state.socket.on('joined',function(room){// console.log('I have joined', room)\n});case 5:case\"end\":return _context2.stop();}}},_callee2,this);}));function componentDidUpdate(_x){return _componentDidUpdate.apply(this,arguments);}return componentDidUpdate;}()},{key:\"componentWillUnmount\",value:function componentWillUnmount(){this.state.socket.emit(\"close\");// console.log(\"disconnect from socket...\")\n}},{key:\"onChange\",value:function onChange(e){this.setState({text:e.target.value});var elem=e.target;elem.style.height=\"1px\";var toBeAddHeight=elem.scrollHeight+\"px\";elem.style.height=toBeAddHeight;}},{key:\"onSubmit\",value:function onSubmit(e){e.preventDefault();//check if its empty message\nif(this.state.text===\"\"){return;}var target=e.target;var data={name:this.props.userName,content:this.state.text,time:Date.now()};//change textarea height back to normal\nif(e.target.className!=='chatMessage'){target=target.parentNode;}target.children[0].style.height=\"70%\";//update our own message\nvar newMessages=this.state.messages;newMessages.push(data);this.setState({messages:newMessages});//auto scroll the chatbox to bottom\nthis.myRef.current.scrollTop=0;//send message through socket\nthis.state.socket.emit('chat',{id:this.state.chatRoomId,data:data});this.setState({text:\"\"});}},{key:\"checkMessagePerson\",value:function checkMessagePerson(message){//Me will be change to the current user\nvar myMessage=message.name==this.props.userName;var className=myMessage?\"my-message\":\"other-message\";return className;}},{key:\"render\",value:function render(){var _this2=this;var _this$props=this.props,friendName=_this$props.friendName,showChatOption=_this$props.showChatOption;return/*#__PURE__*/_jsxs(\"div\",{className:\"chatBox\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chatTitle\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"chatName\",children:friendName}),/*#__PURE__*/_jsx(\"button\",{className:\"closeChatButton\",onClick:showChatOption,children:\"X\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"chatBody\",ref:this.myRef,children:/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"ul\",{className:\"messageList\",children:this.state.messages.map(function(message,i){return/*#__PURE__*/_jsxs(\"li\",{className:_this2.checkMessagePerson(message)+\"-wrapper\",children:[/*#__PURE__*/_jsxs(\"div\",{className:_this2.checkMessagePerson(message),children:[/*#__PURE__*/_jsx(\"div\",{className:\"person-name\",children:message.name}),/*#__PURE__*/_jsx(\"div\",{className:\"text\",children:message.content})]}),/*#__PURE__*/_jsx(\"div\",{className:'chatMessageTime-'+_this2.checkMessagePerson(message),children:new Date(message.time).toLocaleString('en-US')})]},i);})})})}),/*#__PURE__*/_jsxs(\"form\",{className:\"chatMessage\",onSubmit:function onSubmit(e){return _this2.onSubmit(e);},children:[/*#__PURE__*/_jsx(\"textarea\",{className:\"message\",onChange:function onChange(e){return _this2.onChange(e);},placeholder:\"Enter message\",value:this.state.text,rows:\"1\",style:{maxHeight:\"100px\"},onKeyPress:this.onEnterPress}),/*#__PURE__*/_jsx(\"button\",{className:\"sendMessage\",children:\"Send\"})]})]});}}]);return ChatBox;}(React.Component);export default ChatBox;","map":{"version":3,"sources":["/home/abdullah/steam_achievement_tracker-main/achievement-tracker/src/react-components/ChatBox/index.js"],"names":["React","useRef","ENV","io","getMessages","API_HOST","api_host","ChatBox","props","onEnterPress","e","key","shiftKey","preventDefault","onSubmit","text","messages","chatRoomId","socket","connect","state","on","data","newMessages","push","setState","myRef","createRef","onChange","bind","checkMessagePerson","undefined","userName","friendName","emit","name","room","prevProps","target","value","elem","style","height","toBeAddHeight","scrollHeight","content","time","Date","now","className","parentNode","children","current","scrollTop","id","message","myMessage","showChatOption","map","i","toLocaleString","maxHeight","Component"],"mappings":"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","sourcesContent":["import React, { useRef } from 'react'\nimport ENV from '../../config.js'\nimport io from 'socket.io-client'\nimport './style.css'\nimport { getMessages } from '../../actions/chat.js'\nconst API_HOST = ENV.api_host\n\nclass ChatBox extends React.Component {\n    constructor(props) {\n        super(props)\n        const text = \"\"\n        const messages = []\n        const chatRoomId = \"\"\n        const socket = io.connect(API_HOST)\n        this.state = {\n            text: text,\n            socket: socket,\n            messages: messages,\n            chatRoomId: chatRoomId\n        }\n\n\n        this.state.socket.on(\"chat\", (data) => {\n            const newMessages = this.state.messages\n            newMessages.push(data)\n            this.setState({ messages: newMessages })\n        })\n\n        this.myRef = React.createRef()\n        this.onChange = this.onChange.bind(this)\n        this.onSubmit = this.onSubmit.bind(this)\n        this.checkMessagePerson = this.checkMessagePerson.bind(this)\n        this.onEnterPress = this.onEnterPress.bind(this)\n    }\n    async componentDidMount() {\n        if (this.state.socket !== undefined) {\n            // console.log(\"connect to socket...\")\n        }\n        await getMessages(this, this.props.userName, this.props.friendName)\n        this.state.socket.emit(\"room\", { name: this.props.userName, chatRoomId: this.state.chatRoomId })\n        this.state.socket.on('joined', room => {\n            // console.log('i have joined', room)\n        })\n\n    }\n\n    async componentDidUpdate(prevProps) {\n        if (this.props.friendName !== prevProps.friendName) {\n            await getMessages(this, this.props.userName, this.props.friendName)\n            this.state.socket.emit(\"room\", { name: this.props.userName, chatRoomId: this.state.chatRoomId })\n            this.state.socket.on('joined', room => {\n                // console.log('I have joined', room)\n            })\n        }\n    }\n\n    componentWillUnmount() {\n        this.state.socket.emit(\"close\")\n        // console.log(\"disconnect from socket...\")\n    }\n\n    onChange(e) {\n        this.setState({ text: e.target.value })\n        const elem = e.target\n        elem.style.height = \"1px\"\n        const toBeAddHeight = (elem.scrollHeight) + \"px\";\n        elem.style.height = toBeAddHeight\n    }\n\n    onEnterPress = (e) => {\n        if (e.key === \"Enter\" && !e.shiftKey) {\n            e.preventDefault();\n            this.onSubmit(e)\n          }\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n        //check if its empty message\n        if (this.state.text === \"\") {\n            return;\n        }\n        let target = e.target\n        const data = {\n            name: this.props.userName,\n            content: this.state.text,\n            time: Date.now()\n        }\n        //change textarea height back to normal\n        if (e.target.className !== 'chatMessage'){\n            target = target.parentNode\n        }\n        target.children[0].style.height = \"70%\"\n        //update our own message\n        const newMessages = this.state.messages\n        newMessages.push(data)\n        this.setState({ messages: newMessages })\n        //auto scroll the chatbox to bottom\n        this.myRef.current.scrollTop = 0\n        //send message through socket\n        this.state.socket.emit('chat', { id: this.state.chatRoomId, data: data })\n\n        this.setState({ text: \"\" });\n    }\n\n    checkMessagePerson(message) {\n        //Me will be change to the current user\n        const myMessage = message.name == this.props.userName;\n        const className = myMessage ? \"my-message\" : \"other-message\"\n        return className\n    }\n\n\n    render() {\n        const { friendName, showChatOption } = this.props\n        return (\n            <div className='chatBox'>\n                <div className='chatTitle'>\n                    <div className='chatName'>{friendName}</div>\n                    <button className='closeChatButton' onClick={showChatOption}>X</button>\n                </div>\n                <div className='chatBody' ref={this.myRef}>\n                    <div>\n                        <ul className='messageList'>\n                            {this.state.messages.map((message, i) => {\n                                return (<li className={this.checkMessagePerson(message) + \"-wrapper\"} key={i}>\n                                    <div className={this.checkMessagePerson(message)}>\n                                        <div className='person-name'>\n                                            {message.name}\n                                        </div>\n                                        <div className='text'>\n                                            {message.content}\n                                        </div>\n                                    </div>\n                                    <div className={'chatMessageTime-' + this.checkMessagePerson(message)}>\n                                        {new Date(message.time).toLocaleString('en-US')}\n                                    </div>\n                                </li>)\n                            })}\n                        </ul>\n                    </div>\n                </div>\n                <form className='chatMessage' onSubmit={e => this.onSubmit(e)}>\n                    <textarea\n                        className='message'\n                        onChange={e => this.onChange(e)}\n                        placeholder=\"Enter message\"\n                        value={this.state.text}\n                        rows=\"1\"\n                        style={{ maxHeight: \"100px\" }}\n                        onKeyPress={this.onEnterPress}\n                    >\n                    </textarea>\n                    <button className='sendMessage'>Send</button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default ChatBox;"]},"metadata":{},"sourceType":"module"}