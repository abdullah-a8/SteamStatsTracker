{"ast":null,"code":"var _jsxFileName = \"/home/abdullah/steam_achievement_tracker-main/achievement-tracker/src/react-components/GameAchievements/index.js\";\nimport React from 'react';\nimport { CurrentHeaderButton, HeaderButton, HeaderImage, HeadContainer, HeaderNavBar } from '../HeaderComponent';\nimport logo from './../../steamIcon2.png';\nimport profilePic from \"../AccountSettings/imgs/sampleProfilePic.jpg\";\nimport { logout } from '../../actions/reactAuth';\nimport { PersonalPic, BannerContainer, BannerLink } from '../PersonalBanner';\nimport { AchievementContainer, Game } from '../Achievement';\nimport './style.css';\nimport { getImage } from '../../actions/profilePic';\nimport { getAchievementStats, getGameSchema } from '../../actions/steamHelpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst dateFormat = require('dateformat');\n\nclass GameAchievements extends React.Component {\n  constructor(props) {\n    super(props);\n    let gameName = \"\";\n    let userName = \"\";\n    let reputation = 0;\n    let gameId = \"\";\n\n    if (this.props.location.state === undefined) {\n      this.props.history.push('/dashboard');\n    } else {\n      gameName = this.props.location.state.gameName;\n      userName = this.props.location.state.userName;\n      reputation = this.props.location.state.reputation;\n      gameId = this.props.location.state.gameId;\n    }\n\n    const achievementsList = [];\n    const searchAchievementName = \"\";\n    this.state = {\n      searchAchievementName: searchAchievementName,\n      gameName: gameName,\n      userName: userName,\n      reputation: reputation,\n      gameId: gameId,\n      achievementsList: achievementsList,\n      image: \"\"\n    };\n    this.onChangeGameSearch = this.onChangeGameSearch.bind(this);\n    this.onSubmitGameSearch = this.onSubmitGameSearch.bind(this);\n    this.getStats = this.getStats.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.props.location.state !== undefined) {\n      this.getStats(this.state.gameId);\n    }\n\n    getImage(this.state.userName, this);\n  }\n\n  async getStats(id) {\n    const achievementsList = [];\n    const data = await getAchievementStats(id);\n    const apiAchievement = await getGameSchema(id);\n    const achievements = data.achievements;\n\n    for (let i = 0; i < achievements.length; i++) {\n      const obj = {};\n      const key = achievements[i].apiname;\n      obj.image = apiAchievement[key].icon;\n      obj.name = apiAchievement[key].displayName;\n      obj.achieved = achievements[i].achieved;\n\n      if (achievements[i].unlocktime === 0) {\n        obj.achievedTime = \"N/A\";\n      } else {\n        const date = new Date(achievements[i].unlocktime * 1000);\n        obj.achievedTime = dateFormat(date, \"dd/mm/yyyy hh:MM:ss tt\");\n      }\n\n      achievementsList.push(obj);\n    }\n\n    this.setState({\n      achievementsList: achievementsList\n    });\n  }\n\n  onChangeGameSearch(e) {\n    this.setState({\n      searchAchievementName: e.target.value\n    });\n  }\n\n  onSubmitGameSearch(e) {\n    e.preventDefault();\n    this.setState({\n      searchAchievementName: \"\"\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(HeadContainer, {\n        bgId: \"dashboard\",\n        children: /*#__PURE__*/_jsxDEV(HeaderNavBar, {\n          children: [/*#__PURE__*/_jsxDEV(HeaderImage, {\n            to: \"/dashboard\",\n            src: logo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"group\",\n            children: [/*#__PURE__*/_jsxDEV(CurrentHeaderButton, {\n              path: \"/Dashboard\",\n              children: \"Dashboard\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(HeaderButton, {\n              path: \"/reviewForum\",\n              children: \"Forum\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(HeaderButton, {\n              path: \"/Analytics\",\n              children: \"Analytics\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(HeaderButton, {\n              path: \"/AccountSettings\",\n              children: \"Settings\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(HeaderButton, {\n              path: \"/\",\n              logoutFunc: () => {\n                logout(this.props.app);\n              },\n              children: \"Log Out\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gameAchivementBody\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gameAchivementBodyLeft\",\n          children: /*#__PURE__*/_jsxDEV(BannerContainer, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"bannerUserInfo\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                id: \"bannerUserName\",\n                children: [\"User Name: \", this.state.userName]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 15\n            }, this), this.state.image === \"\" ? /*#__PURE__*/_jsxDEV(PersonalPic, {\n              src: profilePic\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(PersonalPic, {\n              src: \"data:image/png;base64,\" + this.state.image\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"bannerReputation\",\n              children: [\"Reputation: \", this.state.reputation]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"bannerLeftLinkGroup\",\n              children: [/*#__PURE__*/_jsxDEV(BannerLink, {\n                path: \"https://discord.com\",\n                children: \"Discord\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(BannerLink, {\n                path: \"https://twitter.com\",\n                children: \"Twitter\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(BannerLink, {\n                path: \"https://www.facebook.com\",\n                children: \"Facebook\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(BannerLink, {\n                path: \"https://store.steampowered.com\",\n                children: \"Steam\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gameAchivementBodyMiddle\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: \"white\"\n            },\n            children: this.state.gameName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            className: \"searchGame\",\n            onSubmit: e => this.onSubmitGameSearch(e),\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"searchGameInput\",\n              placeholder: \"Search for an Achievement...\",\n              value: this.state.searchGameName,\n              onChange: e => this.onChangeGameSearch(e)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(AchievementContainer, {\n            bodyId: \"fullLength\",\n            children: this.state.achievementsList.map((item, i) => {\n              if (item.name.toLowerCase().startsWith(this.state.searchAchievementName.toLowerCase())) {\n                let isAchievedBg = \"#525252\";\n                let opac;\n\n                if (item.achieved == 0) {\n                  opac = \"0.4\";\n                } else {\n                  opac = \"1\";\n                }\n\n                return /*#__PURE__*/_jsxDEV(Game, {\n                  image: item.image,\n                  isAchievedBg: isAchievedBg,\n                  opac: opac,\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"AchievementName\",\n                    children: item.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 147,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"AchievedTime\",\n                    children: item.achievedTime\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 148,\n                    columnNumber: 23\n                  }, this)]\n                }, i, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 146,\n                  columnNumber: 21\n                }, this);\n              }\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default GameAchievements;","map":{"version":3,"sources":["/home/abdullah/steam_achievement_tracker-main/achievement-tracker/src/react-components/GameAchievements/index.js"],"names":["React","CurrentHeaderButton","HeaderButton","HeaderImage","HeadContainer","HeaderNavBar","logo","profilePic","logout","PersonalPic","BannerContainer","BannerLink","AchievementContainer","Game","getImage","getAchievementStats","getGameSchema","dateFormat","require","GameAchievements","Component","constructor","props","gameName","userName","reputation","gameId","location","state","undefined","history","push","achievementsList","searchAchievementName","image","onChangeGameSearch","bind","onSubmitGameSearch","getStats","componentDidMount","id","data","apiAchievement","achievements","i","length","obj","key","apiname","icon","name","displayName","achieved","unlocktime","achievedTime","date","Date","setState","e","target","value","preventDefault","render","app","color","searchGameName","map","item","toLowerCase","startsWith","isAchievedBg","opac"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport { CurrentHeaderButton, HeaderButton, HeaderImage, HeadContainer, HeaderNavBar } from '../HeaderComponent'\nimport logo from './../../steamIcon2.png'\nimport profilePic from \"../AccountSettings/imgs/sampleProfilePic.jpg\"\nimport { logout } from '../../actions/reactAuth'\nimport { PersonalPic, BannerContainer, BannerLink } from '../PersonalBanner'\nimport { AchievementContainer, Game } from '../Achievement'\nimport './style.css';\nimport { getImage } from '../../actions/profilePic'\nimport { getAchievementStats, getGameSchema } from '../../actions/steamHelpers'\nconst dateFormat = require('dateformat');\n\nclass GameAchievements extends React.Component {\n  constructor(props) {\n    super(props)\n\n    let gameName = \"\"\n    let userName = \"\"\n    let reputation = 0\n    let gameId = \"\"\n\n\n\n    if (this.props.location.state === undefined) {\n      this.props.history.push('/dashboard')\n    } else {\n      gameName = this.props.location.state.gameName\n      userName = this.props.location.state.userName\n      reputation = this.props.location.state.reputation\n      gameId = this.props.location.state.gameId\n    }\n\n\n    const achievementsList = []\n    const searchAchievementName = \"\"\n\n    this.state = {\n      searchAchievementName: searchAchievementName,\n      gameName: gameName,\n      userName: userName,\n      reputation: reputation,\n      gameId: gameId,\n      achievementsList: achievementsList,\n      image: \"\"\n    }\n    this.onChangeGameSearch = this.onChangeGameSearch.bind(this)\n    this.onSubmitGameSearch = this.onSubmitGameSearch.bind(this)\n    this.getStats = this.getStats.bind(this)\n  }\n\n  componentDidMount() {\n    if (this.props.location.state !== undefined) {\n      this.getStats(this.state.gameId)\n    }\n    getImage(this.state.userName, this)\n  }\n\n  async getStats(id) {\n    const achievementsList = []\n    const data = await getAchievementStats(id)\n    const apiAchievement = await getGameSchema(id)\n    const achievements = data.achievements\n    for (let i = 0; i < achievements.length; i++) {\n      const obj = {}\n      const key = achievements[i].apiname\n      obj.image = apiAchievement[key].icon\n      obj.name = apiAchievement[key].displayName\n      obj.achieved = achievements[i].achieved\n      if (achievements[i].unlocktime === 0) {\n        obj.achievedTime = \"N/A\"\n      } else {\n        const date = new Date(achievements[i].unlocktime * 1000)\n        obj.achievedTime = dateFormat(date, \"dd/mm/yyyy hh:MM:ss tt\")\n      }\n      achievementsList.push(obj)\n    }\n    this.setState({ achievementsList: achievementsList })\n  }\n\n  onChangeGameSearch(e) {\n    this.setState({ searchAchievementName: e.target.value })\n  }\n\n  onSubmitGameSearch(e) {\n    e.preventDefault()\n    this.setState({ searchAchievementName: \"\" })\n  }\n\n  render() {\n    return (\n      <>\n        <HeadContainer bgId={\"dashboard\"}>\n          <HeaderNavBar>\n            <HeaderImage to='/dashboard' src={logo} />\n            <div className='group'>\n              {/* {this.state.isAdmin && (<HeaderButton path='/admin'>Admin</HeaderButton>)} */}\n              <CurrentHeaderButton path='/Dashboard'>Dashboard</CurrentHeaderButton>\n              <HeaderButton path='/reviewForum'>Forum</HeaderButton>\n              <HeaderButton path='/Analytics'>Analytics</HeaderButton>\n              <HeaderButton path='/AccountSettings'>Settings</HeaderButton>\n              <HeaderButton path='/' logoutFunc={() => { logout(this.props.app) }}>Log Out</HeaderButton>\n            </div>\n          </HeaderNavBar>\n        </HeadContainer>\n        <div className='gameAchivementBody'>\n          <div className='gameAchivementBodyLeft'>\n            <BannerContainer>\n              <div className=\"bannerUserInfo\">\n                <div id=\"bannerUserName\">User Name: {this.state.userName}</div>\n              </div>\n              {this.state.image === \"\" ?\n                <PersonalPic src={profilePic} /> :\n                <PersonalPic src={\"data:image/png;base64,\" + this.state.image} />\n              }\n              <span className=\"bannerReputation\">Reputation: {this.state.reputation}</span>\n              <div className=\"bannerLeftLinkGroup\">\n                <BannerLink path=\"https://discord.com\">Discord</BannerLink>\n                <BannerLink path='https://twitter.com'>Twitter</BannerLink>\n                <BannerLink path='https://www.facebook.com'>Facebook</BannerLink>\n                <BannerLink path='https://store.steampowered.com'>Steam</BannerLink>\n              </div>\n            </BannerContainer>\n          </div>\n          <div className='gameAchivementBodyMiddle'>\n            <p style={{ color: \"white\" }}>{this.state.gameName}</p>\n            <form className=\"searchGame\" onSubmit={e => this.onSubmitGameSearch(e)}>\n              <input\n                className=\"searchGameInput\"\n                placeholder=\"Search for an Achievement...\"\n                value={this.state.searchGameName}\n                onChange={e => this.onChangeGameSearch(e)}\n              />\n            </form>\n            <AchievementContainer bodyId={\"fullLength\"}>\n              {this.state.achievementsList.map((item, i) => {\n                if (item.name.toLowerCase().startsWith(this.state.searchAchievementName.toLowerCase())) {\n                  let isAchievedBg = \"#525252\";\n                  let opac;\n                  if (item.achieved == 0) {\n                    opac = \"0.4\"\n                  } else {\n                    opac = \"1\"\n                  }\n                  return (\n                    <Game key={i} image={item.image} isAchievedBg={isAchievedBg} opac={opac}>\n                      <div className=\"AchievementName\">{item.name}</div>\n                      <div className=\"AchievedTime\">{item.achievedTime}</div>\n                    </Game>\n                  )\n                }\n              })}\n            </AchievementContainer>\n          </div>\n        </div>\n      </>\n    )\n  }\n}\n\nexport default GameAchievements;\n"]},"metadata":{},"sourceType":"module"}