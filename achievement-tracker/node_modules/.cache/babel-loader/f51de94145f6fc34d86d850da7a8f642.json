{"ast":null,"code":"import _regeneratorRuntime from\"/home/abdullah/steam_achievement_tracker-main/achievement-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/abdullah/steam_achievement_tracker-main/achievement-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import ENV from'./../config.js';var API_HOST=ENV.api_host;export var storeImage=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(Comp){var url,binaryFile,imageObject,request;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:url=\"\".concat(API_HOST,\"/api/uploadImage/\").concat(Comp.state.userName);binaryFile=Comp.state.uploadImage;imageObject={image:binaryFile};request=new Request(url,{method:'PATCH',body:JSON.stringify(imageObject),headers:{Accept:\"application/json, text/plain, */*\",\"Content-Type\":\"application/json\"}});_context.next=6;return fetch(request).then(function(res){if(res.status===200){Comp.setState({image:binaryFile,uploadImage:\"\"});}else{alert(\"Could not update profile picture\");}});case 6:case\"end\":return _context.stop();}}},_callee);}));return function storeImage(_x){return _ref.apply(this,arguments);};}();export var getImage=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(userName,Comp){var url;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:url=\"\".concat(API_HOST,\"/api/image/\").concat(userName);_context2.next=3;return fetch(url).then(function(res){if(res.status===200){return res.json();}else{alert(\"Cannot get Profile Images\");}}).then(function(json){Comp.setState({image:json.image});}).catch(function(error){console.log(error);});case 3:case\"end\":return _context2.stop();}}},_callee2);}));return function getImage(_x2,_x3){return _ref2.apply(this,arguments);};}();","map":{"version":3,"sources":["/home/abdullah/steam_achievement_tracker-main/achievement-tracker/src/actions/profilePic.js"],"names":["ENV","API_HOST","api_host","storeImage","Comp","url","state","userName","binaryFile","uploadImage","imageObject","image","request","Request","method","body","JSON","stringify","headers","Accept","fetch","then","res","status","setState","alert","getImage","json","catch","error","console","log"],"mappings":"6WAAA,MAAOA,CAAAA,GAAP,KAAgB,gBAAhB,CACA,GAAMC,CAAAA,QAAQ,CAAGD,GAAG,CAACE,QAArB,CAEA,MAAO,IAAMC,CAAAA,UAAU,0FAAG,iBAAOC,IAAP,yJAChBC,GADgB,WACPJ,QADO,6BACqBG,IAAI,CAACE,KAAL,CAAWC,QADhC,EAEhBC,UAFgB,CAEHJ,IAAI,CAACE,KAAL,CAAWG,WAFR,CAGhBC,WAHgB,CAGF,CAAEC,KAAK,CAAEH,UAAT,CAHE,CAKhBI,OALgB,CAKN,GAAIC,CAAAA,OAAJ,CAAYR,GAAZ,CAAiB,CAC7BS,MAAM,CAAE,OADqB,CAE7BC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAeP,WAAf,CAFuB,CAG7BQ,OAAO,CAAE,CACLC,MAAM,CAAE,mCADH,CAEL,eAAgB,kBAFX,CAHoB,CAAjB,CALM,uBAahBC,CAAAA,KAAK,CAACR,OAAD,CAAL,CACDS,IADC,CACI,SAAAC,GAAG,CAAI,CACT,GAAIA,GAAG,CAACC,MAAJ,GAAe,GAAnB,CAAwB,CACpBnB,IAAI,CAACoB,QAAL,CAAc,CAAEb,KAAK,CAAEH,UAAT,CAAqBC,WAAW,CAAE,EAAlC,CAAd,EACH,CAFD,IAEO,CACHgB,KAAK,CAAC,kCAAD,CAAL,CACH,CACJ,CAPC,CAbgB,uDAAH,kBAAVtB,CAAAA,UAAU,4CAAhB,CAwBP,MAAO,IAAMuB,CAAAA,QAAQ,2FAAG,kBAAOnB,QAAP,CAAiBH,IAAjB,8HACdC,GADc,WACLJ,QADK,uBACiBM,QADjB,yBAGda,CAAAA,KAAK,CAACf,GAAD,CAAL,CACDgB,IADC,CACI,SAAAC,GAAG,CAAI,CACT,GAAIA,GAAG,CAACC,MAAJ,GAAe,GAAnB,CAAwB,CACpB,MAAOD,CAAAA,GAAG,CAACK,IAAJ,EAAP,CACH,CAFD,IAEO,CACHF,KAAK,CAAC,2BAAD,CAAL,CACH,CACJ,CAPC,EAQDJ,IARC,CAQI,SAAAM,IAAI,CAAI,CACVvB,IAAI,CAACoB,QAAL,CAAc,CAAEb,KAAK,CAAEgB,IAAI,CAAChB,KAAd,CAAd,EACH,CAVC,EAWDiB,KAXC,CAWK,SAAAC,KAAK,CAAI,CACZC,OAAO,CAACC,GAAR,CAAYF,KAAZ,EACH,CAbC,CAHc,yDAAH,kBAARH,CAAAA,QAAQ,kDAAd","sourcesContent":["import ENV from './../config.js'\nconst API_HOST = ENV.api_host\n\nexport const storeImage = async (Comp) => {\n    const url = `${API_HOST}/api/uploadImage/${Comp.state.userName}`\n    const binaryFile = Comp.state.uploadImage\n    const imageObject = { image: binaryFile }\n\n    const request = new Request(url, {\n        method: 'PATCH',\n        body: JSON.stringify(imageObject),\n        headers: {\n            Accept: \"application/json, text/plain, */*\",\n            \"Content-Type\": \"application/json\"\n        }\n    })\n    await fetch(request)\n        .then(res => {\n            if (res.status === 200) {\n                Comp.setState({ image: binaryFile, uploadImage: \"\" })\n            } else {\n                alert(\"Could not update profile picture\")\n            }\n        })\n\n}\n\nexport const getImage = async (userName, Comp) => {\n    const url = `${API_HOST}/api/image/${userName}`\n\n    await fetch(url)\n        .then(res => {\n            if (res.status === 200) {\n                return res.json()\n            } else {\n                alert(\"Cannot get Profile Images\")\n            }\n        })\n        .then(json => {\n            Comp.setState({ image: json.image })\n        })\n        .catch(error => {\n            console.log(error);\n        });\n}"]},"metadata":{},"sourceType":"module"}