{"ast":null,"code":"var log=console.log;export var addVoteRecord=function addVoteRecord(voteRecord){var url='/api/voteRecords';var request=new Request(url,{method:'post',body:JSON.stringify(voteRecord),headers:{'Accept':'application/json, text/plain, */*','Content-Type':'application/json'}});fetch(request).then(function(res){if(res.status===200){log(\"New vote record saved\");}else{log(\"Error: Cannot add vote record\");}}).catch(function(error){log(error);});};export var getVoteRecords=function getVoteRecords(forum){var url='/api/voteRecords';fetch(url).then(function(res){if(res.status===200){return res.json();}else{log('Error: Cannot get vote record');}}).then(function(json){forum.setState({voteRecords:json.voteRecords});}).catch(function(error){log(error);});};export var updateVoteRecord=function updateVoteRecord(voteRecord){var url=\"/api/voteRecords/\".concat(voteRecord.username,\"/\").concat(voteRecord.reviewId);var request=new Request(url,{method:'PATCH',body:JSON.stringify(voteRecord),headers:{'Accept':'application/json, text/plain, */*','Content-Type':'application/json'}});fetch(request).then(function(res){if(res.status===200){log(\"New vote record saved\");}else{log(\"Error: Cannot update vote record\");}}).catch(function(error){log(error);});};export var deleteVoteRecordByUser=function deleteVoteRecordByUser(username){var url=\"/api/voteRecords/\".concat(username);var request=new Request(url,{method:'delete',body:JSON.stringify({}),headers:{'Accept':'application/json, text/plain, */*','Content-Type':'application/json'}});fetch(request).then(function(res){if(res.status===200){log(\"All vote records of user \".concat(username,\" deleted\"));}else{log(\"Error: Cannot delete vote records\");}}).catch(function(error){log(error);});};export var deleteVoteRecordByReview=function deleteVoteRecordByReview(username,reviewId){var url=\"/api/voteRecords/\".concat(username,\"/\").concat(reviewId);var request=new Request(url,{method:'delete',body:JSON.stringify({}),headers:{'Accept':'application/json, text/plain, */*','Content-Type':'application/json'}});fetch(request).then(function(res){if(res.status===200){log(\"All vote records of this review deleted\");}else{log(\"Error: Cannot delete vote records\");}}).catch(function(error){log(error);});};","map":{"version":3,"sources":["/home/abdullah/steam_achievement_tracker-main/achievement-tracker/src/actions/voteRecord.js"],"names":["log","console","addVoteRecord","voteRecord","url","request","Request","method","body","JSON","stringify","headers","fetch","then","res","status","catch","error","getVoteRecords","forum","json","setState","voteRecords","updateVoteRecord","username","reviewId","deleteVoteRecordByUser","deleteVoteRecordByReview"],"mappings":"AAAA,GAAMA,CAAAA,GAAG,CAAGC,OAAO,CAACD,GAApB,CAEA,MAAO,IAAME,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,UAAD,CAAgB,CACzC,GAAMC,CAAAA,GAAG,CAAG,kBAAZ,CACA,GAAMC,CAAAA,OAAO,CAAG,GAAIC,CAAAA,OAAJ,CAAYF,GAAZ,CAAiB,CAC7BG,MAAM,CAAE,MADqB,CAE7BC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAeP,UAAf,CAFuB,CAG7BQ,OAAO,CAAE,CACL,SAAU,mCADL,CAEL,eAAgB,kBAFX,CAHoB,CAAjB,CAAhB,CASAC,KAAK,CAACP,OAAD,CAAL,CACKQ,IADL,CACU,SAAUC,GAAV,CAAe,CACjB,GAAIA,GAAG,CAACC,MAAJ,GAAe,GAAnB,CAAwB,CACpBf,GAAG,CAAC,uBAAD,CAAH,CACH,CAFD,IAEO,CACHA,GAAG,CAAC,+BAAD,CAAH,CACH,CACJ,CAPL,EAOOgB,KAPP,CAOa,SAACC,KAAD,CAAW,CAChBjB,GAAG,CAACiB,KAAD,CAAH,CACH,CATL,EAUH,CArBM,CAuBP,MAAO,IAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,KAAD,CAAW,CACrC,GAAMf,CAAAA,GAAG,CAAG,kBAAZ,CAEAQ,KAAK,CAACR,GAAD,CAAL,CACKS,IADL,CACU,SAACC,GAAD,CAAS,CACX,GAAIA,GAAG,CAACC,MAAJ,GAAe,GAAnB,CAAwB,CACpB,MAAOD,CAAAA,GAAG,CAACM,IAAJ,EAAP,CACH,CAFD,IAEO,CACHpB,GAAG,CAAC,+BAAD,CAAH,CACH,CACJ,CAPL,EAQKa,IARL,CAQU,SAACO,IAAD,CAAU,CACZD,KAAK,CAACE,QAAN,CAAe,CACXC,WAAW,CAAEF,IAAI,CAACE,WADP,CAAf,EAGH,CAZL,EAaKN,KAbL,CAaW,SAACC,KAAD,CAAW,CACdjB,GAAG,CAACiB,KAAD,CAAH,CACH,CAfL,EAgBH,CAnBM,CAqBP,MAAO,IAAMM,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACpB,UAAD,CAAgB,CAC5C,GAAMC,CAAAA,GAAG,4BAAuBD,UAAU,CAACqB,QAAlC,aAA8CrB,UAAU,CAACsB,QAAzD,CAAT,CAEA,GAAMpB,CAAAA,OAAO,CAAG,GAAIC,CAAAA,OAAJ,CAAYF,GAAZ,CAAiB,CAC7BG,MAAM,CAAE,OADqB,CAE7BC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAeP,UAAf,CAFuB,CAG7BQ,OAAO,CAAE,CACL,SAAU,mCADL,CAEL,eAAgB,kBAFX,CAHoB,CAAjB,CAAhB,CASAC,KAAK,CAACP,OAAD,CAAL,CACKQ,IADL,CACU,SAAUC,GAAV,CAAe,CACjB,GAAIA,GAAG,CAACC,MAAJ,GAAe,GAAnB,CAAwB,CACpBf,GAAG,CAAC,uBAAD,CAAH,CACH,CAFD,IAEO,CACHA,GAAG,CAAC,kCAAD,CAAH,CACH,CACJ,CAPL,EAOOgB,KAPP,CAOa,SAACC,KAAD,CAAW,CAChBjB,GAAG,CAACiB,KAAD,CAAH,CACH,CATL,EAUH,CAtBM,CAwBP,MAAO,IAAMS,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,CAACF,QAAD,CAAc,CAChD,GAAMpB,CAAAA,GAAG,4BAAuBoB,QAAvB,CAAT,CAEA,GAAMnB,CAAAA,OAAO,CAAG,GAAIC,CAAAA,OAAJ,CAAYF,GAAZ,CAAiB,CAC7BG,MAAM,CAAE,QADqB,CAE7BC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,EAAf,CAFuB,CAG7BC,OAAO,CAAE,CACL,SAAU,mCADL,CAEL,eAAgB,kBAFX,CAHoB,CAAjB,CAAhB,CASAC,KAAK,CAACP,OAAD,CAAL,CACKQ,IADL,CACU,SAAUC,GAAV,CAAe,CACjB,GAAIA,GAAG,CAACC,MAAJ,GAAe,GAAnB,CAAwB,CACpBf,GAAG,oCAA6BwB,QAA7B,aAAH,CACH,CAFD,IAEO,CACHxB,GAAG,CAAC,mCAAD,CAAH,CACH,CACJ,CAPL,EAOOgB,KAPP,CAOa,SAACC,KAAD,CAAW,CAChBjB,GAAG,CAACiB,KAAD,CAAH,CACH,CATL,EAUH,CAtBM,CAwBP,MAAO,IAAMU,CAAAA,wBAAwB,CAAG,QAA3BA,CAAAA,wBAA2B,CAACH,QAAD,CAAWC,QAAX,CAAwB,CAC5D,GAAMrB,CAAAA,GAAG,4BAAuBoB,QAAvB,aAAmCC,QAAnC,CAAT,CAEA,GAAMpB,CAAAA,OAAO,CAAG,GAAIC,CAAAA,OAAJ,CAAYF,GAAZ,CAAiB,CAC7BG,MAAM,CAAE,QADqB,CAE7BC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,EAAf,CAFuB,CAG7BC,OAAO,CAAE,CACL,SAAU,mCADL,CAEL,eAAgB,kBAFX,CAHoB,CAAjB,CAAhB,CASAC,KAAK,CAACP,OAAD,CAAL,CACKQ,IADL,CACU,SAAUC,GAAV,CAAe,CACjB,GAAIA,GAAG,CAACC,MAAJ,GAAe,GAAnB,CAAwB,CACpBf,GAAG,2CAAH,CACH,CAFD,IAEO,CACHA,GAAG,CAAC,mCAAD,CAAH,CACH,CACJ,CAPL,EAOOgB,KAPP,CAOa,SAACC,KAAD,CAAW,CAChBjB,GAAG,CAACiB,KAAD,CAAH,CACH,CATL,EAUH,CAtBM","sourcesContent":["const log = console.log\n\nexport const addVoteRecord = (voteRecord) => {\n    const url = '/api/voteRecords'\n    const request = new Request(url, {\n        method: 'post',\n        body: JSON.stringify(voteRecord),\n        headers: {\n            'Accept': 'application/json, text/plain, */*',\n            'Content-Type': 'application/json'\n        }\n    })\n\n    fetch(request)\n        .then(function (res) {\n            if (res.status === 200) {\n                log(\"New vote record saved\")\n            } else {\n                log(\"Error: Cannot add vote record\")\n            }\n        }).catch((error) => {\n            log(error)\n        })\n}\n\nexport const getVoteRecords = (forum) => {\n    const url = '/api/voteRecords'\n\n    fetch(url)\n        .then((res) => {\n            if (res.status === 200) {\n                return res.json()\n            } else {\n                log('Error: Cannot get vote record')\n            }\n        })\n        .then((json) => {\n            forum.setState({\n                voteRecords: json.voteRecords\n            })\n        })\n        .catch((error) => {\n            log(error)\n        })\n}\n\nexport const updateVoteRecord = (voteRecord) => {\n    const url = `/api/voteRecords/${voteRecord.username}/${voteRecord.reviewId}`\n\n    const request = new Request(url, {\n        method: 'PATCH',\n        body: JSON.stringify(voteRecord),\n        headers: {\n            'Accept': 'application/json, text/plain, */*',\n            'Content-Type': 'application/json'\n        }\n    })\n\n    fetch(request)\n        .then(function (res) {\n            if (res.status === 200) {\n                log(\"New vote record saved\")\n            } else {\n                log(\"Error: Cannot update vote record\")\n            }\n        }).catch((error) => {\n            log(error)\n        })\n}\n\nexport const deleteVoteRecordByUser = (username) => {\n    const url = `/api/voteRecords/${username}`\n\n    const request = new Request(url, {\n        method: 'delete',\n        body: JSON.stringify({}),\n        headers: {\n            'Accept': 'application/json, text/plain, */*',\n            'Content-Type': 'application/json'\n        }\n    })\n\n    fetch(request)\n        .then(function (res) {\n            if (res.status === 200) {\n                log(`All vote records of user ${username} deleted`)\n            } else {\n                log(\"Error: Cannot delete vote records\")\n            }\n        }).catch((error) => {\n            log(error)\n        })\n}\n\nexport const deleteVoteRecordByReview = (username, reviewId) => {\n    const url = `/api/voteRecords/${username}/${reviewId}`\n\n    const request = new Request(url, {\n        method: 'delete',\n        body: JSON.stringify({}),\n        headers: {\n            'Accept': 'application/json, text/plain, */*',\n            'Content-Type': 'application/json'\n        }\n    })\n\n    fetch(request)\n        .then(function (res) {\n            if (res.status === 200) {\n                log(`All vote records of this review deleted`)\n            } else {\n                log(\"Error: Cannot delete vote records\")\n            }\n        }).catch((error) => {\n            log(error)\n        })\n}"]},"metadata":{},"sourceType":"module"}