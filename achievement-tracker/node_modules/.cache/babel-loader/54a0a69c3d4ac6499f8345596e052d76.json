{"ast":null,"code":"const log = console.log;\nexport const addVoteRecord = voteRecord => {\n  const url = '/api/voteRecords';\n  const request = new Request(url, {\n    method: 'post',\n    body: JSON.stringify(voteRecord),\n    headers: {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': 'application/json'\n    }\n  });\n  fetch(request).then(function (res) {\n    if (res.status === 200) {\n      log(\"New vote record saved\");\n    } else {\n      log(\"Error: Cannot add vote record\");\n    }\n  }).catch(error => {\n    log(error);\n  });\n};\nexport const getVoteRecords = forum => {\n  const url = '/api/voteRecords';\n  fetch(url).then(res => {\n    if (res.status === 200) {\n      return res.json();\n    } else {\n      log('Error: Cannot get vote record');\n    }\n  }).then(json => {\n    forum.setState({\n      voteRecords: json.voteRecords\n    });\n  }).catch(error => {\n    log(error);\n  });\n};\nexport const updateVoteRecord = voteRecord => {\n  const url = `/api/voteRecords/${voteRecord.username}/${voteRecord.reviewId}`;\n  const request = new Request(url, {\n    method: 'PATCH',\n    body: JSON.stringify(voteRecord),\n    headers: {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': 'application/json'\n    }\n  });\n  fetch(request).then(function (res) {\n    if (res.status === 200) {\n      log(\"New vote record saved\");\n    } else {\n      log(\"Error: Cannot update vote record\");\n    }\n  }).catch(error => {\n    log(error);\n  });\n};\nexport const deleteVoteRecordByUser = username => {\n  const url = `/api/voteRecords/${username}`;\n  const request = new Request(url, {\n    method: 'delete',\n    body: JSON.stringify({}),\n    headers: {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': 'application/json'\n    }\n  });\n  fetch(request).then(function (res) {\n    if (res.status === 200) {\n      log(`All vote records of user ${username} deleted`);\n    } else {\n      log(\"Error: Cannot delete vote records\");\n    }\n  }).catch(error => {\n    log(error);\n  });\n};\nexport const deleteVoteRecordByReview = (username, reviewId) => {\n  const url = `/api/voteRecords/${username}/${reviewId}`;\n  const request = new Request(url, {\n    method: 'delete',\n    body: JSON.stringify({}),\n    headers: {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': 'application/json'\n    }\n  });\n  fetch(request).then(function (res) {\n    if (res.status === 200) {\n      log(`All vote records of this review deleted`);\n    } else {\n      log(\"Error: Cannot delete vote records\");\n    }\n  }).catch(error => {\n    log(error);\n  });\n};","map":{"version":3,"sources":["/home/abdullah/steam_achievement_tracker-main/achievement-tracker/src/actions/voteRecord.js"],"names":["log","console","addVoteRecord","voteRecord","url","request","Request","method","body","JSON","stringify","headers","fetch","then","res","status","catch","error","getVoteRecords","forum","json","setState","voteRecords","updateVoteRecord","username","reviewId","deleteVoteRecordByUser","deleteVoteRecordByReview"],"mappings":"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","sourcesContent":["const log = console.log\n\nexport const addVoteRecord = (voteRecord) => {\n    const url = '/api/voteRecords'\n    const request = new Request(url, {\n        method: 'post',\n        body: JSON.stringify(voteRecord),\n        headers: {\n            'Accept': 'application/json, text/plain, */*',\n            'Content-Type': 'application/json'\n        }\n    })\n\n    fetch(request)\n        .then(function (res) {\n            if (res.status === 200) {\n                log(\"New vote record saved\")\n            } else {\n                log(\"Error: Cannot add vote record\")\n            }\n        }).catch((error) => {\n            log(error)\n        })\n}\n\nexport const getVoteRecords = (forum) => {\n    const url = '/api/voteRecords'\n\n    fetch(url)\n        .then((res) => {\n            if (res.status === 200) {\n                return res.json()\n            } else {\n                log('Error: Cannot get vote record')\n            }\n        })\n        .then((json) => {\n            forum.setState({\n                voteRecords: json.voteRecords\n            })\n        })\n        .catch((error) => {\n            log(error)\n        })\n}\n\nexport const updateVoteRecord = (voteRecord) => {\n    const url = `/api/voteRecords/${voteRecord.username}/${voteRecord.reviewId}`\n\n    const request = new Request(url, {\n        method: 'PATCH',\n        body: JSON.stringify(voteRecord),\n        headers: {\n            'Accept': 'application/json, text/plain, */*',\n            'Content-Type': 'application/json'\n        }\n    })\n\n    fetch(request)\n        .then(function (res) {\n            if (res.status === 200) {\n                log(\"New vote record saved\")\n            } else {\n                log(\"Error: Cannot update vote record\")\n            }\n        }).catch((error) => {\n            log(error)\n        })\n}\n\nexport const deleteVoteRecordByUser = (username) => {\n    const url = `/api/voteRecords/${username}`\n\n    const request = new Request(url, {\n        method: 'delete',\n        body: JSON.stringify({}),\n        headers: {\n            'Accept': 'application/json, text/plain, */*',\n            'Content-Type': 'application/json'\n        }\n    })\n\n    fetch(request)\n        .then(function (res) {\n            if (res.status === 200) {\n                log(`All vote records of user ${username} deleted`)\n            } else {\n                log(\"Error: Cannot delete vote records\")\n            }\n        }).catch((error) => {\n            log(error)\n        })\n}\n\nexport const deleteVoteRecordByReview = (username, reviewId) => {\n    const url = `/api/voteRecords/${username}/${reviewId}`\n\n    const request = new Request(url, {\n        method: 'delete',\n        body: JSON.stringify({}),\n        headers: {\n            'Accept': 'application/json, text/plain, */*',\n            'Content-Type': 'application/json'\n        }\n    })\n\n    fetch(request)\n        .then(function (res) {\n            if (res.status === 200) {\n                log(`All vote records of this review deleted`)\n            } else {\n                log(\"Error: Cannot delete vote records\")\n            }\n        }).catch((error) => {\n            log(error)\n        })\n}"]},"metadata":{},"sourceType":"module"}