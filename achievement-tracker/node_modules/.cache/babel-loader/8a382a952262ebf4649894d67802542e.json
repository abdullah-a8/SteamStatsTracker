{"ast":null,"code":"// environment configutations\nimport ENV from './../config.js';\nconst API_HOST = ENV.api_host; //console.log('Current environment:', ENV.env)\n// A function to send a GET request to the web server,\n// and then loop through them and add a list element for each student\n\nexport const getFriend = friendList => {\n  // currently use leo as userName to test, will be pass in ${friendList.userName}.\n  const url = `${API_HOST}/api/friends/${friendList.state.userName}`;\n  fetch(url).then(res => {\n    if (res.status === 200) {\n      // return a promise that resolves with the JSON body\n      return res.json();\n    } else {\n      alert(\"Could not get friendList\");\n    }\n  }).then(json => {\n    // the resolved promise with the JSON body\n    let list = [];\n\n    for (let i = 0; i < json.friendList.length; i++) {\n      list.push({\n        name: json.friendList[i].name,\n        onPending: false\n      });\n    }\n\n    for (let i = 0; i < json.pendingList.length; i++) {\n      list.push({\n        name: json.pendingList[i].sender,\n        onPending: true\n      });\n    }\n\n    friendList.setState({\n      friendList: list\n    });\n  }).catch(error => {\n    console.log(error);\n  });\n}; // A function to send a POST request with a new student\n\nexport const addFriends = async dashboardComp => {\n  // the URL for the request\n  const url = `${API_HOST}/api/friends/${dashboardComp.state.userName}`; // Create our request constructor with all the parameters we need\n  //reqeust obj\n\n  const friendName = dashboardComp.state.addFriendName;\n  const obj = {\n    friendName: friendName\n  };\n  const request = new Request(url, {\n    method: \"post\",\n    body: JSON.stringify(obj),\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  await fetch(request).then(res => {\n    if (res.status === 200) {// return a promise that resolves with the JSON body\n      // const newFriendList = dashboardComp.state.friendList\n      // newFriendList.push(friendName)\n      // dashboardComp.setState({\n      //     friendList: newFriendList\n      // });\n      //alert(\"Success: Waiting for your friend to accept.\")\n    } else {\n      alert(\"Error: Friend does not exist or its pending\");\n    }\n  });\n};\nexport const deleteFriend = async (dashboardComp, friendName) => {\n  const url = `${API_HOST}/api/friends/delete`;\n  const obj = {\n    userName: dashboardComp.state.userName,\n    friendName: friendName\n  };\n  const request = new Request(url, {\n    method: \"delete\",\n    body: JSON.stringify(obj),\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  await fetch(request).then(res => {\n    if (res.status === 200) {\n      let newFriendList = dashboardComp.state.friendList;\n      newFriendList = newFriendList.filter(i => {\n        return i.name !== friendName;\n      });\n      dashboardComp.setState({\n        friendList: newFriendList\n      });\n    } else {\n      alert(\"Error\");\n    }\n  });\n};\nexport const acceptFriend = async (dashboardComp, friendName) => {\n  const url = `${API_HOST}/api/friends/accept`;\n  const obj = {\n    userName: dashboardComp.state.userName,\n    friendName: friendName\n  };\n  const request = new Request(url, {\n    method: \"PATCH\",\n    body: JSON.stringify(obj),\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  await fetch(request).then(res => {\n    if (res.status === 200) {\n      let newFriendList = dashboardComp.state.friendList;\n\n      for (let i = 0; i < newFriendList.length; i++) {\n        if (newFriendList[i].name === friendName) {\n          newFriendList[i].onPending = false;\n        }\n      }\n\n      dashboardComp.setState({\n        friendList: newFriendList\n      });\n    } else {\n      alert(\"Error\");\n    }\n  });\n};\nexport const declineFriend = async (dashboardComp, friendName) => {\n  const url = `${API_HOST}/api/friends/decline`;\n  const obj = {\n    userName: dashboardComp.state.userName,\n    friendName: friendName\n  };\n  const request = new Request(url, {\n    method: \"PATCH\",\n    body: JSON.stringify(obj),\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  await fetch(request).then(res => {\n    if (res.status === 200) {\n      let newFriendList = dashboardComp.state.friendList;\n      newFriendList = newFriendList.filter(i => {\n        return i.name !== friendName;\n      });\n      dashboardComp.setState({\n        friendList: newFriendList\n      });\n    } else {\n      alert(\"Error\");\n    }\n  });\n};","map":{"version":3,"sources":["/home/abdullah/steam_achievement_tracker-main/achievement-tracker/src/actions/friend.js"],"names":["ENV","API_HOST","api_host","getFriend","friendList","url","state","userName","fetch","then","res","status","json","alert","list","i","length","push","name","onPending","pendingList","sender","setState","catch","error","console","log","addFriends","dashboardComp","friendName","addFriendName","obj","request","Request","method","body","JSON","stringify","headers","Accept","deleteFriend","newFriendList","filter","acceptFriend","declineFriend"],"mappings":"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","sourcesContent":["\n// environment configutations\nimport ENV from './../config.js'\nconst API_HOST = ENV.api_host\n//console.log('Current environment:', ENV.env)\n\n// A function to send a GET request to the web server,\n// and then loop through them and add a list element for each student\nexport const getFriend = (friendList) => {\n    // currently use leo as userName to test, will be pass in ${friendList.userName}.\n    const url = `${API_HOST}/api/friends/${friendList.state.userName}`;\n\n    fetch(url)\n        .then(res => {\n            if (res.status === 200) {\n                // return a promise that resolves with the JSON body\n                return res.json();\n            } else {\n                alert(\"Could not get friendList\");\n            }\n        })\n        .then(json => {\n            // the resolved promise with the JSON body\n            let list = []\n            for (let i = 0; i < json.friendList.length; i++) {\n                list.push({ name: json.friendList[i].name, onPending: false })\n            }\n            for (let i = 0; i < json.pendingList.length; i++) {\n                list.push({ name: json.pendingList[i].sender, onPending: true })\n            }\n            friendList.setState({ friendList: list });\n        })\n        .catch(error => {\n            console.log(error);\n        });\n};\n\n\n// A function to send a POST request with a new student\nexport const addFriends = async (dashboardComp) => {\n    // the URL for the request\n    const url = `${API_HOST}/api/friends/${dashboardComp.state.userName}`;\n    // Create our request constructor with all the parameters we need\n    //reqeust obj\n    const friendName = dashboardComp.state.addFriendName\n    const obj = {\n        friendName: friendName\n    }\n    const request = new Request(url, {\n        method: \"post\",\n        body: JSON.stringify(obj),\n        headers: {\n            Accept: \"application/json, text/plain, */*\",\n            \"Content-Type\": \"application/json\"\n        }\n    });\n\n    await fetch(request)\n        .then(res => {\n            if (res.status === 200) {\n                // return a promise that resolves with the JSON body\n                // const newFriendList = dashboardComp.state.friendList\n                // newFriendList.push(friendName)\n                // dashboardComp.setState({\n                //     friendList: newFriendList\n                // });\n                //alert(\"Success: Waiting for your friend to accept.\")\n            } else {\n                alert(\"Error: Friend does not exist or its pending\");\n            }\n        })\n};\n\n\nexport const deleteFriend = async (dashboardComp, friendName) => {\n    const url = `${API_HOST}/api/friends/delete`;\n    const obj = {\n        userName: dashboardComp.state.userName,\n        friendName: friendName\n    }\n\n    const request = new Request(url, {\n        method: \"delete\",\n        body: JSON.stringify(obj),\n        headers: {\n            Accept: \"application/json, text/plain, */*\",\n            \"Content-Type\": \"application/json\"\n        }\n    });\n\n    await fetch(request)\n        .then(res => {\n            if (res.status === 200) {\n                let newFriendList = dashboardComp.state.friendList\n                newFriendList = newFriendList.filter((i) => { return i.name !== friendName })\n                dashboardComp.setState({\n                    friendList: newFriendList\n                });\n            } else {\n                alert(\"Error\");\n            }\n        })\n}\n\nexport const acceptFriend = async (dashboardComp, friendName) => {\n    const url = `${API_HOST}/api/friends/accept`;\n    const obj = {\n        userName: dashboardComp.state.userName,\n        friendName: friendName\n    }\n\n    const request = new Request(url, {\n        method: \"PATCH\",\n        body: JSON.stringify(obj),\n        headers: {\n            Accept: \"application/json, text/plain, */*\",\n            \"Content-Type\": \"application/json\"\n        }\n    });\n\n    await fetch(request)\n        .then(res => {\n            if (res.status === 200) {\n                let newFriendList = dashboardComp.state.friendList\n                for (let i = 0; i < newFriendList.length; i++) {\n                    if (newFriendList[i].name === friendName) {\n                        newFriendList[i].onPending = false\n                    }\n                }\n                dashboardComp.setState({\n                    friendList: newFriendList\n                });\n            } else {\n                alert(\"Error\");\n            }\n        })\n}\n\nexport const declineFriend = async (dashboardComp, friendName) => {\n    const url = `${API_HOST}/api/friends/decline`;\n    const obj = {\n        userName: dashboardComp.state.userName,\n        friendName: friendName\n    }\n\n    const request = new Request(url, {\n        method: \"PATCH\",\n        body: JSON.stringify(obj),\n        headers: {\n            Accept: \"application/json, text/plain, */*\",\n            \"Content-Type\": \"application/json\"\n        }\n    });\n\n    await fetch(request)\n        .then(res => {\n            if (res.status === 200) {\n                let newFriendList = dashboardComp.state.friendList\n                newFriendList = newFriendList.filter(i => { return i.name !== friendName })\n                dashboardComp.setState({\n                    friendList: newFriendList\n                });\n            } else {\n                alert(\"Error\");\n            }\n        })\n}"]},"metadata":{},"sourceType":"module"}