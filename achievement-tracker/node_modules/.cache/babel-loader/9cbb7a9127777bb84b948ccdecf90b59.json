{"ast":null,"code":"const log = console.log;\nexport const addReviewOnForum = review => {\n  const url = '/api/reviews';\n  const request = new Request(url, {\n    method: 'post',\n    body: JSON.stringify(review),\n    headers: {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': 'application/json'\n    }\n  });\n  fetch(request).then(function (res) {\n    if (res.status === 200) {\n      log(\"New review saved\");\n    } else {\n      log(\"Error: Cannot add review\");\n    }\n\n    log(res);\n  }).catch(error => {\n    log(error);\n  });\n};\nexport const getReviewsOnForum = (forum, reviewNumLimit) => {\n  const url = '/api/reviews';\n  fetch(url).then(res => {\n    if (res.status === 200) {\n      return res.json();\n    } else {\n      log('Error: Cannot get reviews');\n    }\n  }).then(json => {\n    forum.setState({\n      reviews: json.reviews,\n      reviewsInSection: json.reviews,\n      reviewsOnPage: json.reviews.slice(0, reviewNumLimit)\n    });\n  }).catch(error => {\n    log(error);\n  });\n};\nexport const getReviewsOnAdmin = adminPage => {\n  const url = '/api/reviews';\n  fetch(url).then(res => {\n    if (res.status === 200) {\n      return res.json();\n    } else {\n      log('Error: Cannot get reviews');\n    }\n  }).then(json => {\n    const reviews = json.reviews.sort((r1, r2) => {\n      return r1.reported ? -1 : 1;\n    });\n    adminPage.setState({\n      reviews: reviews,\n      reviewsOnPage: reviews\n    });\n  }).catch(error => {\n    log(error);\n  });\n};\nexport const getUserReviews = (page, username) => {\n  const url = '/api/reviews';\n  return fetch(url).then(res => {\n    if (res.status === 200) {\n      return res.json();\n    } else {\n      log('Error: Cannot get reviews');\n    }\n  }).then(json => {\n    // page.setState({\n    //   userReviews: json.reviews.filter((review) => {\n    //     return review.author === username\n    //   })\n    // })\n    return json.reviews.filter(review => {\n      return review.author === username;\n    });\n  }).catch(error => {\n    log(error);\n  });\n};\nexport const updateReview = review => {\n  const url = `/api/reviews/${review.id}`;\n  const request = new Request(url, {\n    method: 'PATCH',\n    body: JSON.stringify(review),\n    headers: {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': 'application/json'\n    }\n  });\n  fetch(request).then(function (res) {\n    if (res.status === 200) {\n      log(\"New review saved\");\n    } else {\n      log(\"Error: Cannot update review\");\n    }\n  }).catch(error => {\n    log(error);\n  });\n};\nexport const deleteReviewOnAdmin = review => {\n  const url = `/api/reviews/${review.id}`;\n  const request = new Request(url, {\n    method: 'delete',\n    body: JSON.stringify(review),\n    headers: {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': 'application/json'\n    }\n  });\n  fetch(request).then(function (res) {\n    if (res.status === 200) {\n      log(\"Review deleted\");\n    } else {\n      log(\"Error: Cannot delete review\");\n    }\n  }).catch(error => {\n    log(error);\n  });\n};\nexport const updateUsernameReputation = (username, reputation, deleted) => {\n  const url = `/api/reviews/${username}/${reputation}`;\n  const request = new Request(url, {\n    method: 'PATCH',\n    body: JSON.stringify({\n      deleted: deleted\n    }),\n    headers: {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': 'application/json'\n    }\n  });\n  fetch(request).then(function (res) {\n    if (res.status === 200) {\n      log(\"Reputation on reviews updated\");\n    } else {\n      log(\"Error: Cannot update reputation\");\n    }\n  }).catch(error => {\n    log(error);\n  });\n};","map":{"version":3,"sources":["/home/abdullah/steam_achievement_tracker-main/achievement-tracker/src/actions/review.js"],"names":["log","console","addReviewOnForum","review","url","request","Request","method","body","JSON","stringify","headers","fetch","then","res","status","catch","error","getReviewsOnForum","forum","reviewNumLimit","json","setState","reviews","reviewsInSection","reviewsOnPage","slice","getReviewsOnAdmin","adminPage","sort","r1","r2","reported","getUserReviews","page","username","filter","author","updateReview","id","deleteReviewOnAdmin","updateUsernameReputation","reputation","deleted"],"mappings":"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","sourcesContent":["const log = console.log\n\nexport const addReviewOnForum = (review) => {\n    const url = '/api/reviews'\n    const request = new Request(url, {\n        method: 'post',\n        body: JSON.stringify(review),\n        headers: {\n            'Accept': 'application/json, text/plain, */*',\n            'Content-Type': 'application/json'\n        }\n    })\n\n    fetch(request)\n        .then(function (res) {\n            if (res.status === 200) {\n                log(\"New review saved\")\n            } else {\n                log(\"Error: Cannot add review\")\n            }\n            log(res)\n        }).catch((error) => {\n            log(error)\n        })\n}\n\nexport const getReviewsOnForum = (forum, reviewNumLimit) => {\n    const url = '/api/reviews'\n\n    fetch(url)\n        .then((res) => {\n            if (res.status === 200) {\n                return res.json()\n            } else {\n                log('Error: Cannot get reviews')\n            }\n        })\n        .then((json) => {\n            forum.setState({\n                reviews: json.reviews,\n                reviewsInSection: json.reviews,\n                reviewsOnPage: json.reviews.slice(\n                    0,\n                    reviewNumLimit\n                )\n            })\n        })\n        .catch((error) => {\n            log(error)\n        })\n}\n\nexport const getReviewsOnAdmin = (adminPage) => {\n    const url = '/api/reviews'\n\n    fetch(url)\n        .then((res) => {\n            if (res.status === 200) {\n                return res.json()\n            } else {\n                log('Error: Cannot get reviews')\n            }\n        })\n        .then((json) => {\n            const reviews = json.reviews.sort((r1, r2) => {\n                return r1.reported ? -1 : 1\n            })\n\n            adminPage.setState({\n                reviews: reviews,\n                reviewsOnPage: reviews\n            })\n        })\n        .catch((error) => {\n            log(error)\n        })\n}\n\nexport const getUserReviews = (page, username) => {\n    const url = '/api/reviews'\n\n    return fetch(url)\n        .then((res) => {\n            if (res.status === 200) {\n                return res.json()\n            } else {\n                log('Error: Cannot get reviews')\n            }\n        })\n        .then((json) => {\n            // page.setState({\n            //   userReviews: json.reviews.filter((review) => {\n            //     return review.author === username\n            //   })\n            // })\n            return json.reviews.filter((review) => {\n                return review.author === username\n            })\n        })\n        .catch((error) => {\n            log(error)\n        })\n}\n\nexport const updateReview = (review) => {\n    const url = `/api/reviews/${review.id}`\n\n    const request = new Request(url, {\n        method: 'PATCH',\n        body: JSON.stringify(review),\n        headers: {\n            'Accept': 'application/json, text/plain, */*',\n            'Content-Type': 'application/json'\n        }\n    })\n\n    fetch(request)\n        .then(function (res) {\n            if (res.status === 200) {\n                log(\"New review saved\")\n            } else {\n                log(\"Error: Cannot update review\")\n            }\n        }).catch((error) => {\n            log(error)\n        })\n}\n\nexport const deleteReviewOnAdmin = (review) => {\n    const url = `/api/reviews/${review.id}`\n\n    const request = new Request(url, {\n        method: 'delete',\n        body: JSON.stringify(review),\n        headers: {\n            'Accept': 'application/json, text/plain, */*',\n            'Content-Type': 'application/json'\n        }\n    })\n\n    fetch(request)\n        .then(function (res) {\n            if (res.status === 200) {\n                log(\"Review deleted\")\n            } else {\n                log(\"Error: Cannot delete review\")\n            }\n        }).catch((error) => {\n            log(error)\n        })\n}\n\nexport const updateUsernameReputation = (username, reputation, deleted) => {\n    const url = `/api/reviews/${username}/${reputation}`\n\n    const request = new Request(url, {\n        method: 'PATCH',\n        body: JSON.stringify({ deleted: deleted }),\n        headers: {\n            'Accept': 'application/json, text/plain, */*',\n            'Content-Type': 'application/json'\n        }\n    })\n\n    fetch(request)\n        .then(function (res) {\n            if (res.status === 200) {\n                log(\"Reputation on reviews updated\")\n            } else {\n                log(\"Error: Cannot update reputation\")\n            }\n        }).catch((error) => {\n            log(error)\n        })\n}"]},"metadata":{},"sourceType":"module"}