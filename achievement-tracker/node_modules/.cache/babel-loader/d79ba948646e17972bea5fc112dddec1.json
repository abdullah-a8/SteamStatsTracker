{"ast":null,"code":"import _regeneratorRuntime from\"/home/abdullah/steam_achievement_tracker-main/achievement-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/abdullah/steam_achievement_tracker-main/achievement-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/home/abdullah/steam_achievement_tracker-main/achievement-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/abdullah/steam_achievement_tracker-main/achievement-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"/home/abdullah/steam_achievement_tracker-main/achievement-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/home/abdullah/steam_achievement_tracker-main/achievement-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/abdullah/steam_achievement_tracker-main/achievement-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from'react';import{CurrentHeaderButton,HeaderButton,HeaderImage,HeadContainer,HeaderNavBar}from'../HeaderComponent';import logo from'./../../steamIcon2.png';import profilePic from\"../AccountSettings/imgs/sampleProfilePic.jpg\";import{logout}from'../../actions/reactAuth';import{PersonalPic,BannerContainer,BannerLink}from'../PersonalBanner';import{AchievementContainer,Game}from'../Achievement';import'./style.css';import{getImage}from'../../actions/profilePic';import{getAchievementStats,getGameSchema}from'../../actions/steamHelpers';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var dateFormat=require('dateformat');var GameAchievements=/*#__PURE__*/function(_React$Component){_inherits(GameAchievements,_React$Component);var _super=_createSuper(GameAchievements);function GameAchievements(props){var _this;_classCallCheck(this,GameAchievements);_this=_super.call(this,props);var gameName=\"\";var userName=\"\";var reputation=0;var gameId=\"\";if(_this.props.location.state===undefined){_this.props.history.push('/dashboard');}else{gameName=_this.props.location.state.gameName;userName=_this.props.location.state.userName;reputation=_this.props.location.state.reputation;gameId=_this.props.location.state.gameId;}var achievementsList=[];var searchAchievementName=\"\";_this.state={searchAchievementName:searchAchievementName,gameName:gameName,userName:userName,reputation:reputation,gameId:gameId,achievementsList:achievementsList,image:\"\"};_this.onChangeGameSearch=_this.onChangeGameSearch.bind(_assertThisInitialized(_this));_this.onSubmitGameSearch=_this.onSubmitGameSearch.bind(_assertThisInitialized(_this));_this.getStats=_this.getStats.bind(_assertThisInitialized(_this));return _this;}_createClass(GameAchievements,[{key:\"componentDidMount\",value:function componentDidMount(){if(this.props.location.state!==undefined){this.getStats(this.state.gameId);}getImage(this.state.userName,this);}},{key:\"getStats\",value:function(){var _getStats=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(id){var achievementsList,data,apiAchievement,achievements,i,obj,key,date;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:achievementsList=[];_context.next=3;return getAchievementStats(id);case 3:data=_context.sent;_context.next=6;return getGameSchema(id);case 6:apiAchievement=_context.sent;achievements=data.achievements;for(i=0;i<achievements.length;i++){obj={};key=achievements[i].apiname;obj.image=apiAchievement[key].icon;obj.name=apiAchievement[key].displayName;obj.achieved=achievements[i].achieved;if(achievements[i].unlocktime===0){obj.achievedTime=\"N/A\";}else{date=new Date(achievements[i].unlocktime*1000);obj.achievedTime=dateFormat(date,\"dd/mm/yyyy hh:MM:ss tt\");}achievementsList.push(obj);}this.setState({achievementsList:achievementsList});case 10:case\"end\":return _context.stop();}}},_callee,this);}));function getStats(_x){return _getStats.apply(this,arguments);}return getStats;}()},{key:\"onChangeGameSearch\",value:function onChangeGameSearch(e){this.setState({searchAchievementName:e.target.value});}},{key:\"onSubmitGameSearch\",value:function onSubmitGameSearch(e){e.preventDefault();this.setState({searchAchievementName:\"\"});}},{key:\"render\",value:function render(){var _this2=this;return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(HeadContainer,{bgId:\"dashboard\",children:/*#__PURE__*/_jsxs(HeaderNavBar,{children:[/*#__PURE__*/_jsx(HeaderImage,{to:\"/dashboard\",src:logo}),/*#__PURE__*/_jsxs(\"div\",{className:\"group\",children:[/*#__PURE__*/_jsx(CurrentHeaderButton,{path:\"/Dashboard\",children:\"Dashboard\"}),/*#__PURE__*/_jsx(HeaderButton,{path:\"/reviewForum\",children:\"Forum\"}),/*#__PURE__*/_jsx(HeaderButton,{path:\"/Analytics\",children:\"Analytics\"}),/*#__PURE__*/_jsx(HeaderButton,{path:\"/AccountSettings\",children:\"Settings\"}),/*#__PURE__*/_jsx(HeaderButton,{path:\"/\",logoutFunc:function logoutFunc(){logout(_this2.props.app);},children:\"Log Out\"})]})]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"gameAchivementBody\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"gameAchivementBodyLeft\",children:/*#__PURE__*/_jsxs(BannerContainer,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"bannerUserInfo\",children:/*#__PURE__*/_jsxs(\"div\",{id:\"bannerUserName\",children:[\"User Name: \",this.state.userName]})}),this.state.image===\"\"?/*#__PURE__*/_jsx(PersonalPic,{src:profilePic}):/*#__PURE__*/_jsx(PersonalPic,{src:\"data:image/png;base64,\"+this.state.image}),/*#__PURE__*/_jsxs(\"span\",{className:\"bannerReputation\",children:[\"Reputation: \",this.state.reputation]}),/*#__PURE__*/_jsxs(\"div\",{className:\"bannerLeftLinkGroup\",children:[/*#__PURE__*/_jsx(BannerLink,{path:\"https://discord.com\",children:\"Discord\"}),/*#__PURE__*/_jsx(BannerLink,{path:\"https://twitter.com\",children:\"Twitter\"}),/*#__PURE__*/_jsx(BannerLink,{path:\"https://www.facebook.com\",children:\"Facebook\"}),/*#__PURE__*/_jsx(BannerLink,{path:\"https://store.steampowered.com\",children:\"Steam\"})]})]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"gameAchivementBodyMiddle\",children:[/*#__PURE__*/_jsx(\"p\",{style:{color:\"white\"},children:this.state.gameName}),/*#__PURE__*/_jsx(\"form\",{className:\"searchGame\",onSubmit:function onSubmit(e){return _this2.onSubmitGameSearch(e);},children:/*#__PURE__*/_jsx(\"input\",{className:\"searchGameInput\",placeholder:\"Search for an Achievement...\",value:this.state.searchGameName,onChange:function onChange(e){return _this2.onChangeGameSearch(e);}})}),/*#__PURE__*/_jsx(AchievementContainer,{bodyId:\"fullLength\",children:this.state.achievementsList.map(function(item,i){if(item.name.toLowerCase().startsWith(_this2.state.searchAchievementName.toLowerCase())){var isAchievedBg=\"#525252\";var opac;if(item.achieved==0){opac=\"0.4\";}else{opac=\"1\";}return/*#__PURE__*/_jsxs(Game,{image:item.image,isAchievedBg:isAchievedBg,opac:opac,children:[/*#__PURE__*/_jsx(\"div\",{className:\"AchievementName\",children:item.name}),/*#__PURE__*/_jsx(\"div\",{className:\"AchievedTime\",children:item.achievedTime})]},i);}})})]})]})]});}}]);return GameAchievements;}(React.Component);export default GameAchievements;","map":{"version":3,"sources":["/home/abdullah/steam_achievement_tracker-main/achievement-tracker/src/react-components/GameAchievements/index.js"],"names":["React","CurrentHeaderButton","HeaderButton","HeaderImage","HeadContainer","HeaderNavBar","logo","profilePic","logout","PersonalPic","BannerContainer","BannerLink","AchievementContainer","Game","getImage","getAchievementStats","getGameSchema","dateFormat","require","GameAchievements","props","gameName","userName","reputation","gameId","location","state","undefined","history","push","achievementsList","searchAchievementName","image","onChangeGameSearch","bind","onSubmitGameSearch","getStats","id","data","apiAchievement","achievements","i","length","obj","key","apiname","icon","name","displayName","achieved","unlocktime","achievedTime","date","Date","setState","e","target","value","preventDefault","app","color","searchGameName","map","item","toLowerCase","startsWith","isAchievedBg","opac","Component"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport { CurrentHeaderButton, HeaderButton, HeaderImage, HeadContainer, HeaderNavBar } from '../HeaderComponent'\nimport logo from './../../steamIcon2.png'\nimport profilePic from \"../AccountSettings/imgs/sampleProfilePic.jpg\"\nimport { logout } from '../../actions/reactAuth'\nimport { PersonalPic, BannerContainer, BannerLink } from '../PersonalBanner'\nimport { AchievementContainer, Game } from '../Achievement'\nimport './style.css';\nimport { getImage } from '../../actions/profilePic'\nimport { getAchievementStats, getGameSchema } from '../../actions/steamHelpers'\nconst dateFormat = require('dateformat');\n\nclass GameAchievements extends React.Component {\n  constructor(props) {\n    super(props)\n\n    let gameName = \"\"\n    let userName = \"\"\n    let reputation = 0\n    let gameId = \"\"\n\n\n\n    if (this.props.location.state === undefined) {\n      this.props.history.push('/dashboard')\n    } else {\n      gameName = this.props.location.state.gameName\n      userName = this.props.location.state.userName\n      reputation = this.props.location.state.reputation\n      gameId = this.props.location.state.gameId\n    }\n\n\n    const achievementsList = []\n    const searchAchievementName = \"\"\n\n    this.state = {\n      searchAchievementName: searchAchievementName,\n      gameName: gameName,\n      userName: userName,\n      reputation: reputation,\n      gameId: gameId,\n      achievementsList: achievementsList,\n      image: \"\"\n    }\n    this.onChangeGameSearch = this.onChangeGameSearch.bind(this)\n    this.onSubmitGameSearch = this.onSubmitGameSearch.bind(this)\n    this.getStats = this.getStats.bind(this)\n  }\n\n  componentDidMount() {\n    if (this.props.location.state !== undefined) {\n      this.getStats(this.state.gameId)\n    }\n    getImage(this.state.userName, this)\n  }\n\n  async getStats(id) {\n    const achievementsList = []\n    const data = await getAchievementStats(id)\n    const apiAchievement = await getGameSchema(id)\n    const achievements = data.achievements\n    for (let i = 0; i < achievements.length; i++) {\n      const obj = {}\n      const key = achievements[i].apiname\n      obj.image = apiAchievement[key].icon\n      obj.name = apiAchievement[key].displayName\n      obj.achieved = achievements[i].achieved\n      if (achievements[i].unlocktime === 0) {\n        obj.achievedTime = \"N/A\"\n      } else {\n        const date = new Date(achievements[i].unlocktime * 1000)\n        obj.achievedTime = dateFormat(date, \"dd/mm/yyyy hh:MM:ss tt\")\n      }\n      achievementsList.push(obj)\n    }\n    this.setState({ achievementsList: achievementsList })\n  }\n\n  onChangeGameSearch(e) {\n    this.setState({ searchAchievementName: e.target.value })\n  }\n\n  onSubmitGameSearch(e) {\n    e.preventDefault()\n    this.setState({ searchAchievementName: \"\" })\n  }\n\n  render() {\n    return (\n      <>\n        <HeadContainer bgId={\"dashboard\"}>\n          <HeaderNavBar>\n            <HeaderImage to='/dashboard' src={logo} />\n            <div className='group'>\n              {/* {this.state.isAdmin && (<HeaderButton path='/admin'>Admin</HeaderButton>)} */}\n              <CurrentHeaderButton path='/Dashboard'>Dashboard</CurrentHeaderButton>\n              <HeaderButton path='/reviewForum'>Forum</HeaderButton>\n              <HeaderButton path='/Analytics'>Analytics</HeaderButton>\n              <HeaderButton path='/AccountSettings'>Settings</HeaderButton>\n              <HeaderButton path='/' logoutFunc={() => { logout(this.props.app) }}>Log Out</HeaderButton>\n            </div>\n          </HeaderNavBar>\n        </HeadContainer>\n        <div className='gameAchivementBody'>\n          <div className='gameAchivementBodyLeft'>\n            <BannerContainer>\n              <div className=\"bannerUserInfo\">\n                <div id=\"bannerUserName\">User Name: {this.state.userName}</div>\n              </div>\n              {this.state.image === \"\" ?\n                <PersonalPic src={profilePic} /> :\n                <PersonalPic src={\"data:image/png;base64,\" + this.state.image} />\n              }\n              <span className=\"bannerReputation\">Reputation: {this.state.reputation}</span>\n              <div className=\"bannerLeftLinkGroup\">\n                <BannerLink path=\"https://discord.com\">Discord</BannerLink>\n                <BannerLink path='https://twitter.com'>Twitter</BannerLink>\n                <BannerLink path='https://www.facebook.com'>Facebook</BannerLink>\n                <BannerLink path='https://store.steampowered.com'>Steam</BannerLink>\n              </div>\n            </BannerContainer>\n          </div>\n          <div className='gameAchivementBodyMiddle'>\n            <p style={{ color: \"white\" }}>{this.state.gameName}</p>\n            <form className=\"searchGame\" onSubmit={e => this.onSubmitGameSearch(e)}>\n              <input\n                className=\"searchGameInput\"\n                placeholder=\"Search for an Achievement...\"\n                value={this.state.searchGameName}\n                onChange={e => this.onChangeGameSearch(e)}\n              />\n            </form>\n            <AchievementContainer bodyId={\"fullLength\"}>\n              {this.state.achievementsList.map((item, i) => {\n                if (item.name.toLowerCase().startsWith(this.state.searchAchievementName.toLowerCase())) {\n                  let isAchievedBg = \"#525252\";\n                  let opac;\n                  if (item.achieved == 0) {\n                    opac = \"0.4\"\n                  } else {\n                    opac = \"1\"\n                  }\n                  return (\n                    <Game key={i} image={item.image} isAchievedBg={isAchievedBg} opac={opac}>\n                      <div className=\"AchievementName\">{item.name}</div>\n                      <div className=\"AchievedTime\">{item.achievedTime}</div>\n                    </Game>\n                  )\n                }\n              })}\n            </AchievementContainer>\n          </div>\n        </div>\n      </>\n    )\n  }\n}\n\nexport default GameAchievements;\n"]},"metadata":{},"sourceType":"module"}