{"ast":null,"code":"// Functions to help with user authentication\n// environment configurations\nimport ENV from'../config.js';var API_HOST=ENV.api_host;// Send a request to check if a user is logged in through the session cookie\nexport var checkSession=function checkSession(app){var url=\"\".concat(API_HOST,\"/users/current\");fetch(url).then(function(res){if(res.status===200){return res.json();}}).then(function(json){if(json&&json.currentUser){app.setState({currentUser:json.currentUser});}}).catch(function(error){console.log(error);});};// A function to send a POST request with the user to be logged in\nexport var login=function login(loginParams,app){// Create our request constructor with all the parameters we need\nvar request=new Request(\"\".concat(API_HOST,\"/users/login\"),{method:\"post\",body:JSON.stringify(loginParams),headers:{Accept:\"application/json, text/plain, */*\",\"Content-Type\":\"application/json\"}});// Send the request with fetch()\nfetch(request).then(function(res){if(res.status===200){return res.json();}else if(res.status===404){alert('username or password incorrect');}}).then(function(json){if(json&&json.currentUser!==undefined){app.setState({currentUser:json.currentUser});localStorage.setItem('currentUser',json.currentUser);}}).catch(function(error){console.log(error);});};// Changes the current user's password\nexport var changePassword=function changePassword(newPassword){// Create our request constructor with all the parameters we need\nvar request=new Request(\"\".concat(API_HOST,\"/users/changepassword\"),{method:\"post\",body:JSON.stringify({\"newPassword\":newPassword}),headers:{Accept:\"application/json, text/plain, */*\",\"Content-Type\":\"application/json\"}});// Send the request with fetch()\nfetch(request).then(function(res){if(res.status===201){alert(\"password changed successfully\");}else{alert('password change failed');}}).catch(function(error){console.log(error);});};// A function to send a GET request to logout the current user\nexport var logout=function logout(app){var url=\"\".concat(API_HOST,\"/users/logout\");fetch(url).then(function(res){app.setState({currentUser:null,message:{type:\"\",body:\"\"}});localStorage.clear();}).catch(function(error){console.log(error);});};","map":{"version":3,"sources":["/home/abdullah/steam_achievement_tracker-main/achievement-tracker/src/actions/reactAuth.js"],"names":["ENV","API_HOST","api_host","checkSession","app","url","fetch","then","res","status","json","currentUser","setState","catch","error","console","log","login","loginParams","request","Request","method","body","JSON","stringify","headers","Accept","alert","undefined","localStorage","setItem","changePassword","newPassword","logout","message","type","clear"],"mappings":"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","sourcesContent":["// Functions to help with user authentication\n\n// environment configurations\nimport ENV from '../config.js'\nconst API_HOST = ENV.api_host\n\n// Send a request to check if a user is logged in through the session cookie\nexport const checkSession = (app) => {\n    const url = `${API_HOST}/users/current`;\n    fetch(url)\n        .then(res => {\n            if (res.status === 200) {\n                return res.json();\n            }\n        })\n        .then(json => {\n            if (json && json.currentUser) {\n                app.setState({ currentUser: json.currentUser });\n            }\n        })\n        .catch(error => {\n            console.log(error);\n        });\n};\n\n// A function to send a POST request with the user to be logged in\nexport const login = (loginParams, app) => {\n    // Create our request constructor with all the parameters we need\n    const request = new Request(`${API_HOST}/users/login`, {\n        method: \"post\",\n        body: JSON.stringify(loginParams),\n        headers: {\n            Accept: \"application/json, text/plain, */*\",\n            \"Content-Type\": \"application/json\"\n        }\n    });\n    // Send the request with fetch()\n    fetch(request)\n        .then(res => {\n            if (res.status === 200) {\n                return res.json();\n            } else if (res.status === 404) {\n                alert('username or password incorrect')\n            }\n        })\n        .then(json => {\n            if (json && json.currentUser !== undefined) {\n                app.setState({ currentUser: json.currentUser });\n                localStorage.setItem('currentUser', json.currentUser)\n            }\n        })\n        .catch(error => {\n            console.log(error);\n        });\n};\n\n// Changes the current user's password\nexport const changePassword = (newPassword) => {\n    // Create our request constructor with all the parameters we need\n    const request = new Request(`${API_HOST}/users/changepassword`, {\n        method: \"post\",\n        body: JSON.stringify({ \"newPassword\": newPassword }),\n        headers: {\n            Accept: \"application/json, text/plain, */*\",\n            \"Content-Type\": \"application/json\"\n        }\n    });\n    // Send the request with fetch()\n    fetch(request)\n        .then(res => {\n            if (res.status === 201) {\n                alert(\"password changed successfully\")\n            } else {\n                alert('password change failed')\n            }\n        })\n        .catch(error => {\n            console.log(error);\n        });\n};\n\n// A function to send a GET request to logout the current user\nexport const logout = (app) => {\n    const url = `${API_HOST}/users/logout`;\n\n    fetch(url)\n        .then(res => {\n            app.setState({\n                currentUser: null,\n                message: { type: \"\", body: \"\" }\n            });\n            localStorage.clear()\n        })\n        .catch(error => {\n            console.log(error);\n        });\n};\n"]},"metadata":{},"sourceType":"module"}